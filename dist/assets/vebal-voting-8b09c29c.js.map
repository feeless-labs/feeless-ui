{"version":3,"file":"vebal-voting-8b09c29c.js","sources":["../../src/components/contextual/pages/vebal/MultiVoting/VoteAllocation.vue","../../src/components/contextual/pages/vebal/MultiVoting/OverLimitVote.vue","../../src/components/contextual/pages/vebal/MultiVoting/VotePoolDetails.vue","../../src/components/contextual/pages/vebal/MultiVoting/VoteInput.vue","../../src/components/contextual/pages/vebal/MultiVoting/VoteInputList.vue","../../src/services/contracts/gauge-controller.service.ts","../../src/components/contextual/pages/vebal/MultiVoting/composables/useVotingTransactionState.ts","../../src/components/contextual/pages/vebal/MultiVoting/composables/useVotingActions.ts","../../src/components/contextual/pages/vebal/MultiVoting/VotingActions.vue","../../src/components/contextual/pages/vebal/MultiVoting/ConfirmedVote.vue","../../src/components/contextual/pages/vebal/MultiVoting/VotingSubmission.vue","../../src/components/contextual/pages/vebal/MultiVoting/MultiVoting.vue","../../src/pages/vebal-voting.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { formatVoteSharesWith2Decimals } from '../voting-utils';\n\ntype Props = {\n  message: string;\n  shares: string | number;\n  error?: boolean;\n  withDecimals?: boolean;\n};\n\nconst props = withDefaults(defineProps<Props>(), {\n  error: false,\n  withDecimals: false,\n});\n</script>\n\n<template>\n  <div\n    class=\"p-2 mb-2 text-base font-semibold rounded-lg border\"\n    :class=\"\n      props.error\n        ? 'bg-red-50 dark:bg-red-500/10 border-red-200 dark:border-red-900 text-black dark:text-white'\n        : 'bg-gray-100 dark:bg-gray-800 border-gray-100 dark:border-gray-800'\n    \"\n  >\n    <div class=\"flex justify-between p-2\">\n      <div>\n        {{ props.message }}\n      </div>\n      <div v-if=\"withDecimals\">\n        {{ formatVoteSharesWith2Decimals(props.shares.toString()) }} %\n      </div>\n      <div v-else>{{ props.shares }} %</div>\n    </div>\n  </div>\n  <div v-if=\"error\" class=\"mt-3 ml-2 text-sm text-red-500\">\n    Your votes canâ€™t exceed 100%\n  </div>\n</template>","\n<script setup lang=\"ts\">\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport { useVotingWarnings } from './composables/useVotingWarnings';\n\ntype Props = {\n  pool: VotingPool;\n};\n\nconst props = defineProps<Props>();\nconst { lpVoteOverLimitWarning } = useVotingWarnings(props.pool);\n</script>\n<template>\n  <BalTooltip v-if=\"lpVoteOverLimitWarning\" textAlign=\"left\">\n    <template #activator>\n      <BalIcon class=\"ml-1\" name=\"alert-triangle\" size=\"sm\" />\n    </template>\n    <div>\n      <span class=\"font-semibold\">\n        {{ lpVoteOverLimitWarning.title }}\n      </span>\n      <p class=\"text-gray-500\">\n        {{ lpVoteOverLimitWarning.description }}\n      </p>\n    </div>\n  </BalTooltip>\n</template>","<script lang=\"ts\" setup>\nimport BalChipExpired from '@/components/chips/BalChipExpired.vue';\nimport BalChipNew from '@/components/chips/BalChipNew.vue';\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport { getNetworkSlug } from '@/composables/useNetwork';\nimport { isStableLike, isUnknownType } from '@/composables/usePoolHelpers';\nimport { orderedGaugeTokens } from '@/composables/useVotingPools';\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\nimport { useVoting } from '../providers/voting.provider';\nimport { isGaugeNew } from '../voting-utils';\n\ntype Props = {\n  pool: VotingPool;\n};\ndefineProps<Props>();\n\nconst { getIsGaugeExpired } = useVoting();\n</script>\n\n<template>\n  <div class=\"flex items-center py-2 px-3\">\n    <div\n      class=\"flex justify-center items-center w-8 h-8 bg-gray-50 dark:bg-gray-800 rounded shadow-sm\"\n    >\n      <img\n        :src=\"buildNetworkIconURL(getNetworkSlug(pool.network))\"\n        :alt=\"pool.network.toString()\"\n        class=\"w-6 h-6\"\n      />\n    </div>\n\n    <TokenPills\n      class=\"pl-6 font-semibold\"\n      :tokens=\"orderedGaugeTokens(pool)\"\n      :isStablePool=\"\n        isStableLike(pool.poolType) || isUnknownType(pool.poolType)\n      \"\n    />\n    <BalChipNew v-if=\"isGaugeNew(pool)\" class=\"ml-2\" />\n    <BalChipExpired v-if=\"getIsGaugeExpired(pool.gauge.address)\" class=\"ml-2\" />\n  </div>\n</template>","<script lang=\"ts\" setup>\nimport TimeLockedVote from '@/components/contextual/pages/vebal/MultiVoting/TimeLockedVote.vue';\nimport OverLimitVote from '@/components/contextual/pages/vebal/MultiVoting/OverLimitVote.vue';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport { isPositive } from '@/lib/utils/validations';\nimport VotePoolDetails from './VotePoolDetails.vue';\nimport VotePoolFooter from './VotePoolFooter.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: VotingPool;\n  modelValue?: string;\n};\n/**\n * PROPS & EMITS\n */\nwithDefaults(defineProps<Props>(), {\n  modelValue: '',\n});\n\nconst emit = defineEmits<{\n  (e: 'update:modelValue', value: string): void;\n}>();\n\n/**\n * STATE\n */\nconst inputRules = [isPositive()];\n\n/**\n * METHODS\n */\n</script>\n\n<template>\n  <div class=\"special-input\">\n    <BalTextInput\n      :modelValue=\"modelValue\"\n      v-bind=\"$attrs\"\n      class=\"mb-2\"\n      type=\"number\"\n      name=\"poolVote\"\n      :rules=\"inputRules\"\n      inputAlignRight\n      placeholder=\"0\"\n      @input=\"val => emit('update:modelValue', val)\"\n    >\n      <template #prepend>\n        <VotePoolDetails :pool=\"pool\" />\n      </template>\n      <template #append>\n        <div class=\"flex items-center px-2 h-full\">\n          <span class=\"text-xl text-black dark:text-white\">%</span>\n          <TimeLockedVote class=\"ml-2\" :pool=\"pool\" />\n          <OverLimitVote class=\"ml-2\" :pool=\"pool\" />\n        </div>\n      </template>\n      <template #footer>\n        <VotePoolFooter :pool=\"pool\" />\n      </template>\n    </BalTextInput>\n  </div>\n</template>\n\n<style lang=\"css\" scoped>\n.special-input :deep(input) {\n  @apply w-14 ml-auto;\n\n  min-width: 3.5rem;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { useVoting } from '../providers/voting.provider';\nimport VoteAllocation from './VoteAllocation.vue';\nimport VoteInput from './VoteInput.vue';\n\nconst {\n  selectedPools,\n  votingRequest,\n  hasExpiredPoolsSelected,\n  hasTimeLockedPools,\n  totalAllocatedWeight,\n  isVotingRequestValid,\n  isRequestingTooMuchWeight,\n  isInputDisabled,\n  goToSubmissionStep,\n} = useVoting();\n</script>\n\n<template>\n  <div>\n    <BalAlert\n      v-if=\"hasTimeLockedPools\"\n      type=\"tip\"\n      class=\"mb-3\"\n      title=\"You have a timelocked pool gauge\"\n      description=\"You are not able to edit the votes on any pool gauge that you voted on within the last 10 days.\"\n    />\n\n    <BalAlert\n      v-if=\"hasExpiredPoolsSelected\"\n      type=\"tip\"\n      class=\"mb-3\"\n      title=\"You have an expired pool\"\n      description=\"Votes for expired pools must be removed. Select other pools from the veBAL page to reallocate these votes.\"\n    />\n\n    <VoteInput\n      v-for=\"(pool, i) in selectedPools\"\n      :key=\"pool.gauge.address\"\n      v-model=\"votingRequest[pool.gauge.address]\"\n      :pool=\"pool\"\n      :disabled=\"isInputDisabled(pool)\"\n      :autoFocus=\"i === 0\"\n    />\n\n    <VoteAllocation\n      message=\"Total vote allocation\"\n      :shares=\"totalAllocatedWeight\"\n      :error=\"isRequestingTooMuchWeight\"\n    ></VoteAllocation>\n\n    <BalBtn\n      class=\"mt-3\"\n      size=\"md\"\n      label=\"Next\"\n      color=\"gradient\"\n      :disabled=\"!isVotingRequestValid\"\n      block\n      @click=\"goToSubmissionStep\"\n    />\n  </div>\n</template>\n","import { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nimport GaugeControllerAbi from '@/lib/abi/GaugeController.json';\nimport ConfigService, { configService } from '@/services/config/config.service';\n\nimport WalletService, {\n  walletService as walletServiceInstance,\n} from '@/services/web3/wallet.service';\n\nexport default class GaugeControllerService {\n  abi: any;\n\n  constructor(\n    protected readonly config: ConfigService = configService,\n    private readonly walletService: WalletService = walletServiceInstance\n  ) {\n    this.abi = GaugeControllerAbi;\n  }\n\n  get address() {\n    return this.config.network.addresses.gaugeController;\n  }\n\n  public async voteForManyGaugeWeights(\n    gaugeAddresses: string[],\n    weights: BigNumber[],\n    options: Record<string, any> = {}\n  ): Promise<TransactionResponse> {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'vote_for_many_gauge_weights',\n      params: [gaugeAddresses, weights],\n      options,\n    });\n  }\n\n  public voteForGaugeWeights(\n    gaugeAddress: string,\n    weight: BigNumber,\n    options: Record<string, any> = {}\n  ): Promise<TransactionResponse> {\n    return this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'vote_for_gauge_weights',\n      params: [gaugeAddress, weight],\n      options,\n    });\n  }\n}\n\nexport const gaugeControllerService = new GaugeControllerService();\n","import { useTxState } from '@/composables/useTxState';\n\n// Global transaction state to be used by gauge voting components\nconst { txState, resetTxState } = useTxState();\n\nexport function useVotingTransactionState() {\n  return { txState, resetTxState };\n}\n","import {\n  hasOnlyExpiredPools,\n  sharesToBps,\n} from '@/components/contextual/pages/vebal/voting-utils';\nimport { POOLS } from '@/constants/pools';\nimport GaugeControllerService, {\n  gaugeControllerService as gaugeControllerServiceInstance,\n} from '@/services/contracts/gauge-controller.service';\nimport { TransactionActionInfo } from '@/types/transactions';\nimport { TransactionReceipt } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useVotingTransactionState } from './useVotingTransactionState';\nimport useTransactions from '@/composables/useTransactions';\nimport { setVotingCompleted } from '../../providers/voting.provider';\n\nexport type ConfirmedVotingRequest = {\n  gaugeAddress: string;\n  weight: string;\n}[];\n\nexport type VotingActionProps = {\n  request: ConfirmedVotingRequest;\n  expiredGauges?: readonly string[];\n};\n\nexport type UseVotingActionParams = VotingActionProps & {\n  gaugeControllerService?: GaugeControllerService;\n};\n\nconst { txState } = useVotingTransactionState();\n\nexport function useVotingActions({\n  request,\n  expiredGauges,\n  gaugeControllerService = gaugeControllerServiceInstance,\n}: UseVotingActionParams) {\n  const { addTransaction } = useTransactions();\n\n  const votingActions = createVotingActions();\n\n  function createVotingActions(): TransactionActionInfo[] {\n    if (request.length > 8) {\n      return [createVotingAction(1), createVotingAction(2)];\n    }\n\n    return [createVotingAction()];\n  }\n\n  function createVotingAction(\n    batchNumber: BatchNumber = 1\n  ): TransactionActionInfo {\n    const requestBatch = buildBatch(request, batchNumber);\n\n    const action = () => submitVotes(requestBatch);\n    return {\n      label: buildConfirmButtonLabel(request, expiredGauges),\n      loadingLabel: 'Confirm voting in wallet',\n      confirmingLabel: 'Voting',\n      stepTooltip: buildStepTooltip(batchNumber),\n      action,\n    };\n  }\n\n  async function submitVotes(\n    requestBatch: ConfirmedVotingRequest\n  ): Promise<TransactionResponse> {\n    txState.init = true;\n    try {\n      const tx = await voteForManyGauges(requestBatch, gaugeControllerService);\n\n      txState.confirming = true;\n\n      addTransaction({\n        id: tx.hash,\n        type: 'tx',\n        action: 'voteForGauge',\n        summary: getTransactionSummaryMsg(requestBatch),\n        details: getTransactionDetails(requestBatch),\n      });\n\n      return tx;\n    } catch (error) {\n      txState.confirming = false;\n      console.log(error);\n      throw new Error('Failed to submit votes.', {\n        cause: error,\n      });\n    } finally {\n      txState.init = false;\n    }\n  }\n\n  async function handleSuccess(\n    receipt: TransactionReceipt,\n    confirmedAt: string\n  ): Promise<void> {\n    console.log('Voting receipt', receipt);\n    setVotingCompleted();\n    txState.receipt = receipt;\n    txState.confirmedAt = confirmedAt;\n    txState.confirmed = true;\n    txState.confirming = false;\n  }\n\n  function handleFailed() {\n    txState.confirming = false;\n  }\n\n  return {\n    txState,\n    votingActions,\n    handleSuccess,\n    handleFailed,\n  };\n}\n\ntype BatchNumber = 1 | 2;\n\nfunction buildStepTooltip(batchNumber) {\n  if (batchNumber === 1) return 'Confirm first batch of votes';\n  if (batchNumber === 2) return 'Confirm second batch of votes';\n  return '';\n}\n\nfunction buildConfirmButtonLabel(\n  request: ConfirmedVotingRequest,\n  expiredGauges?: readonly string[]\n) {\n  if (\n    hasOnlyExpiredPools(\n      request.map(item => item.gaugeAddress),\n      expiredGauges\n    )\n  ) {\n    if (request.length > 1) return 'Remove votes';\n    return 'Remove vote';\n  }\n  if (request.length > 1) return 'Confirm votes';\n  return 'Confirm vote';\n}\n\nasync function voteForManyGauges(\n  requestBatch: ConfirmedVotingRequest,\n  gaugeControllerService: GaugeControllerService\n): Promise<TransactionResponse> {\n  // Gauge Controller requires a fixed 8 Gauge Addresses\n  // We take the first 8 Voting Gauges\n  // If there's less than 8, fill the remaining with Zero Addresses\n  const gaugeAddresses: string[] = requestBatch.map(item => item.gaugeAddress);\n  const weights: BigNumber[] = requestBatch.map(item =>\n    sharesToBps(item.weight)\n  );\n\n  const zeroAddresses: string[] = new Array(8 - gaugeAddresses.length).fill(\n    POOLS.ZeroAddress\n  );\n  const zeroWeights: BigNumber[] = new Array(8 - gaugeAddresses.length).fill(\n    BigNumber.from(0)\n  );\n  console.log('Voting:', {\n    addresses: [...gaugeAddresses, ...zeroAddresses],\n    weights: [\n      ...weights.map(weight => weight.toNumber()),\n      ...zeroWeights.map(weight => weight.toNumber()),\n    ],\n  });\n\n  return await gaugeControllerService.voteForManyGaugeWeights(\n    [...gaugeAddresses, ...zeroAddresses],\n    [...weights, ...zeroWeights]\n  );\n}\n\nfunction buildBatch(request: ConfirmedVotingRequest, batchNumber: BatchNumber) {\n  const batchSize = 8;\n  if (batchNumber === 2) return request.slice(batchSize);\n  if (request.length >= batchSize) {\n    return request.slice(0, batchSize);\n  }\n  return request;\n}\n\nexport function getTransactionSummaryMsg(\n  request: ConfirmedVotingRequest\n): string {\n  return request.length > 1\n    ? `Voting on ${request.length} pools`\n    : `Voting on 1 pool`;\n}\n\nexport function getTransactionDetails(request: ConfirmedVotingRequest) {\n  return {\n    gaugeAddresses: request.map(item => item.gaugeAddress),\n    votes: request.map(item => item.weight),\n  };\n}\n","<script setup lang=\"ts\">\nimport BalActionSteps from '@/components/_global/BalActionSteps/BalActionSteps.vue';\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\nimport {\n  VotingActionProps,\n  useVotingActions,\n} from './composables/useVotingActions';\n\nconst props = defineProps<VotingActionProps>();\n\nconst { handleFailed, handleSuccess, txState, votingActions } =\n  useVotingActions(props);\n</script>\n\n<template>\n  <transition>\n    <BalActionSteps\n      v-if=\"!txState.confirmed || !txState.receipt\"\n      :actions=\"votingActions\"\n      primaryActionType=\"voteForGauge\"\n      @success=\"handleSuccess\"\n      @failed=\"handleFailed\"\n    />\n    <div v-else>\n      <ConfirmationIndicator :txReceipt=\"txState.receipt\" />\n\n      <BalBtn\n        tag=\"router-link\"\n        :to=\"{\n          name: 'vebal',\n          params: { networkSlug: 'ethereum' },\n        }\"\n        color=\"gray\"\n        outline\n        block\n        class=\"mt-2\"\n      >\n        Return to veBAL list\n      </BalBtn>\n    </div>\n  </transition>\n</template>","<script setup lang=\"ts\">\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport VotePoolDetails from './VotePoolDetails.vue';\nimport VotePoolFooter from './VotePoolFooter.vue';\nimport { useVoting } from '../providers/voting.provider';\nimport { formatVoteSharesWith2Decimals } from '../voting-utils';\n\ntype Props = {\n  pool: VotingPool;\n};\ndefineProps<Props>();\n\nconst { votingRequest } = useVoting();\n</script>\n\n<template>\n  <div\n    class=\"p-1 mb-2 text-base dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-800 shadow-inner\"\n  >\n    <div class=\"flex justify-between\">\n      <VotePoolDetails :pool=\"pool\"></VotePoolDetails>\n      <div class=\"mt-2\">\n        <div class=\"flex items-center pr-4 h-full font-semibold\">\n          <span class=\"text-xl text-black dark:text-white\">\n            {{\n              formatVoteSharesWith2Decimals(votingRequest[pool.gauge.address])\n            }}\n            %\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <VotePoolFooter :pool=\"pool\"></VotePoolFooter>\n  </div>\n</template>","<script setup lang=\"ts\">\n/**\n * Shows a read-only list of votes once the user has clicked \"Next\" after filling the Vote Inputs\n */\nimport VotingActions from '@/components/contextual/pages/vebal/MultiVoting/VotingActions.vue';\nimport VoteAllocation from './VoteAllocation.vue';\nimport ConfirmedVote from './ConfirmedVote.vue';\nimport { useVoting } from '../providers/voting.provider';\n\nconst {\n  unlockedSelectedPools,\n  totalAllocatedWeight,\n  expiredGauges,\n  confirmedVotingRequest,\n  shouldBatchVotes,\n} = useVoting();\n</script>\n\n<template>\n  <div>\n    <BalAlert\n      v-if=\"shouldBatchVotes\"\n      type=\"tip\"\n      class=\"mb-3\"\n      title=\"Your votes have been batched\"\n      description=\"The protocol only supports up to 8 votes per transaction, so additional votes will be confirmed afterwards.\"\n    />\n\n    <ConfirmedVote\n      v-for=\"pool in unlockedSelectedPools\"\n      :key=\"pool.gauge.address\"\n      :pool=\"pool\"\n    />\n\n    <VoteAllocation\n      message=\"Total vote allocation\"\n      :shares=\"totalAllocatedWeight\"\n      withDecimals\n    ></VoteAllocation>\n\n    <VotingActions\n      :request=\"confirmedVotingRequest\"\n      :expiredGauges=\"expiredGauges\"\n    />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport VotingLayout from '@/components/layouts/VotingLayout.vue';\nimport VoteInputList from './VoteInputList.vue';\nimport VotingSubmission from './VotingSubmission.vue';\nimport { useVotingTransactionState } from './composables/useVotingTransactionState';\nimport { voteLockedUntilText } from '../voting-utils';\nimport { useVoting } from '../providers/voting.provider';\n\nconst { isSubmissionStep } = useVoting();\nconst { txState, resetTxState } = useVotingTransactionState();\n\nconst headerLabel = computed(() =>\n  txState.confirmed ? 'Your votes were registered ðŸŽ‰' : 'Pool gauge voting'\n);\n\nonUnmounted(() => resetTxState());\n</script>\n\n<template>\n  <div>\n    <VotingLayout :isOneColumn=\"txState.confirmed\">\n      <!-- Left column is hidden after the voting is successful  -->\n      <template v-if=\"!txState.confirmed\" #left>\n        <BalCard noPad shadow=\"none\">\n          <div class=\"p-3 w-full\">\n            <h6>How it works</h6>\n          </div>\n          <div class=\"p-3 -mt-2\">\n            Your vote directs liquidity mining emissions for the future periods\n            starting next Thursday at 0:00 UTC. Voting power is set at the time\n            of a vote. If you get more veBAL later, resubmit your vote to use\n            your increased power. Votes are timelocked for 10 days. If you vote\n            now, no edits can be made until {{ voteLockedUntilText() }}.\n          </div>\n        </BalCard>\n      </template>\n      <template #right>\n        <BalCard class=\"relative card-container\" shadow=\"xl\" noBorder>\n          <template #header>\n            <div class=\"flex justify-between items-center w-full\">\n              <div class=\"flex items-center\">\n                <BalCircle\n                  v-if=\"txState.confirmed\"\n                  size=\"8\"\n                  color=\"green\"\n                  class=\"mr-2 text-white\"\n                >\n                  <BalIcon name=\"check\" />\n                </BalCircle>\n                <h4>{{ headerLabel }}</h4>\n              </div>\n            </div>\n          </template>\n          <VoteInputList v-if=\"!isSubmissionStep\" />\n          <Transition v-else name=\"appear\" appear>\n            <VotingSubmission />\n          </Transition>\n        </BalCard>\n      </template>\n    </VotingLayout>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport MultiVoting from '@/components/contextual/pages/vebal/MultiVoting/MultiVoting.vue';\nimport { provideVoting } from '@/components/contextual/pages/vebal/providers/voting.provider';\nimport { isFakeModal } from '@/composables/useFakeModal';\n\nprovideVoting();\nisFakeModal.value = true;\nonBeforeUnmount(() => (isFakeModal.value = false));\n</script>\n\n<template>\n  <MultiVoting />\n</template>\n\n"],"names":["props","__props","lpVoteOverLimitWarning","useVotingWarnings","getIsGaugeExpired","useVoting","emit","__emit","inputRules","isPositive","selectedPools","votingRequest","hasExpiredPoolsSelected","hasTimeLockedPools","totalAllocatedWeight","isVotingRequestValid","isRequestingTooMuchWeight","isInputDisabled","goToSubmissionStep","GaugeControllerService","config","configService","walletService","walletServiceInstance","__publicField","GaugeControllerAbi","gaugeAddresses","weights","options","gaugeAddress","weight","gaugeControllerService","txState","resetTxState","useTxState","useVotingTransactionState","useVotingActions","request","expiredGauges","gaugeControllerServiceInstance","addTransaction","useTransactions","votingActions","createVotingActions","createVotingAction","batchNumber","requestBatch","buildBatch","action","submitVotes","buildConfirmButtonLabel","buildStepTooltip","tx","voteForManyGauges","getTransactionSummaryMsg","getTransactionDetails","error","handleSuccess","receipt","confirmedAt","setVotingCompleted","handleFailed","hasOnlyExpiredPools","item","sharesToBps","zeroAddresses","POOLS","zeroWeights","BigNumber","unlockedSelectedPools","confirmedVotingRequest","shouldBatchVotes","isSubmissionStep","headerLabel","computed","onUnmounted","provideVoting","isFakeModal","onBeforeUnmount"],"mappings":"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"}