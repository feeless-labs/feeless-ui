{"version":3,"file":"add-liquidity-22201e45.js","sources":["../../src/composables/pools/useAddLiquidityTabs.ts","../../src/services/balancer/pools/joins/handlers/swap-join.handler.ts","../../src/services/balancer/pools/joins/handlers/generalised-join.handler.ts","../../src/services/balancer/pools/joins/handlers/exact-in-join.handler.ts","../../src/services/balancer/pools/joins/join-pool.service.ts","../../src/lib/utils/queries.ts","../../src/providers/local/join-pool.provider.ts","../../src/components/contextual/pages/pool/add-liquidity/composables/useMyWallet.ts","../../src/components/contextual/pages/pool/add-liquidity/MyWallet.vue","../../src/components/contextual/pages/pool/add-liquidity/Accordion.vue","../../src/components/contextual/pages/pool/add-liquidity/WrapStEthLink.vue","../../src/components/forms/pool_actions/AddLiquidityForm/components/AddLiquidityPreview/components/Summary.vue","../../src/components/forms/pool_actions/AddLiquidityForm/components/AddLiquidityPreview/components/Actions.vue","../../src/components/forms/pool_actions/AddLiquidityForm/components/AddLiquidityPreview/AddLiquidityPreview.vue","../../src/composables/pools/usePropMaxJoin.ts","../../src/components/forms/pool_actions/AddLiquidityForm/composables/useAddLiquidityTotals.ts","../../src/components/forms/pool_actions/AddLiquidityForm/components/AddLiquidityTotals.vue","../../src/components/forms/pool_actions/AddLiquidityForm/AddLiquidityForm.vue","../../src/components/contextual/pages/pool/add-liquidity/AddLiquidityCard.vue","../../src/components/layouts/Col2Layout.vue","../../src/composables/contextual/add-liquidity/useDisabledJoinsGuard.ts","../../src/components/contextual/pages/pool/add-liquidity/Page.vue","../../src/pages/pool/add-liquidity.vue"],"sourcesContent":["import { ref } from 'vue';\nimport i18n from '@/plugins/i18n';\n\nexport enum Tab {\n  PoolTokens,\n  SingleToken,\n}\n\nexport const tabs = [\n  { value: Tab.PoolTokens, label: i18n.global.t('investment.tabs.poolTokens') },\n  {\n    value: Tab.SingleToken,\n    label: i18n.global.t('investment.tabs.singleToken'),\n  },\n];\n\nconst activeTab = ref(tabs[0].value);\n\nfunction resetTabs() {\n  activeTab.value = tabs[0].value;\n}\n\nexport default function useAddLiquidityTabs() {\n  return { activeTab, resetTabs };\n}\n","import { overflowProtected } from '@/components/_global/BalTextInput/helpers';\nimport { getTimestampSecondsFromNow } from '@/composables/useTime';\nimport { POOLS } from '@/constants/pools';\nimport { NATIVE_ASSET_ADDRESS } from '@/constants/tokens';\nimport { fetchPoolsForSor, hasFetchedPoolsForSor } from '@/lib/balancer.sdk';\nimport { bnum, isSameAddress, selectByAddress } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\nimport { BalancerSDK, SwapInfo } from '@feeless/sdk';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { BigNumber, formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport { JsonRpcSigner } from '@ethersproject/providers';\nimport { Ref } from 'vue';\nimport { JoinParams, JoinPoolHandler, QueryOutput } from './join-pool.handler';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\n\n/**\n * Handles joins for single asset flows where we need to use a BatchSwap to join\n * the pool.\n */\nexport class SwapJoinHandler implements JoinPoolHandler {\n  private lastSwapRoute?: SwapInfo;\n\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  async join(params: JoinParams): Promise<TransactionResponse> {\n    const { signer, slippageBsp } = params;\n    const userAddress = await signer.getAddress();\n    await this.queryJoin(params);\n\n    if (!this.lastSwapRoute)\n      throw new Error('Could not fetch swap route for join.');\n\n    const { to, data, value } = this.getSwapAttributes(\n      this.lastSwapRoute,\n      slippageBsp,\n      userAddress\n    );\n\n    const txBuilder = new TransactionBuilder(signer);\n    return txBuilder.raw.sendTransaction({\n      to,\n      data,\n      value,\n    });\n  }\n\n  async queryJoin({\n    amountsIn,\n    tokensIn,\n    signer,\n  }: JoinParams): Promise<QueryOutput> {\n    if (amountsIn.length === 0)\n      throw new Error('Missing amounts to join with.');\n\n    const amountIn = amountsIn[0];\n    const tokenIn = selectByAddress(tokensIn, amountIn.address);\n    if (!tokenIn) throw new Error('Missing critical token metadata.');\n    if (!amountIn.value || bnum(amountIn.value).eq(0))\n      return { bptOut: '0', priceImpact: 0 };\n\n    if (!hasFetchedPoolsForSor.value) await fetchPoolsForSor();\n\n    const safeAmount = overflowProtected(amountIn.value, tokenIn.decimals);\n    const bnumAmount = parseFixed(safeAmount, tokenIn.decimals);\n    const gasPrice = await this.getGasPrice(signer);\n\n    this.lastSwapRoute = await this.sdk.swaps.findRouteGivenIn({\n      tokenIn: this.formatAddressForSor(amountIn.address),\n      tokenOut: this.pool.value.address,\n      amount: bnumAmount,\n      gasPrice,\n      maxPools: 4,\n    });\n\n    const bptOut = formatFixed(\n      this.lastSwapRoute.returnAmount,\n      this.pool.value.onchain?.decimals || 18\n    );\n    if (bnum(bptOut).eq(0)) throw new Error('Not enough liquidity.');\n\n    const priceImpact = this.calcPriceImpact(\n      amountIn.value,\n      bptOut,\n      this.lastSwapRoute.marketSp\n    );\n\n    return { bptOut, priceImpact };\n  }\n\n  /**\n   * PRIVATE\n   */\n  private calcPriceImpact(\n    amountIn: string,\n    amountOut: string,\n    marketSp: string\n  ): number {\n    const effectivePrice = bnum(amountIn).div(amountOut);\n    const priceImpact = effectivePrice.div(marketSp).minus(1) || 1; // If fails to calculate return error value of 100%\n\n    // Don't return negative price impact\n    return Math.max(0, priceImpact.toNumber());\n  }\n\n  private async getGasPrice(signer: JsonRpcSigner): Promise<BigNumber> {\n    const price = (await signer.getGasPrice()).toNumber();\n\n    if (!price) throw new Error('Failed to fetch gas price.');\n\n    return BigNumber.from(price);\n  }\n\n  private getSwapAttributes(\n    swapInfo: SwapInfo,\n    maxSlippage: number,\n    userAddress: string\n  ) {\n    const deadline = getTimestampSecondsFromNow(60).toString(); // 60 seconds from now\n    return this.sdk.swaps.buildSwap({\n      userAddress,\n      swapInfo,\n      kind: 0,\n      deadline,\n      maxSlippage,\n    });\n  }\n\n  private formatAddressForSor(address: string): string {\n    return isSameAddress(address, NATIVE_ASSET_ADDRESS)\n      ? POOLS.ZeroAddress\n      : address;\n  }\n}\n","import { Pool } from '@/services/pool/types';\nimport { BalancerSDK, SimulationType } from '@feeless/sdk';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { Ref } from 'vue';\nimport { JoinParams, JoinPoolHandler, QueryOutput } from './join-pool.handler';\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport { bnum, isSameAddress, selectByAddress } from '@/lib/utils';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { configService } from '@/services/config/config.service';\nimport { AddressZero } from '@ethersproject/constants';\n\ntype JoinResponse = Awaited<\n  ReturnType<BalancerSDK['pools']['generalisedJoin']>\n>;\n\n/**\n * Handles generalized joins for deep pools using SDK functions.\n */\nexport class GeneralisedJoinHandler implements JoinPoolHandler {\n  private lastJoinRes?: JoinResponse;\n\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  async join(params: JoinParams): Promise<TransactionResponse> {\n    await this.queryJoin(params);\n\n    if (!this.lastJoinRes) {\n      throw new Error('Could not query generalised join');\n    }\n\n    const txBuilder = new TransactionBuilder(params.signer);\n    const { to, encodedCall, value } = this.lastJoinRes;\n\n    return txBuilder.raw.sendTransaction({ to, data: encodedCall, value });\n  }\n\n  async queryJoin({\n    amountsIn,\n    tokensIn,\n    signer,\n    slippageBsp,\n    relayerSignature,\n    approvalActions,\n  }: JoinParams): Promise<QueryOutput> {\n    const evmAmountsIn: string[] = amountsIn.map(({ address, value }) => {\n      const token = selectByAddress(tokensIn, address);\n\n      if (!token || !token.decimals)\n        throw new Error(`Token metadata missing for: ${address}`);\n\n      return parseFixed(value || '0', token.decimals).toString();\n    });\n\n    const tokenAddresses: string[] = amountsIn.map(({ address }) =>\n      this.formatTokenAddress(address)\n    );\n    const signerAddress = await signer.getAddress();\n    const slippage = slippageBsp.toString();\n    const poolId = this.pool.value.id;\n    const hasInvalidAmounts = amountsIn.some(item => !item.valid);\n\n    const isNativeAssetJoin = amountsIn.some(item =>\n      isSameAddress(item.address, configService.network.nativeAsset.address)\n    );\n\n    // Static call simulation is more accurate than VaultModel, but requires relayer approval,\n    // token approvals, and account to have enought token balance.\n    const simulationType = this.getSimulationType({\n      isNativeAssetJoin,\n      hasInvalidAmounts,\n      approvalActionsLength: approvalActions.length,\n    });\n\n    console.log({ simulationType });\n\n    this.lastJoinRes = await this.sdk.pools.generalisedJoin(\n      poolId,\n      tokenAddresses,\n      evmAmountsIn,\n      signerAddress,\n      slippage,\n      signer,\n      simulationType,\n      relayerSignature\n    );\n\n    if (!this.lastJoinRes) {\n      throw new Error('Failed to fetch expected output.');\n    }\n\n    const bptOut = formatFixed(\n      this.lastJoinRes.expectedOut,\n      this.pool.value.onchain?.decimals || 18\n    );\n    const priceImpact: number = bnum(\n      formatFixed(this.lastJoinRes.priceImpact, 18)\n    ).toNumber();\n\n    if (bnum(bptOut).eq(0)) throw new Error('Not enough liquidity.');\n    return {\n      bptOut,\n      priceImpact,\n    };\n  }\n\n  private getSimulationType({\n    isNativeAssetJoin,\n    hasInvalidAmounts,\n    approvalActionsLength,\n  }: {\n    isNativeAssetJoin: boolean;\n    hasInvalidAmounts: boolean;\n    approvalActionsLength: number;\n  }): SimulationType {\n    if (isNativeAssetJoin) {\n      return SimulationType.VaultModel;\n    }\n    if (!hasInvalidAmounts && !approvalActionsLength) {\n      return SimulationType.Static;\n    }\n    return SimulationType.VaultModel;\n  }\n\n  /**\n   * If native asset addres, replaces with zero address because the vault only checks\n   * for the zero address when joining with native asset.\n   */\n  private formatTokenAddress(address: string): string {\n    const { nativeAsset } = configService.network.tokens.Addresses;\n\n    if (isSameAddress(address, nativeAsset)) {\n      return AddressZero;\n    }\n\n    return address;\n  }\n}\n","import { Pool } from '@/services/pool/types';\nimport { BalancerSDK, PoolWithMethods } from '@feeless/sdk';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { Ref } from 'vue';\nimport { JoinParams, JoinPoolHandler, QueryOutput } from './join-pool.handler';\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport {\n  bnum,\n  findByAddress,\n  formatAddressForSor,\n  includesAddress,\n  isSameAddress,\n  selectByAddress,\n} from '@/lib/utils';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { tokensListExclBpt } from '@/composables/usePoolHelpers';\nimport { configService } from '@/services/config/config.service';\n\nexport type ExactInJoinResponse = ReturnType<PoolWithMethods['buildJoin']>;\n/**\n * Handles joins with pool tokens using SDK functions.\n */\nexport class ExactInJoinHandler implements JoinPoolHandler {\n  private joinRes?: ExactInJoinResponse;\n\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  async join(params: JoinParams): Promise<TransactionResponse> {\n    await this.queryJoin(params);\n\n    if (!this.joinRes) {\n      throw new Error('Could not query generalised join');\n    }\n\n    const txBuilder = new TransactionBuilder(params.signer);\n    const { to, data, value } = this.joinRes;\n\n    // value property must be passed if joining with native asset\n    return txBuilder.raw.sendTransaction({ to, data, value });\n  }\n\n  async queryJoin({\n    amountsIn,\n    tokensIn,\n    signer,\n    slippageBsp,\n  }: JoinParams): Promise<QueryOutput> {\n    const addressesIn = amountsIn.map(({ address }) => address);\n    const tokensList: string[] = this.formatPoolTokensList(addressesIn);\n    const _amountsIn: string[] = tokensList.map(address => {\n      const token = selectByAddress(tokensIn, address);\n\n      if (!token) return '0';\n\n      const value = findByAddress(amountsIn, address)?.value;\n      return parseFixed(value || '0', token.decimals).toString();\n    });\n\n    const signerAddress = await signer.getAddress();\n    const slippage = slippageBsp.toString();\n    const sdkPool = await this.sdk.pools.find(this.pool.value.id);\n\n    if (!sdkPool) throw new Error('Failed to find pool: ' + this.pool.value.id);\n    const _tokensIn = tokensList.map(address => formatAddressForSor(address));\n\n    this.joinRes = await sdkPool.buildJoin(\n      signerAddress,\n      _tokensIn,\n      _amountsIn,\n      slippage\n    );\n\n    if (!this.joinRes) {\n      throw new Error('Failed to fetch expected output.');\n    }\n\n    const { expectedBPTOut } = this.joinRes;\n    if (bnum(expectedBPTOut).eq(0))\n      throw new Error('Failed to fetch expected output.');\n\n    const bptOut = formatFixed(\n      expectedBPTOut,\n      this.pool.value.onchain?.decimals || 18\n    );\n\n    const evmPriceImpact = await sdkPool.calcPriceImpact(\n      _amountsIn,\n      expectedBPTOut,\n      true\n    );\n\n    const priceImpact = Number(formatFixed(evmPriceImpact, 18));\n\n    return {\n      bptOut,\n      priceImpact,\n    };\n  }\n\n  /**\n   * If amountsInAddresses contains the native asset, replace the wrapped native\n   * asset address in the pool.tokensList with the native asset address.\n   *\n   * @param {string[]} amountsInAddresses - Addresses of tokens being joined with\n   * @returns The pool tokens list or a modified version of it containing the\n   * native asset address instead of the wrapped native asset address.\n   */\n  private formatPoolTokensList(amountsInAddresses: string[]): string[] {\n    const { nativeAsset, wNativeAsset } =\n      configService.network.tokens.Addresses;\n    const includesNativeAsset = includesAddress(\n      amountsInAddresses,\n      nativeAsset\n    );\n    const poolTokensList = tokensListExclBpt(this.pool.value);\n\n    if (includesNativeAsset) {\n      // Switch the wrapped native asset address for the native asset address\n      return poolTokensList.map(address =>\n        isSameAddress(address, wNativeAsset) ? nativeAsset : address\n      );\n    }\n\n    return poolTokensList;\n  }\n}\n","import { getBalancerSDK } from '@/dependencies/balancer-sdk';\nimport { Pool } from '@/services/pool/types';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { Ref } from 'vue';\nimport { SwapJoinHandler } from './handlers/swap-join.handler';\nimport {\n  JoinParams,\n  JoinPoolHandler,\n  QueryOutput,\n} from './handlers/join-pool.handler';\nimport { GeneralisedJoinHandler } from './handlers/generalised-join.handler';\n\nimport { BalancerSDK } from '@feeless/sdk';\nimport { ExactInJoinHandler } from './handlers/exact-in-join.handler';\n\nexport enum JoinHandler {\n  Swap = 'Swap',\n  Generalised = 'Generalised',\n  ExactIn = 'ExactIn',\n}\n\ntype HandlerParams = [Ref<Pool>, BalancerSDK];\n/**\n * JoinPoolService acts as an adapter to underlying handlers based on the pool\n * type or other criteria. It wraps calls to the functions defined in the\n * JoinPoolHandler interface.\n */\nexport class JoinPoolService {\n  // The join pool handler class to call join pool interface functions.\n  public joinHandler: JoinPoolHandler;\n\n  /**\n   * Initialize the JoinPoolService\n   *\n   * @param {Pool} pool - The pool you want to join.\n   * @param {BalancerSDK} sdk - Balancers SDK.\n   */\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk = getBalancerSDK()\n  ) {\n    this.joinHandler = this.setJoinHandler(JoinHandler.Generalised);\n  }\n\n  /**\n   * Sets JoinHandler class on instance.\n   *\n   * @param {boolean} [swapJoin=false] - Flag to ensure SwapJoinHandler is used for joining.\n   * @returns {JoinPoolHandler} The JoinPoolHandler class to be used.\n   */\n  setJoinHandler(type: JoinHandler): JoinPoolHandler {\n    const { pool, sdk } = this;\n    const handlerParams: HandlerParams = [pool, sdk];\n\n    switch (type) {\n      case JoinHandler.Swap:\n        return (this.joinHandler = new SwapJoinHandler(...handlerParams));\n      case JoinHandler.Generalised:\n        return (this.joinHandler = new GeneralisedJoinHandler(\n          ...handlerParams\n        ));\n      case JoinHandler.ExactIn:\n        return (this.joinHandler = new ExactInJoinHandler(...handlerParams));\n      default:\n        throw new Error(`Pool type not handled: ${pool.value.poolType}`);\n    }\n  }\n\n  /**\n   * Executes a join pool transaction.\n   *\n   * @param {AmountIn[]} params.amountsIn - Array of token addresses and amounts\n   * to join with.\n   * @param {TokenInfoMap} params.tokensIn - Meta data for token addresses in amountsIn.\n   * @param {TokenPrices} params.prices - Fiat prices for tokens in amountsIn.\n   * @param {Signer} params.signer - Ethers Signer for executing the transaction.\n   * @param {number} params.slippageBsp - User's slippage setting in basis points.\n   * @returns {TransactionResponse} The ethers transaction response object.\n   */\n  async join(params: JoinParams): Promise<TransactionResponse> {\n    return this.joinHandler.join(params);\n  }\n\n  /**\n   * Performs a query join to fetch the expected output from a join transaction.\n   *\n   * @param {AmountIn[]} amountsIn - Array of token addresses and amounts\n   * to join with.\n   * @param {TokenInfoMap} tokensIn - Meta data for token addresses in amountsIn.\n   * @param {TokenPrices} prices - Fiat prices for tokens in amountsIn.\n   * @param {Signer} params.signer - Ethers Signer for executing the transaction.\n   * @param {number} params.slippageBsp - User's slippage setting in basis points.\n   * @returns {QueryOutput} Query output object.\n   */\n  async queryJoin(params: JoinParams): Promise<QueryOutput> {\n    return this.joinHandler.queryJoin(params);\n  }\n}\n","import { isProductionMode } from '@/plugins/modes';\n\n/**\n * Throws error from vue-queries, where thrown errors are normally \"silenced\" because they just cause a query retry.\n *\n * This helper explicitly console.logs the thrown error, which is useful when testing and debugging\n */\nexport function throwQueryError(errorMessage: string, error: unknown) {\n  if (!isProductionMode()) console.trace(errorMessage, error);\n  throw Error(errorMessage, { cause: error });\n}\n","import useRelayerApproval, {\n  RelayerType,\n} from '@/composables/approvals/useRelayerApproval';\nimport useRelayerApprovalTx from '@/composables/approvals/useRelayerApprovalTx';\nimport useNumbers from '@/composables/useNumbers';\nimport {\n  joinTokens,\n  fiatValueOf,\n  isDeep,\n  isStableLike,\n} from '@/composables/usePoolHelpers';\nimport { useTxState } from '@/composables/useTxState';\nimport {\n  HIGH_PRICE_IMPACT,\n  REKT_PRICE_IMPACT,\n} from '@/constants/poolLiquidity';\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport symbolKeys from '@/constants/symbol.keys';\nimport { bnSum, bnum, isSameAddress } from '@/lib/utils';\nimport { safeInject } from '@/providers/inject';\nimport { useTokens } from '@/providers/tokens.provider';\nimport {\n  JoinHandler,\n  JoinPoolService,\n} from '@/services/balancer/pools/joins/join-pool.service';\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TokenInfoMap } from '@/types/TokenList';\nimport { TransactionActionInfo } from '@/types/transactions';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport debounce from 'debounce-promise';\nimport {\n  computed,\n  InjectionKey,\n  onBeforeMount,\n  onMounted,\n  provide,\n  reactive,\n  readonly,\n  Ref,\n  ref,\n  watch,\n} from 'vue';\nimport { useUserSettings } from '../user-settings.provider';\nimport { UseQueryReturnType, useQuery } from '@tanstack/vue-query';\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\nimport { useApp } from '@/composables/useApp';\nimport { throwQueryError } from '@/lib/utils/queries';\nimport { ApprovalAction } from '@/composables/approvals/types';\nimport { captureBalancerException } from '@/lib/utils/errors';\n\n/**\n * TYPES\n */\nexport type AmountIn = {\n  address: string;\n  value: string;\n  valid: boolean;\n};\n\n/**\n *\n * Handles pool joining state and transaction execution.\n */\nexport const joinPoolProvider = (\n  pool: Ref<Pool>,\n  queryJoinDebounceMillis = 1000\n) => {\n  /**\n   * STATE\n   */\n  const isMounted = ref(false);\n  const amountsIn = ref<AmountIn[]>([]);\n  const bptOut = ref<string>('0');\n  const priceImpact = ref<number>(0);\n  const highPriceImpactAccepted = ref<boolean>(false);\n  const txError = ref<string>('');\n  const approvalActions = ref<TransactionActionInfo[]>([]);\n  const isSingleAssetJoin = ref<boolean>(false);\n\n  const debounceQueryJoin = debounce(queryJoin, queryJoinDebounceMillis);\n\n  const queryEnabled = computed(\n    (): boolean => isMounted.value && !txInProgress.value\n  );\n  const queryJoinQuery = useQuery<\n    Awaited<ReturnType<typeof debounceQueryJoin>>,\n    Error\n  >(\n    QUERY_KEYS.Pools.Joins.QueryJoin(\n      // If amountsIn change we should call queryJoin to get expected output.\n      amountsIn,\n      isSingleAssetJoin\n    ),\n    debounceQueryJoin,\n    reactive({ enabled: queryEnabled, refetchOnWindowFocus: false })\n  );\n\n  /**\n   * SERVICES\n   */\n  const joinPoolService = new JoinPoolService(pool);\n\n  /**\n   * COMPOSABLES\n   */\n  const { getTokens, injectTokens, priceFor, nativeAsset, wrappedNativeAsset } =\n    useTokens();\n  const { toFiat } = useNumbers();\n  const { slippageBsp } = useUserSettings();\n  const { getSigner, appNetworkConfig } = useWeb3();\n  const { transactionDeadline } = useApp();\n  const { txState, txInProgress, resetTxState } = useTxState();\n  const relayerApproval = useRelayerApprovalTx(RelayerType.BATCH);\n  const { getTokenApprovalActions, updateAllowancesFor } =\n    useTokenApprovalActions();\n  const { relayerSignature, relayerApprovalAction } = useRelayerApproval(\n    RelayerType.BATCH\n  );\n\n  /**\n   * COMPUTED\n   */\n  const isDeepPool = computed((): boolean => isDeep(pool.value));\n\n  // List of token addresses that can be used to join the pool.\n  const poolJoinTokens = computed((): string[] => joinTokens(pool.value));\n\n  // Token meta data for amountsIn tokens.\n  const tokensIn = computed((): TokenInfoMap => {\n    return getTokens(amountsIn.value.map(a => a.address));\n  });\n\n  // High price impact if value greater than 1%.\n  const highPriceImpact = computed((): boolean => {\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(HIGH_PRICE_IMPACT);\n  });\n\n  // rekt price impact if value greater than 20%.\n  const rektPriceImpact = computed((): boolean => {\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(REKT_PRICE_IMPACT);\n  });\n\n  // If price impact is high (> 1%), user has checked acceptance checkbox.\n  const hasAcceptedHighPriceImpact = computed((): boolean =>\n    highPriceImpact.value ? highPriceImpactAccepted.value : true\n  );\n\n  // Checks if all amountsIn are valid inputs.\n  const hasValidInputs = computed(\n    (): boolean =>\n      amountsIn.value.every(amountIn => amountIn.valid === true) &&\n      hasAcceptedHighPriceImpact.value\n  );\n\n  // Checks if amountsIn has any values > 0.\n  const hasAmountsIn = computed(() =>\n    amountsIn.value.some(amountIn => bnum(amountIn.value).gt(0))\n  );\n\n  // amountsIn with value greater than 0.\n  const amountsInWithValue = computed((): AmountIn[] =>\n    amountsIn.value.filter(amountIn => bnum(amountIn.value).gt(0))\n  );\n\n  // If we don't have price for an amountIn that has a value greater than 0.\n  const missingPricesIn = computed(\n    (): boolean =>\n      !amountsInWithValue.value.every(amountIn =>\n        bnum(priceFor(amountIn.address)).gt(0)\n      )\n  );\n\n  // Calculates total fiat value in for all amountsIn with Coingecko prices.\n  const fiatValueIn = computed((): string => {\n    const fiatValuesIn = amountsIn.value.map(amountIn =>\n      toFiat(amountIn.value || 0, amountIn.address)\n    );\n    return bnSum(fiatValuesIn).toString();\n  });\n\n  // Calculates estimated fiatValueOut using pool's totalLiquidity.\n  // Could be inaccurate if total liquidity has come from subgraph.\n  const fiatValueOut = computed((): string =>\n    fiatValueOf(pool.value, bptOut.value)\n  );\n\n  const shouldSignRelayer = computed(\n    (): boolean =>\n      isDeepPool.value &&\n      !isSingleAssetJoin.value &&\n      // Check if Batch Relayer is either approved, or signed\n      !(relayerApproval.isUnlocked.value || relayerSignature.value)\n  );\n\n  const amountsToApprove = computed(() => {\n    return amountsIn.value.map(amountIn => ({\n      address: amountIn.address,\n      amount: amountIn.value,\n      spender: appNetworkConfig.addresses.vault,\n    }));\n  });\n\n  const isLoadingQuery = computed(\n    (): boolean => queryJoinQuery.isFetching.value\n  );\n\n  const queryError = computed(\n    (): string | undefined => queryJoinQuery.error.value?.message\n  );\n\n  const joinHandlerType = computed((): JoinHandler => {\n    if (isDeepPool.value) {\n      if (isSingleAssetJoin.value) {\n        return JoinHandler.Swap;\n      }\n      return JoinHandler.Generalised;\n    }\n    return JoinHandler.ExactIn;\n  });\n\n  const supportsProportionalOptimization = computed(\n    (): boolean => !isStableLike(pool.value.poolType)\n  );\n\n  /**\n   * METHODS\n   */\n\n  /**\n   * Sets full amountsIn state.\n   *\n   * @param {AmountIn[]} _amountsIn - Array of amounts in: token address, value\n   * & input validity.\n   */\n  function setAmountsIn(_amountsIn: AmountIn[]) {\n    amountsIn.value = _amountsIn;\n  }\n\n  /**\n   * Sets amountsIn with no value for array of token addresses.\n   *\n   * @param {string[]} tokensIn - Array of token addresses.\n   */\n  function setTokensIn(tokensIn: string[]) {\n    setAmountsIn(\n      tokensIn.map(address => ({ address, value: '', valid: true }))\n    );\n  }\n\n  /**\n   * Resets all amounts in amountsIn state to have no value.\n   */\n  function resetAmounts() {\n    amountsIn.value.forEach((_, i) => {\n      amountsIn.value[i].value = '';\n    });\n  }\n\n  /**\n   * Resets previous joinQuery results\n   */\n  function resetQueryJoinState() {\n    bptOut.value = '0';\n    priceImpact.value = 0;\n    queryJoinQuery.remove();\n  }\n\n  // Updates the approval actions like relayer approval and token approvals.\n  async function setApprovalActions() {\n    const tokenApprovalActions = await getTokenApprovalActions({\n      amountsToApprove: amountsToApprove.value,\n      spender: appNetworkConfig.addresses.vault,\n      actionType: ApprovalAction.AddLiquidity,\n      skipAllowanceCheck: true, // Done once beforeMount\n    });\n\n    approvalActions.value = shouldSignRelayer.value\n      ? [relayerApprovalAction.value, ...tokenApprovalActions]\n      : tokenApprovalActions;\n  }\n\n  // Checks amountsIn for valid inputs and updates price impact state if\n  // invalid.\n  function validateAmountsIn(): boolean {\n    if (!hasAmountsIn.value) {\n      priceImpact.value = 0;\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Simulate join transaction to get expected output and calculate price impact.\n   */\n  async function queryJoin() {\n    // If form is empty or inputs are not valid, clear the price impact and\n    // return early\n    if (!validateAmountsIn()) return null;\n\n    try {\n      joinPoolService.setJoinHandler(joinHandlerType.value);\n      await setApprovalActions();\n\n      console.log('joinHandler:', joinHandlerType.value);\n      if (!validateAmountsIn()) return null;\n      const output = await joinPoolService.queryJoin({\n        amountsIn: amountsInWithValue.value,\n        tokensIn: tokensIn.value,\n        signer: getSigner(),\n        slippageBsp: slippageBsp.value,\n        relayerSignature: relayerSignature.value,\n        approvalActions: approvalActions.value,\n        transactionDeadline: transactionDeadline.value,\n      });\n\n      bptOut.value = output.bptOut;\n      priceImpact.value = output.priceImpact;\n\n      return output;\n    } catch (error) {\n      logJoinException(error as Error, queryJoinQuery);\n      throwQueryError('Failed to construct join.', error);\n    }\n  }\n\n  /**\n   * Executes join transaction.\n   */\n  async function join(): Promise<TransactionResponse> {\n    try {\n      txError.value = '';\n\n      joinPoolService.setJoinHandler(joinHandlerType.value);\n      await setApprovalActions();\n\n      console.log('joinHandler:', joinHandlerType.value);\n      const joinRes = await joinPoolService.join({\n        amountsIn: amountsInWithValue.value,\n        tokensIn: tokensIn.value,\n        signer: getSigner(),\n        slippageBsp: slippageBsp.value,\n        relayerSignature: relayerSignature.value,\n        approvalActions: approvalActions.value,\n        transactionDeadline: transactionDeadline.value,\n      });\n\n      return joinRes;\n    } catch (error) {\n      logJoinException(error as Error);\n      txError.value = (error as Error).message;\n      throw error;\n    }\n  }\n\n  function setIsSingleAssetJoin(value: boolean) {\n    isSingleAssetJoin.value = value;\n  }\n\n  /**\n   * Swap the native token address to wrapped token address\n   * or vice versa\n   */\n  function setJoinWithNativeAsset(joinWithNativeAsset: boolean): void {\n    const newAddress = joinWithNativeAsset\n      ? nativeAsset.address\n      : wrappedNativeAsset.value.address;\n\n    const prevAddress = joinWithNativeAsset\n      ? wrappedNativeAsset.value.address\n      : nativeAsset.address;\n\n    const amountIn = amountsIn.value.find(item =>\n      isSameAddress(prevAddress, item.address)\n    );\n    if (amountIn) {\n      amountIn.address = newAddress;\n    }\n  }\n\n  async function logJoinException(\n    error: Error,\n    query?: UseQueryReturnType<any, any>\n  ) {\n    const sender = await getSigner().getAddress();\n    captureBalancerException({\n      error,\n      action: 'invest',\n      query,\n      context: {\n        level: 'fatal',\n        extra: {\n          joinHandler: joinHandlerType.value,\n          params: JSON.stringify(\n            {\n              amountsIn: amountsInWithValue.value,\n              tokensIn: tokensIn.value,\n              signer: sender,\n              slippageBsp: slippageBsp.value,\n              relayerSignature: relayerSignature.value,\n              approvalActions: approvalActions.value,\n              transactionDeadline: transactionDeadline.value,\n            },\n            null,\n            2\n          ),\n        },\n      },\n    });\n  }\n\n  /**\n   * WATCHERS\n   */\n\n  // If singleAssetJoin is toggled we need to reset previous query state. queryJoin\n  // will be re-triggered by the amountsIn state change. We also need to call\n  // setJoinHandler on the joinPoolService to update the join handler.\n  watch(isSingleAssetJoin, () => {\n    resetQueryJoinState();\n    joinPoolService.setJoinHandler(joinHandlerType.value);\n  });\n\n  // relayerApprovalAction can change if the user changes their useSignatures setting.\n  watch(relayerApprovalAction, async () => await setApprovalActions());\n\n  /**\n   * LIFECYCLE\n   */\n  onBeforeMount(() => {\n    // Ensure prices are fetched for token tree. When pool architecture is\n    // refactored probably won't be required.\n    injectTokens(poolJoinTokens.value);\n\n    // Make sure allowances on the vault are up to date.\n    updateAllowancesFor(appNetworkConfig.addresses.vault);\n  });\n\n  onMounted(() => (isMounted.value = true));\n\n  return {\n    // State\n    amountsIn,\n    highPriceImpactAccepted,\n    txState,\n    pool: readonly(pool),\n    isSingleAssetJoin: readonly(isSingleAssetJoin),\n    bptOut: readonly(bptOut),\n    priceImpact: readonly(priceImpact),\n    txError: readonly(txError),\n\n    //  Computed\n    poolJoinTokens,\n    isLoadingQuery,\n    queryError,\n    highPriceImpact,\n    rektPriceImpact,\n    hasAcceptedHighPriceImpact,\n    hasValidInputs,\n    hasAmountsIn,\n    fiatValueIn,\n    fiatValueOut,\n    txInProgress,\n    approvalActions,\n    missingPricesIn,\n    tokensIn,\n    supportsProportionalOptimization,\n\n    // Methods\n    setAmountsIn,\n    setTokensIn,\n    resetAmounts,\n    join,\n    resetTxState,\n    setIsSingleAssetJoin,\n    setJoinWithNativeAsset,\n\n    // queries\n    queryJoinQuery,\n  };\n};\n\nexport type JoinPoolProviderResponse = ReturnType<typeof joinPoolProvider>;\nexport const JoinPoolProviderSymbol: InjectionKey<JoinPoolProviderResponse> =\n  Symbol(symbolKeys.Providers.JoinPool);\n\nexport function provideJoinPool(pool: Ref<Pool>) {\n  const joinPoolResponse = joinPoolProvider(pool);\n  provide(JoinPoolProviderSymbol, joinPoolResponse);\n  return joinPoolResponse;\n}\n\nexport const useJoinPool = (): JoinPoolProviderResponse => {\n  return safeInject(JoinPoolProviderSymbol);\n};\n","import { isSameAddress } from '@/lib/utils';\nimport { useTokens } from '@/providers/tokens.provider';\n\nimport useAddLiquidityTabs, {\n  Tab,\n  tabs,\n} from '@/composables/pools/useAddLiquidityTabs';\nimport { AmountIn, useJoinPool } from '@/providers/local/join-pool.provider';\nimport { usePool } from '@/providers/local/pool.provider';\n\nexport function useMyWallet() {\n  /**\n   * COMPOSABLES\n   */\n  const { pool, isLoadingPool } = usePool();\n  const { setAmountsIn, setJoinWithNativeAsset, isSingleAssetJoin, amountsIn } =\n    useJoinPool();\n  const { nativeAsset, wrappedNativeAsset, getMaxBalanceFor } = useTokens();\n  const { activeTab } = useAddLiquidityTabs();\n\n  /**\n   * COMPUTED\n   */\n  const excludedTokens = computed<string[]>(() => {\n    return pool.value?.address ? [pool.value.address] : [];\n  });\n\n  /**\n   * METHODS\n   */\n\n  function setMaxAmount(address: string, maxBalance: string) {\n    if (isSingleAssetJoin.value) {\n      // Set the new Token address, and set the input value to max token balance\n      setAmountsIn([\n        {\n          address: address,\n          value: maxBalance,\n          valid: true,\n        },\n      ]);\n    } else {\n      const isNativeAsset = isSameAddress(address, nativeAsset.address);\n      const isWrappedNativeAsset = isSameAddress(\n        address,\n        wrappedNativeAsset.value.address\n      );\n      // If the token is ETH or WETH, we find the other one and switch the token address\n      if (isNativeAsset || isWrappedNativeAsset) {\n        setJoinWithNativeAsset(isNativeAsset);\n      }\n      // Find the token in the amounts array\n      const amountIn: AmountIn | undefined = amountsIn.value.find(item =>\n        isSameAddress(address, item.address)\n      );\n\n      // Update the amount in values\n      if (amountIn) {\n        amountIn.valid = true;\n        amountIn.value = maxBalance;\n      }\n    }\n  }\n\n  function handleMyWalletTokenClick(address: string, isPoolToken: boolean) {\n    const maxBalance = getMaxBalanceFor(address);\n\n    if (isPoolToken) {\n      setMaxAmount(address, maxBalance);\n    } else {\n      // If non pool token is clicked, switch to Single Token tab\n      activeTab.value = tabs[Tab.SingleToken].value;\n      // Wait for the tab to update, the set the max amount\n      nextTick(() => {\n        setMaxAmount(address, maxBalance);\n      });\n    }\n  }\n\n  return {\n    handleMyWalletTokenClick,\n    isLoadingPool,\n    pool,\n    excludedTokens,\n    amountsIn,\n    setAmountsIn,\n    activeTab,\n  };\n}\n","<script setup lang=\"ts\">\nimport MyWallet from '@/components/cards/MyWallet/MyWallet.vue';\nimport { useMyWallet } from './composables/useMyWallet';\n\n/**\n * COMPOSABLES\n */\nconst { handleMyWalletTokenClick, isLoadingPool, pool, excludedTokens } =\n  useMyWallet();\n</script>\n\n<template>\n  <BalLoadingBlock v-if=\"isLoadingPool || !pool\" class=\"h-64\" />\n  <MyWallet\n    v-else\n    :excludedTokens=\"excludedTokens\"\n    :pool=\"pool\"\n    @click:asset=\"handleMyWalletTokenClick\"\n  />\n</template>\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport BalAccordion from '@/components/_global/BalAccordion/BalAccordion.vue';\nimport useNativeBalance from '@/composables/useNativeBalance';\nimport InvestPageMyWallet from './MyWallet.vue';\nimport { useI18n } from 'vue-i18n';\nimport { usePoolHelpers } from '@/composables/usePoolHelpers';\nimport { Pool } from '@/services/pool/types';\n\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPUTED\n */\nconst pool = computed(() => props.pool);\n\n/**\n * COMPOSABLES\n */\nconst { hasNativeBalance, nativeBalance, nativeCurrency } = useNativeBalance();\nconst { t } = useI18n();\nconst { isDeepPool } = usePoolHelpers(pool);\n\n/**\n * COMPUTED\n */\nconst nativeBalanceText = computed<string>(() =>\n  hasNativeBalance ? `${nativeBalance.value} ${nativeCurrency}` : ''\n);\n\nconst sectionTitle = computed<string>(() =>\n  isDeepPool.value\n    ? `${t('myWallet2')} ${nativeBalanceText.value}`\n    : t('poolTransfer.myWalletTokensCard.title')\n);\n</script>\n\n<template>\n  <BalAccordion\n    :sections=\"[\n      {\n        title: sectionTitle,\n        id: 'myWalletTokens',\n      },\n    ]\"\n  >\n    <template #myWalletTokens>\n      <InvestPageMyWallet :pool=\"pool\" />\n    </template>\n  </BalAccordion>\n</template>\n\n","<script setup lang=\"ts\">\nimport { computed, toRef } from 'vue';\n\nimport useConfig from '@/composables/useConfig';\nimport { usePoolHelpers } from '@/composables/usePoolHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport useNetwork from '@/composables/useNetwork';\nimport { Pool } from '@/services/pool/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { isMainnetWstETHPool } = usePoolHelpers(toRef(props, 'pool'));\nconst { networkConfig } = useConfig();\nconst { getToken } = useTokens();\nconst { networkSlug } = useNetwork();\n\n/**\n * COMPUTED\n */\nconst stETH = computed(() =>\n  getToken(networkConfig.tokens.Addresses.stETH || '')\n);\nconst wstETH = computed(() =>\n  getToken(networkConfig.tokens.Addresses.wstETH || '')\n);\n</script>\n\n<template>\n  <div v-if=\"isMainnetWstETHPool\" class=\"flex items-center mb-4\">\n    <router-link\n      :to=\"{\n        name: 'swap',\n        params: {\n          networkSlug,\n          assetIn: stETH.address,\n          assetOut: wstETH.address,\n        },\n      }\"\n      class=\"text-xs underline text-secondary\"\n    >\n      {{ $t('wrapInstruction', [stETH.symbol, wstETH.symbol]) }}\n    </router-link>\n    <BalTooltip>\n      <template #activator>\n        <BalIcon\n          name=\"info\"\n          size=\"xs\"\n          class=\"ml-2 text-gray-400 dark:text-gray-500\"\n        />\n      </template>\n      <div v-html=\"$t('wrapStEthTooltip')\" />\n    </BalTooltip>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useUserSettings } from '@/providers/user-settings.provider';\nimport { Pool } from '@/services/pool/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  fiatTotal: string;\n  priceImpact: number;\n  isLoadingPriceImpact?: boolean;\n  highPriceImpact?: boolean;\n  summaryTitle?: string | undefined;\n};\n\n/**\n * PROPS & EMITS\n */\nwithDefaults(defineProps<Props>(), {\n  isLoadingPriceImpact: false,\n  highPriceImpact: false,\n  summaryTitle: undefined,\n});\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { currency } = useUserSettings();\n</script>\n\n<template>\n  <BalDataList :title=\"$t('summary')\">\n    <BalDataListRow :label=\"$t('investment.preview.summary.total')\">\n      <template #value>\n        {{ fNum(fiatTotal, FNumFormats.fiat) }}\n        <BalTooltip\n          :text=\"$t('tooltips.addLiquidity.total', [currency.toUpperCase()])\"\n          iconSize=\"sm\"\n          class=\"ml-2\"\n        />\n      </template>\n    </BalDataListRow>\n    <BalDataListRow\n      :label=\"$t('priceImpact')\"\n      :class=\"{\n        'bg-red-50 dark:bg-red-500 text-red-500 dark:text-white':\n          highPriceImpact,\n      }\"\n    >\n      <template #value>\n        <BalLoadingBlock v-if=\"isLoadingPriceImpact\" class=\"w-10 h-6\" />\n        <template v-else>\n          {{ fNum(priceImpact, FNumFormats.percent) }}\n          <BalTooltip\n            :text=\"$t('tooltips.addLiquidity.priceImpact')\"\n            iconSize=\"sm\"\n            :iconName=\"highPriceImpact ? 'alert-triangle' : 'info'\"\n            :iconClass=\"\n              highPriceImpact ? 'text-red-500 dark:text-white' : 'text-gray-300'\n            \"\n            width=\"72\"\n            class=\"ml-2\"\n          />\n        </template>\n      </template>\n    </BalDataListRow>\n  </BalDataList>\n</template>\n","<script setup lang=\"ts\">\nimport {\n  TransactionReceipt,\n  TransactionResponse,\n} from '@ethersproject/abstract-provider';\nimport { computed, onUnmounted, ref, toRef } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport BalActionSteps from '@/components/_global/BalActionSteps/BalActionSteps.vue';\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\nimport { usePoolHelpers } from '@/composables/usePoolHelpers';\nimport useTransactions from '@/composables/useTransactions';\nimport useVeBal from '@/composables/useVeBAL';\nimport { Pool } from '@/services/pool/types';\nimport { TransactionActionInfo } from '@/types/transactions';\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useNetwork from '@/composables/useNetwork';\nimport FeedbackCard from '@/components/cards/FeedbackCard.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\nconst emit = defineEmits<{\n  (e: 'success', value: TransactionReceipt): void;\n  (e: 'showStakeModal'): void;\n}>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { fNum } = useNumbers();\nconst { addTransaction } = useTransactions();\nconst { lockablePoolId } = useVeBal();\nconst { isStakablePool } = usePoolStaking();\nconst { isMismatchedNetwork } = useWeb3();\nconst { poolWeightsLabel } = usePoolHelpers(toRef(props, 'pool'));\nconst {\n  rektPriceImpact,\n  fiatValueOut,\n  join,\n  txState,\n  resetTxState,\n  approvalActions: joinPoolApprovalActions,\n} = useJoinPool();\nconst { networkSlug } = useNetwork();\n\nconst approvalActions = ref(joinPoolApprovalActions.value);\n\n/**\n * COMPUTED\n */\nconst actions = computed((): TransactionActionInfo[] => [\n  ...approvalActions.value,\n  {\n    label: t('addLiquidity'),\n    loadingLabel: t('investment.preview.loadingLabel.investment'),\n    confirmingLabel: t('confirming'),\n    action: submit,\n    stepTooltip: t('investmentTooltip'),\n  },\n]);\n\n/**\n * METHODS\n */\nasync function handleSuccess(\n  receipt: TransactionReceipt,\n  confirmedAt: string\n): Promise<void> {\n  txState.receipt = receipt;\n  txState.confirmedAt = confirmedAt;\n  txState.confirmed = true;\n  txState.confirming = false;\n  emit('success', receipt);\n}\n\nfunction handleFailed() {\n  txState.confirming = false;\n}\n\nasync function submit(): Promise<TransactionResponse> {\n  txState.init = true;\n  try {\n    const tx = await join();\n    txState.confirming = true;\n\n    addTransaction({\n      id: tx.hash,\n      type: 'tx',\n      action: 'invest',\n      summary: t('transactionSummary.investInPool', [\n        fNum(fiatValueOut.value, FNumFormats.fiat),\n        poolWeightsLabel(props.pool),\n      ]),\n      details: {\n        total: fNum(fiatValueOut.value, FNumFormats.fiat),\n        pool: props.pool,\n      },\n    });\n\n    return tx;\n  } catch (error) {\n    txState.confirming = false;\n    throw new Error('Failed to submit transaction.', {\n      cause: error,\n    });\n  } finally {\n    txState.init = false;\n  }\n}\n\n/**\n * LIFECYCLE\n */\nonUnmounted(() => {\n  // Reset tx state after Invest Modal is closed. Ready for another Invest transaction\n  resetTxState();\n});\n</script>\n\n<template>\n  <div>\n    <transition>\n      <BalActionSteps\n        v-if=\"!txState.confirmed || !txState.receipt\"\n        :actions=\"actions\"\n        primaryActionType=\"invest\"\n        :disabled=\"rektPriceImpact || isMismatchedNetwork\"\n        @success=\"handleSuccess\"\n        @failed=\"handleFailed\"\n      />\n      <div v-else>\n        <ConfirmationIndicator :txReceipt=\"txState.receipt\" />\n        <BalBtn\n          v-if=\"lockablePoolId === pool.id\"\n          tag=\"router-link\"\n          :to=\"{\n            name: 'get-vebal',\n            query: {\n              returnRoute: $route.name,\n              returnParams: JSON.stringify({\n                id: pool.id,\n                networkSlug,\n              }),\n            },\n          }\"\n          color=\"gradient\"\n          block\n          class=\"flex mt-2\"\n        >\n          <StarsIcon class=\"mr-2 h-5 text-orange-300\" />{{\n            $t('lockToGetVeBAL')\n          }}\n        </BalBtn>\n        <BalBtn\n          v-else-if=\"isStakablePool\"\n          color=\"gradient\"\n          block\n          class=\"flex mt-2\"\n          @click=\"emit('showStakeModal')\"\n        >\n          <StarsIcon class=\"mr-2 h-5 text-orange-300\" />{{\n            $t('stakeToGetExtra')\n          }}\n        </BalBtn>\n\n        <BalBtn\n          tag=\"router-link\"\n          :to=\"{ name: 'pool', params: { id: pool.id } }\"\n          color=\"gray\"\n          outline\n          block\n          size=\"sm\"\n          class=\"mt-2\"\n        >\n          {{ $t('returnToPool') }}\n        </BalBtn>\n      </div>\n    </transition>\n    <transition name=\"pop\">\n      <FeedbackCard\n        v-if=\"txState.confirming || txState.confirmed\"\n        class=\"mt-3\"\n      />\n    </transition>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport useNumbers from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\nimport { TokenInfoMap } from '@/types/TokenList';\n\nimport Summary from './components/Summary.vue';\nimport TokenAmounts from '@/components/forms/pool_actions/shared/TokenAmounts.vue';\nimport Actions from './components/Actions.vue';\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\nimport { useIntervalFn } from '@vueuse/shared';\nimport { oneSecondInMs } from '@/composables/useTime';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\ntype AmountMap = {\n  [address: string]: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\nconst emit = defineEmits<{\n  (e: 'close'): void;\n  (e: 'showStakeModal'): void;\n}>();\n\n/**\n * STATE\n */\nconst confirmed = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { getToken } = useTokens();\nconst { toFiat } = useNumbers();\nconst {\n  isSingleAssetJoin,\n  amountsIn,\n  bptOut,\n  fiatValueIn,\n  fiatValueOut,\n  priceImpact,\n  highPriceImpact,\n  rektPriceImpact,\n  isLoadingQuery,\n  txInProgress,\n  queryJoinQuery,\n  missingPricesIn,\n  resetAmounts,\n} = useJoinPool();\n\n/**\n * COMPUTED\n */\nconst title = computed((): string =>\n  confirmed.value\n    ? t('investment.preview.titles.confirmed')\n    : t('investment.preview.titles.default')\n);\n\nconst showTokensOut = computed<boolean>(\n  () => !!Object.keys(tokenOutMap.value).length\n);\n\nconst amountInMap = computed((): AmountMap => {\n  const amountMap = {};\n  amountsIn.value.forEach(amountIn => {\n    amountMap[amountIn.address] = amountIn.value;\n  });\n  return amountMap;\n});\n\nconst amountOutMap = computed((): AmountMap => {\n  const amountMap = {\n    [props.pool.address]: bptOut.value,\n  };\n  return amountMap;\n});\n\nconst tokenInMap = computed((): TokenInfoMap => {\n  const tokenMap = {};\n  Object.keys(amountInMap.value).forEach(address => {\n    tokenMap[address] = getToken(address);\n  });\n  return tokenMap;\n});\n\nconst tokenOutMap = computed((): TokenInfoMap => {\n  const tokenMap = {\n    [props.pool.address]: getToken(props.pool.address),\n  };\n  return tokenMap;\n});\n\nconst fiatAmountInMap = computed((): AmountMap => {\n  const fiatAmountMap = {};\n  Object.keys(amountInMap.value).forEach(address => {\n    fiatAmountMap[address] = toFiat(amountInMap.value[address], address);\n  });\n  return fiatAmountMap;\n});\n\nconst fiatAmountOutMap = computed((): AmountMap => {\n  if (!fiatValueOut.value) return {};\n  const fiatAmountMap = {\n    [props.pool.address]: fiatValueOut.value,\n  };\n  return fiatAmountMap;\n});\n\nconst fiatTotalOut = computed((): string =>\n  Object.values(fiatAmountOutMap.value).reduce(\n    (total, amount) => bnum(total).plus(amount).toString(),\n    '0'\n  )\n);\n\n/**\n * METHODS\n */\nfunction handleClose(): void {\n  if (confirmed.value) {\n    resetAmounts();\n    confirmed.value = false;\n  }\n  emit('close');\n}\n\nfunction handleShowStakeModal() {\n  handleClose();\n  emit('showStakeModal');\n}\n\n/**\n * WATCHERS\n */\n// Every 10s we should re-trigger queryJoin in case the expected output\n// has changed as a result of pool state changing. This should only happen in\n// the preview modal, not at the JoinPoolProvider level.\n//\n// Originally we did it every block but this is overfetching on short blocktime\n// networks like Polygon.\nuseIntervalFn(() => {\n  if (!isLoadingQuery.value && !txInProgress.value) {\n    queryJoinQuery.refetch();\n  }\n}, oneSecondInMs * 10);\n</script>\n\n<template>\n  <BalModal show :fireworks=\"confirmed\" @close=\"handleClose\">\n    <template #header>\n      <div class=\"flex items-center\">\n        <BalCircle\n          v-if=\"confirmed\"\n          size=\"8\"\n          color=\"green\"\n          class=\"mr-2 text-white\"\n        >\n          <BalIcon name=\"check\" />\n        </BalCircle>\n        <h4>\n          {{ title }}\n        </h4>\n      </div>\n    </template>\n\n    <TokenAmounts\n      :title=\"$t('investment.preview.titles.tokenIn')\"\n      :amountMap=\"amountInMap\"\n      :tokenMap=\"tokenInMap\"\n      :fiatAmountMap=\"fiatAmountInMap\"\n      :fiatTotal=\"fiatValueIn\"\n      :hideAmountShare=\"isSingleAssetJoin\"\n    />\n    <TokenAmounts\n      v-if=\"showTokensOut\"\n      showZeroAmounts\n      :title=\"$t('investment.preview.titles.tokenOut')\"\n      class=\"mt-4\"\n      :amountMap=\"amountOutMap\"\n      :tokenMap=\"tokenOutMap\"\n      :fiatAmountMap=\"fiatAmountOutMap\"\n      :fiatTotal=\"fiatTotalOut\"\n      hideAmountShare\n    />\n\n    <BalAlert\n      v-if=\"missingPricesIn\"\n      type=\"warning\"\n      :title=\"$t('noPriceInfo')\"\n      class=\"mt-4\"\n      block\n    />\n\n    <Summary\n      :pool=\"pool\"\n      :fiatTotal=\"missingPricesIn ? '-' : fiatValueIn\"\n      :priceImpact=\"priceImpact\"\n      :highPriceImpact=\"highPriceImpact\"\n      class=\"mt-4\"\n    />\n\n    <BalAlert\n      v-if=\"rektPriceImpact\"\n      type=\"error\"\n      :title=\"$t('investment.error.rektPriceImpact.title')\"\n      :description=\"$t('investment.error.rektPriceImpact.description')\"\n      class=\"mt-6 mb-2\"\n    />\n\n    <Actions\n      :pool=\"pool\"\n      class=\"mt-4\"\n      @success=\"confirmed = true\"\n      @show-stake-modal=\"handleShowStakeModal\"\n    />\n  </BalModal>\n</template>\n","import { getAddress } from '@ethersproject/address';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatUnits, parseUnits } from '@ethersproject/units';\nimport { computed, ref, Ref } from 'vue';\nimport { bnum, isSameAddress, selectByAddress } from '@/lib/utils';\nimport { configService } from '@/services/config/config.service';\nimport { OnchainTokenDataMap, Pool } from '@/services/pool/types';\nimport { TokenInfoMap } from '@/types/TokenList';\nimport { AmountIn } from '@/providers/local/join-pool.provider';\nimport { useTokens } from '@/providers/tokens.provider';\n\nexport default function usePropMaxJoin(\n  pool: Pool,\n  tokensIn: Ref<TokenInfoMap>,\n  useNativeAsset: Ref<boolean> = ref(false)\n) {\n  const config = configService;\n\n  /**\n   * COMPOSABLES\n   */\n  const { balanceFor } = useTokens();\n\n  /**\n   * COMPUTED\n   */\n  const tokenAddresses = computed((): string[] => {\n    const tokensList = Object.keys(tokensIn.value);\n    if (useNativeAsset.value) {\n      return tokensList.map(address => {\n        if (\n          isSameAddress(address, config.network.tokens.Addresses.wNativeAsset)\n        )\n          return config.network.nativeAsset.address;\n        return address;\n      });\n    }\n    return tokensList;\n  });\n\n  const poolTokens = computed((): OnchainTokenDataMap => {\n    if (!pool.onchain?.tokens) return {};\n    return pool.onchain.tokens;\n  });\n\n  const poolTokenBalances = computed((): Record<string, BigNumber> => {\n    if (!pool.onchain?.tokens) return {};\n\n    const wNativeAsset = selectByAddress(\n      poolTokens.value,\n      config.network.tokens.Addresses.wNativeAsset\n    );\n\n    // Set pool native asset balance to be the same as its WETH balance\n    const balancesMap = {\n      [config.network.nativeAsset.address]: parseUnits(\n        wNativeAsset?.balance || '0',\n        wNativeAsset?.decimals || 18\n      ),\n    };\n\n    Object.keys(poolTokens.value).forEach(item => {\n      const address = getAddress(item);\n      const poolToken = selectByAddress(poolTokens.value, address);\n      if (poolToken) {\n        balancesMap[address] = parseUnits(\n          poolToken.balance,\n          poolToken.decimals || 18\n        );\n      }\n    });\n\n    return balancesMap;\n  });\n\n  /**\n   * METHODS\n   */\n\n  /**\n   * Calculates the proportional amount for a pool token given a fixed amount of\n   * another pool token.\n   *\n   * @param {string} address - The address of the token to calculate the\n   * proportional amount for.\n   * @param {AmountIn} fixedAmountIn - The fixed amount in.\n   * @returns {string} - The proportional amount.\n   */\n  function calcProportionalValue(\n    address: string,\n    fixedAmountIn: AmountIn\n  ): string {\n    if (isSameAddress(address, fixedAmountIn.address))\n      return fixedAmountIn.value;\n\n    // Token to calculate proportional amount for\n    const token = selectByAddress(tokensIn.value, address);\n    const poolTokenBalance =\n      selectByAddress(poolTokenBalances.value, address) || parseUnits('0');\n\n    // Token with fixed amount\n    const fixedTokenData = selectByAddress(\n      tokensIn.value,\n      fixedAmountIn.address\n    );\n    const evmFixedAmount = parseUnits(\n      fixedAmountIn.value,\n      fixedTokenData?.decimals\n    );\n    const fixedTokenPoolBalance =\n      selectByAddress(poolTokenBalances.value, fixedAmountIn.address) ||\n      parseUnits('0');\n\n    const amount = evmFixedAmount\n      .mul(poolTokenBalance)\n      .div(fixedTokenPoolBalance);\n    return formatUnits(amount, token?.decimals);\n  }\n\n  /**\n   * Calculates proportional amounts in given a fixed amount of one of the input\n   * tokens and the balances of the pool tokens in the pool.\n   *\n   * @param {string} fixedAmount - The fixed amount in.\n   * @param {number} index - The pool token index for the fixedAmount.\n   */\n  function propAmountsGiven(amountIn: AmountIn): AmountIn[] {\n    if (amountIn.value.trim() === '') return [];\n\n    return tokenAddresses.value.map(address => {\n      return {\n        address,\n        valid: true,\n        value: calcProportionalValue(address, amountIn),\n      };\n    });\n  }\n\n  /**\n   * Calculates the proportional maximum amounts in given the user's token balances.\n   * i.e. it finds the limiting token balance and uses it to calculate the\n   * proportional amounts for the other tokens.\n   *\n   * @returns {AmountIn[]} - The proportional maximum amounts.\n   */\n  function getPropMax(): AmountIn[] {\n    let maxAmounts: AmountIn[] = tokenAddresses.value.map(address => {\n      return {\n        address,\n        valid: true,\n        value: '0',\n      };\n    });\n\n    tokenAddresses.value.forEach(address => {\n      let hasBalance = true;\n      let balance: string;\n\n      // Fetch balance for current token, subtracting a buffer for gas if it's the\n      // native token.\n      if (isSameAddress(address, config.network.nativeAsset.address)) {\n        const _balance = balanceFor(address);\n        balance = _balance\n          ? bnum(_balance)\n              .minus(config.network.nativeAsset.minTransactionBuffer)\n              .toString()\n          : '0';\n      } else {\n        balance = balanceFor(address);\n      }\n\n      // Calculate proportional amounts of the other tokens given the current\n      // token as the fixed amount.\n      const proportionalAmountsIn: AmountIn[] = propAmountsGiven({\n        address,\n        value: balance,\n        valid: true,\n      });\n\n      // Check if for the calculated proportional amounts, the user has a\n      // sufficient balance. If not, set hasBalance to false.\n      proportionalAmountsIn.forEach(proportionalAmountIn => {\n        const greaterThanBalance = bnum(proportionalAmountIn.value).gt(\n          balanceFor(proportionalAmountIn.address)\n        );\n        if (greaterThanBalance) hasBalance = false;\n      });\n\n      // If the user has a sufficient balance inject the amount into the\n      // maxAmounts array.\n      if (hasBalance) {\n        const currentMaxAmount =\n          maxAmounts.find(amountIn => isSameAddress(amountIn.address, address))\n            ?.value || '0';\n        const thisAmount =\n          proportionalAmountsIn.find(amountIn =>\n            isSameAddress(amountIn.address, address)\n          )?.value || '0';\n\n        if (bnum(thisAmount).gt(currentMaxAmount)) {\n          maxAmounts = proportionalAmountsIn;\n        }\n      }\n    });\n\n    return maxAmounts;\n  }\n\n  return { getPropMax };\n}\n","import { useJoinPool } from '@/providers/local/join-pool.provider';\n\nimport usePropMaxJoin from '@/composables/pools/usePropMaxJoin';\nimport { isWrappedNativeAsset } from '@/composables/usePoolHelpers';\nimport { bnum, isSameAddress } from '@/lib/utils';\nimport { useUserTokens } from '@/providers/local/user-tokens.provider';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { Pool } from '@/services/pool/types';\n\nexport function useAddLiquidityTotals(pool: Pool) {\n  /**\n   * COMPOSABLES\n   */\n  const {\n    poolJoinTokens,\n    highPriceImpact,\n    supportsProportionalOptimization,\n    amountsIn,\n    tokensIn,\n    setAmountsIn,\n  } = useJoinPool();\n\n  const { isWethOrEth, nativeAsset, balanceFor } = useTokens();\n  const { tokensWithBalanceFrom, tokensWithoutBalanceFrom } = useUserTokens();\n\n  const useNativeAsset = computed((): boolean => {\n    return amountsIn.value.some(amountIn =>\n      isSameAddress(amountIn.address, nativeAsset.address)\n    );\n  });\n\n  const { getPropMax } = usePropMaxJoin(pool, tokensIn, useNativeAsset);\n\n  /**\n   * COMPUTED\n   */\n  const priceImpactClasses = computed(() => ({\n    'dark:bg-gray-800': !highPriceImpact.value,\n    'bg-red-500 dark:bg-red-500 text-white divide-red-400':\n      highPriceImpact.value,\n  }));\n\n  const optimizeBtnClasses = computed(() => ({\n    'text-gradient': !highPriceImpact.value,\n    'text-red-500 px-2 py-1 bg-white rounded-lg': highPriceImpact.value,\n  }));\n\n  const hasBalanceForAllTokens = computed((): boolean => {\n    const hasBalanceForAll =\n      tokensWithoutBalanceFrom(poolJoinTokens.value).filter(\n        address => !isWethOrEth(address)\n      ).length === 0;\n\n    // If the pool contains the wrapped native asset, user might have balance for just one of them\n    if (isWrappedNativeAsset(pool)) {\n      const hasWethOrEthBalance = tokensWithBalanceFrom(\n        poolJoinTokens.value\n      ).some(address => isWethOrEth(address));\n      return hasBalanceForAll && hasWethOrEthBalance;\n    }\n    return hasBalanceForAll;\n  });\n\n  const hasBalanceForSomeTokens = computed((): boolean => {\n    const hasBalanceForSome =\n      tokensWithBalanceFrom(poolJoinTokens.value).filter(\n        address => !isWethOrEth(address)\n      ).length > 0;\n\n    // If the pool contains the wrapped native asset, user might have balance for just one of them\n    if (isWrappedNativeAsset(pool)) {\n      const hasWethOrEthBalance = tokensWithBalanceFrom(\n        poolJoinTokens.value\n      ).some(address => isWethOrEth(address));\n      return hasBalanceForSome || hasWethOrEthBalance;\n    }\n    return hasBalanceForSome;\n  });\n\n  const maximized = computed(() =>\n    amountsIn.value.every(amount => {\n      if (isSameAddress(amount.address, nativeAsset.address)) {\n        const balance = balanceFor(amount.address);\n        return (\n          amount.value ===\n          bnum(balance).minus(nativeAsset.minTransactionBuffer).toString()\n        );\n      } else {\n        return amount.value === balanceFor(amount.address);\n      }\n    })\n  );\n\n  const optimized = computed((): boolean => {\n    if (!supportsProportionalOptimization.value) return false;\n    const propMaxAmountsIn = getPropMax();\n    return amountsIn.value.every(\n      (item, i) => Number(item.value) === Number(propMaxAmountsIn[i].value)\n    );\n  });\n\n  /**\n   * METHODS\n   */\n  function maximizeAmounts(): void {\n    amountsIn.value.forEach(amount => {\n      if (isSameAddress(amount.address, nativeAsset.address)) {\n        const balance = balanceFor(amount.address);\n        amount.value = bnum(balance).gt(nativeAsset.minTransactionBuffer)\n          ? bnum(balance).minus(nativeAsset.minTransactionBuffer).toString()\n          : '0';\n      } else {\n        amount.value = balanceFor(amount.address);\n      }\n    });\n  }\n\n  function optimizeAmounts() {\n    const propMaxAmountsIn = getPropMax();\n    setAmountsIn(propMaxAmountsIn);\n  }\n\n  return {\n    priceImpactClasses,\n    optimizeBtnClasses,\n    hasBalanceForAllTokens,\n    hasBalanceForSomeTokens,\n    optimized,\n    maximized,\n    maximizeAmounts,\n    optimizeAmounts,\n  };\n}\n","<script setup lang=\"ts\">\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\n\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { useAddLiquidityTotals } from '../composables/useAddLiquidityTotals';\nimport { useUserSettings } from '@/providers/user-settings.provider';\n\ntype Props = {\n  pool: Pool;\n};\n\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { isWalletReady } = useWeb3();\nconst { slippage } = useUserSettings();\n\nconst {\n  highPriceImpact,\n  isLoadingQuery,\n  priceImpact,\n  supportsProportionalOptimization,\n  fiatValueIn,\n  bptOut,\n} = useJoinPool();\n\nconst {\n  priceImpactClasses,\n  optimizeBtnClasses,\n  hasBalanceForAllTokens,\n  hasBalanceForSomeTokens,\n  optimized,\n  maximized,\n  maximizeAmounts,\n  optimizeAmounts,\n} = useAddLiquidityTotals(props.pool);\n</script>\n\n<template>\n  <div class=\"data-table\">\n    <div class=\"data-table-row total-row\">\n      <div class=\"p-2\">\n        {{ $t('total') }}\n      </div>\n      <div class=\"data-table-number-col\">\n        {{ fNum(fiatValueIn, FNumFormats.fiat) }}\n        <div v-if=\"isWalletReady && hasBalanceForSomeTokens\" class=\"text-sm\">\n          <span v-if=\"maximized\" class=\"text-gray-400 dark:text-gray-600\">\n            {{ $t('maxed') }}\n          </span>\n          <span\n            v-else\n            class=\"text-blue-500 cursor-pointer\"\n            @click=\"maximizeAmounts\"\n          >\n            {{ $t('max') }}\n          </span>\n        </div>\n      </div>\n    </div>\n    <div :class=\"['data-table-row secondary-row']\">\n      <div class=\"p-2\">LP tokens</div>\n      <div class=\"data-table-number-col\">\n        <div class=\"flex\">\n          <span v-if=\"!isLoadingQuery\">\n            {{ fNum(bptOut, FNumFormats.token) }}\n          </span>\n          <BalLoadingBlock v-else class=\"w-10\" />\n\n          <BalTooltip\n            :text=\"`LP tokens you are expected to recieve, not\n          including possible slippage (${fNum(slippage, FNumFormats.percent)})`\"\n          >\n            <template #activator>\n              <BalIcon\n                name=\"info\"\n                size=\"xs\"\n                class=\"-mb-px ml-1 text-gray-400\"\n              />\n            </template>\n          </BalTooltip>\n        </div>\n      </div>\n    </div>\n    <div :class=\"['data-table-row secondary-row', priceImpactClasses]\">\n      <div class=\"p-2\">\n        {{ $t('priceImpact') }}\n      </div>\n      <div class=\"data-table-number-col\">\n        <div class=\"flex\">\n          <span v-if=\"!isLoadingQuery\">\n            {{ fNum(priceImpact, FNumFormats.percent) }}\n          </span>\n          <BalLoadingBlock v-else class=\"w-10\" />\n\n          <BalTooltip :text=\"$t('customAmountsTip')\">\n            <template #activator>\n              <BalIcon\n                v-if=\"highPriceImpact\"\n                name=\"alert-triangle\"\n                size=\"xs\"\n                class=\"-mb-px ml-1\"\n              />\n              <BalIcon\n                v-else\n                name=\"info\"\n                size=\"xs\"\n                class=\"-mb-px ml-1 text-gray-400\"\n              />\n            </template>\n          </BalTooltip>\n        </div>\n        <div\n          v-if=\"\n            isWalletReady &&\n            hasBalanceForAllTokens &&\n            supportsProportionalOptimization\n          \"\n          class=\"text-sm font-semibold\"\n        >\n          <span v-if=\"optimized\" class=\"text-gray-400 dark:text-gray-600\">\n            {{ $t('optimized') }}\n          </span>\n          <span\n            v-else\n            :class=\"['cursor-pointer', optimizeBtnClasses]\"\n            @click=\"optimizeAmounts\"\n          >\n            {{ $t('optimize') }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.data-table {\n  @apply border dark:border-gray-900 rounded-lg divide-y dark:divide-gray-900;\n}\n\n.data-table-row {\n  @apply grid grid-cols-4 items-center;\n  @apply divide-x dark:divide-gray-900;\n}\n\n.data-table-row:first-child {\n  @apply rounded-t-lg;\n}\n\n.data-table-number-col {\n  @apply col-span-3 p-2 flex items-center justify-between;\n}\n\n.total-row {\n  @apply text-lg font-bold dark:bg-gray-800;\n}\n\n.secondary-row {\n  @apply text-sm rounded-b-lg;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, onBeforeMount, ref, toRef, watch } from 'vue';\n\nimport WrapStEthLink from '@/components/contextual/pages/pool/add-liquidity/WrapStEthLink.vue';\nimport StakePreviewModal from '@/components/contextual/pages/pool/staking/StakePreviewModal.vue';\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\nimport { tokenWeight, usePoolHelpers } from '@/composables/usePoolHelpers';\nimport { LOW_LIQUIDITY_THRESHOLD } from '@/constants/poolLiquidity';\nimport { bnum, includesAddress } from '@/lib/utils';\nimport { isRequired } from '@/lib/utils/validations';\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useVeBal from '@/composables/useVeBAL';\n\nimport AddLiquidityPreview from './components/AddLiquidityPreview/AddLiquidityPreview.vue';\nimport AddLiquidityTotals from './components/AddLiquidityTotals.vue';\n\nimport { useTokens } from '@/providers/tokens.provider';\nimport { isEqual } from 'lodash';\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * STATE\n */\nconst showPreview = ref(false);\nconst showStakeModal = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { managedPoolWithSwappingHalted, poolJoinTokens } = usePoolHelpers(\n  toRef(props, 'pool')\n);\nconst { veBalTokenInfo } = useVeBal();\nconst { isWalletReady, startConnectWithInjectedProvider, isMismatchedNetwork } =\n  useWeb3();\nconst { wrappedNativeAsset, nativeAsset, getToken } = useTokens();\nconst {\n  isLoadingQuery,\n  isSingleAssetJoin,\n  amountsIn,\n  highPriceImpact,\n  highPriceImpactAccepted,\n  hasValidInputs,\n  hasAmountsIn,\n  queryError,\n  setTokensIn,\n} = useJoinPool();\n\n/**\n * COMPUTED\n */\nconst forceProportionalInputs = computed(\n  (): boolean => managedPoolWithSwappingHalted.value\n);\n\nconst poolHasLowLiquidity = computed((): boolean =>\n  bnum(props.pool.totalLiquidity).lt(LOW_LIQUIDITY_THRESHOLD)\n);\n\nconst excludedTokens = computed((): string[] => {\n  const tokens = [props.pool.address];\n  if (veBalTokenInfo.value) {\n    tokens.unshift(veBalTokenInfo.value.address);\n  }\n  return tokens;\n});\n\nasync function initializeTokensForm(isSingleAssetJoin: boolean) {\n  if (isSingleAssetJoin) {\n    // Single asset joins are only relevant for Composable pools where swap\n    // joins are possible. In this case we want to default to the wrapped native\n    // asset.\n    setTokensIn([wrappedNativeAsset.value.address]);\n  } else {\n    setTokensIn(poolJoinTokens.value);\n  }\n}\n\nfunction getTokenInputLabel(address: string): string | undefined {\n  const token = getToken(address);\n  return token?.symbol;\n}\n\n/**\n * If the address is the wrapped native asset, we want to give the option to use\n * the native asset instead.\n */\nfunction tokenOptions(address: string): string[] {\n  if (isSingleAssetJoin.value) return [];\n\n  return includesAddress(\n    [wrappedNativeAsset.value.address, nativeAsset.address],\n    address\n  )\n    ? [wrappedNativeAsset.value.address, nativeAsset.address]\n    : [];\n}\n\n/**\n * When changing tokens, clear the amount value\n */\nfunction onTokenChange() {\n  if (isSingleAssetJoin.value && amountsIn.value.length > 0) {\n    amountsIn.value[0].value = '';\n  }\n}\n\n/**\n * CALLBACKS\n */\nonBeforeMount(() => {\n  initializeTokensForm(isSingleAssetJoin.value);\n});\n\n/**\n * WATCHERS\n */\nwatch(\n  [isSingleAssetJoin, poolJoinTokens],\n  ([isSingleAsset, newJoinTokens], [prevIsSingleAsset, prevJoinToken]) => {\n    // Initialize token form if token balances change (ie. After investing, transaction confirmed or when account changes)\n    // only if preview modal is not open\n    if (!showPreview.value) {\n      const hasTabChanged = prevIsSingleAsset !== isSingleAsset;\n      const hasUserTokensChanged = !isEqual(prevJoinToken, newJoinTokens);\n      if (hasUserTokensChanged || hasTabChanged) {\n        initializeTokensForm(isSingleAsset);\n      }\n    }\n  }\n);\n</script>\n\n<template>\n  <div data-testid=\"add-liquidity-form\">\n    <BalAlert\n      v-if=\"forceProportionalInputs\"\n      type=\"warning\"\n      :title=\"$t('investment.warning.managedPoolSwappingHalted.title')\"\n      :description=\"\n        $t('investment.warning.managedPoolSwappingHalted.description')\n      \"\n      class=\"mb-5\"\n    />\n\n    <BalAlert\n      v-if=\"poolHasLowLiquidity\"\n      type=\"warning\"\n      :title=\"$t('investment.warning.lowLiquidity.title')\"\n      :description=\"$t('investment.warning.lowLiquidity.description')\"\n      class=\"mb-5\"\n    />\n\n    <TokenInput\n      v-for=\"amountIn in amountsIn\"\n      :key=\"amountIn.address\"\n      v-model:isValid=\"amountIn.valid\"\n      v-model:address=\"amountIn.address\"\n      v-model:amount=\"amountIn.value\"\n      :name=\"amountIn.address\"\n      :weight=\"tokenWeight(pool, amountIn.address)\"\n      :options=\"tokenOptions(amountIn.address)\"\n      :aria-label=\"'Amount of: ' + getTokenInputLabel(amountIn.address)\"\n      class=\"mb-4\"\n      :fixedToken=\"!isSingleAssetJoin\"\n      :excludedTokens=\"excludedTokens\"\n      @update:address=\"onTokenChange\"\n    />\n\n    <AddLiquidityTotals :pool=\"pool\" />\n\n    <div\n      v-if=\"highPriceImpact\"\n      class=\"p-2 pb-2 mt-5 rounded-lg border dark:border-gray-700 high-price-impact\"\n    >\n      <BalCheckbox\n        v-model=\"highPriceImpactAccepted\"\n        :rules=\"[isRequired($t('priceImpactCheckbox'))]\"\n        name=\"highPriceImpactAccepted\"\n        size=\"sm\"\n        :label=\"$t('priceImpactAccept', [$t('depositing')])\"\n      />\n    </div>\n\n    <WrapStEthLink :pool=\"pool\" class=\"mt-5\" />\n\n    <BalAlert\n      v-if=\"queryError\"\n      type=\"error\"\n      :title=\"$t('thereWasAnError')\"\n      :description=\"queryError\"\n      class=\"mt-4\"\n      block\n    />\n\n    <div class=\"mt-4\">\n      <BalBtn\n        v-if=\"!isWalletReady\"\n        :label=\"$t('connectWallet')\"\n        color=\"gradient\"\n        block\n        @click=\"startConnectWithInjectedProvider\"\n      />\n      <BalBtn\n        v-else\n        :label=\"$t('preview')\"\n        color=\"gradient\"\n        :disabled=\"\n          !hasAmountsIn ||\n          !hasValidInputs ||\n          isMismatchedNetwork ||\n          isLoadingQuery ||\n          !!queryError\n        \"\n        block\n        @click=\"showPreview = true\"\n      />\n    </div>\n\n    <teleport to=\"#modal\">\n      <AddLiquidityPreview\n        v-if=\"showPreview\"\n        :pool=\"pool\"\n        @close=\"showPreview = false\"\n        @show-stake-modal=\"showStakeModal = true\"\n      />\n      <StakePreviewModal\n        :pool=\"pool\"\n        :isVisible=\"showStakeModal\"\n        action=\"stake\"\n        @close=\"showStakeModal = false\"\n      />\n    </teleport>\n  </div>\n</template>\n\n<style scoped>\n.high-price-impact:has(.bal-checkbox-error) {\n  @apply border-red-500 bg-red-50 dark:bg-red-500 bg-opacity-50 dark:bg-opacity-5 transition-colors;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { onMounted, watch } from 'vue';\nimport SwapSettingsPopover, {\n  SwapSettingsContext,\n} from '@/components/popovers/SwapSettingsPopover.vue';\nimport { configService } from '@/services/config/config.service';\nimport AddLiquidityForm from '@/components/forms/pool_actions/AddLiquidityForm/AddLiquidityForm.vue';\nimport useAddLiquidityTabs, {\n  Tab,\n  tabs,\n} from '@/composables/pools/useAddLiquidityTabs';\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\nimport { usePoolHelpers } from '@/composables/usePoolHelpers';\nimport { Pool } from '@/services/pool/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\nconst pool = toRef(props, 'pool');\n\n/**\n * COMPOSABLES\n */\nconst { network } = configService;\nconst { activeTab, resetTabs } = useAddLiquidityTabs();\nconst { setIsSingleAssetJoin } = useJoinPool();\nconst { isDeepPool, isPreMintedBptPool } = usePoolHelpers(pool);\n\n/**\n * LIFECYCLE\n */\nonMounted(() => resetTabs());\n\n/**\n * WATCHERS\n */\nwatch(activeTab, value => {\n  setIsSingleAssetJoin(value === Tab.SingleToken);\n});\n</script>\n\n<template>\n  <BalCard shadow=\"xl\" exposeOverflow noBorder>\n    <template #header>\n      <div class=\"w-full\">\n        <div class=\"text-xs leading-none text-secondary\">\n          {{ network.chainName }}\n        </div>\n        <div class=\"flex justify-between items-center\">\n          <h4>{{ $t('addLiquidity') }}</h4>\n          <SwapSettingsPopover :context=\"SwapSettingsContext.invest\" />\n        </div>\n        <BalTabs\n          v-if=\"isDeepPool && isPreMintedBptPool\"\n          v-model=\"activeTab\"\n          :tabs=\"tabs\"\n          class=\"p-0 m-0 -mb-px whitespace-nowrap\"\n          noPad\n        />\n      </div>\n    </template>\n    <AddLiquidityForm :pool=\"pool\" />\n  </BalCard>\n</template>\n\n","<script lang=\"ts\" setup>\ntype Gap = '4' | '8';\ntype MaxWidth = '3xl';\ntype ColSpan = '5' | '6' | '7';\ntype Cols = '12';\ntype Props = {\n  cols?: Cols;\n  gap?: Gap;\n  leftSpan?: ColSpan;\n  rightSpan?: ColSpan;\n  maxWidth?: MaxWidth;\n};\nwithDefaults(defineProps<Props>(), {\n  cols: '12',\n  gap: '8',\n  leftSpan: '6',\n  rightSpan: '6',\n  maxWidth: '3xl',\n});\nconst totalColsClasses = computed(\n  (): Record<Cols, string> => ({\n    '12': 'lg:grid-cols-12',\n  })\n);\nconst gapClasses = computed(\n  (): Record<Gap, string> => ({\n    '4': 'lg:gap-x-4 gap-y-4',\n    '8': 'lg:gap-x-8 gap-y-8',\n  })\n);\nconst maxWidthClasses = computed(\n  (): Record<MaxWidth, string> => ({\n    '3xl': 'max-w-3xl',\n  })\n);\nconst colSpanClasses = computed(\n  (): Record<ColSpan, string> => ({\n    '5': 'col-span-5',\n    '6': 'col-span-6',\n    '7': 'col-span-7',\n  })\n);\n</script>\n\n<template>\n  <div :class=\"`px-4 lg:px-0 mx-auto ${maxWidthClasses[maxWidth]}`\">\n    <div\n      :class=\"`grid grid-cols-1 ${totalColsClasses[cols]} gap-x-0 ${gapClasses[gap]}}`\"\n    >\n      <div :class=\"colSpanClasses[leftSpan]\">\n        <slot name=\"left\" />\n      </div>\n\n      <div :class=\"colSpanClasses[rightSpan]\">\n        <slot name=\"right\" />\n      </div>\n\n      <slot />\n    </div>\n  </div>\n</template>\n","import { Pool } from '@/services/pool/types';\nimport { useRouter } from 'vue-router';\n\nimport { useDisabledJoinPool } from '@/composables/useDisabledJoinPool';\nimport useNetwork from '@/composables/useNetwork';\n\nexport default function useDisabledJoinsGuard(pool: Pool) {\n  const router = useRouter();\n  const { networkSlug } = useNetwork();\n  const { shouldDisableJoins } = useDisabledJoinPool(pool);\n  if (shouldDisableJoins.value) redirectToPoolPage(pool.id);\n\n  function redirectToPoolPage(poolId) {\n    router.push({\n      name: 'pool',\n      params: { id: poolId, networkSlug },\n    });\n  }\n}\n","<script setup lang=\"ts\">\nimport { usePoolHelpers } from '@/composables/usePoolHelpers';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport MyWallet from './MyWallet.vue';\nimport Accordion from './Accordion.vue';\nimport AddLiquidityCard from './AddLiquidityCard.vue';\nimport { provideJoinPool } from '@/providers/local/join-pool.provider';\nimport Col2Layout from '@/components/layouts/Col2Layout.vue';\nimport useDisabledJoinsGuard from '@/composables/contextual/add-liquidity/useDisabledJoinsGuard';\nimport { Pool } from '@/services/pool/types';\n\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\nconst pool = toRef(props, 'pool');\n\n/**\n * PROVIDERS\n */\nprovideJoinPool(pool);\n\n/**\n * COMPOSABLES\n */\nuseDisabledJoinsGuard(props.pool);\nconst { isDeepPool } = usePoolHelpers(pool);\nconst { isMobile } = useBreakpoints();\n</script>\n\n<template>\n  <Col2Layout leftSpan=\"5\" rightSpan=\"7\">\n    <template v-if=\"!isMobile\" #left>\n      <MyWallet :pool=\"pool\" />\n    </template>\n    <template #right>\n      <AddLiquidityCard :pool=\"pool\" />\n    </template>\n\n    <Accordion\n      v-if=\"isMobile\"\n      :pool=\"pool\"\n      class=\"mt-4\"\n      :isDeepPool=\"isDeepPool\"\n    />\n  </Col2Layout>\n</template>\n","<script setup lang=\"ts\">\nimport Page from '@/components/contextual/pages/pool/add-liquidity/Page.vue';\nimport { useIntervalFn } from '@vueuse/core';\nimport { oneSecondInMs } from '@/composables/useTime';\nimport { usePool } from '@/providers/local/pool.provider';\nimport Col2Layout from '@/components/layouts/Col2Layout.vue';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\nimport { useRoute } from 'vue-router';\n\n/**\n * STATE\n */\nconst route = useRoute();\nconst poolId = (route.params.id as string).toLowerCase();\n\n/**\n * PROVIDERS\n */\nprovidePoolStaking(poolId);\n\n/**\n * COMPOSABLES\n */\nconst { pool, isLoadingPool, refetchOnchainPoolData } = usePool();\nconst { isMobile } = useBreakpoints();\n\n/**\n * COMPUTED\n */\n\nconst isLoading = computed((): boolean => isLoadingPool.value);\n\n// Instead of refetching pool data on every block, we refetch every 20s to prevent\n// overfetching a request on short blocktime networks like Polygon.\nuseIntervalFn(refetchOnchainPoolData, oneSecondInMs * 20);\n</script>\n\n<template>\n  <div>\n    <Col2Layout v-if=\"isLoading || !pool\" leftSpan=\"5\" rightSpan=\"7\">\n      <template v-if=\"!isMobile\" #left>\n        <BalLoadingBlock class=\"h-24\" />\n      </template>\n      <template #right>\n        <BalLoadingBlock class=\"h-96\" />\n      </template>\n    </Col2Layout>\n    <Page v-else :pool=\"pool\" />\n  </div>\n</template>\n\n"],"names":["Tab","Tab2","tabs","i18n","activeTab","ref","resetTabs","useAddLiquidityTabs","SwapJoinHandler","pool","sdk","__publicField","params","signer","slippageBsp","userAddress","to","data","value","TransactionBuilder","amountsIn","tokensIn","amountIn","tokenIn","selectByAddress","bnum","hasFetchedPoolsForSor","fetchPoolsForSor","safeAmount","overflowProtected","bnumAmount","parseFixed","gasPrice","bptOut","formatFixed","_a","priceImpact","amountOut","marketSp","price","BigNumber","swapInfo","maxSlippage","deadline","getTimestampSecondsFromNow","address","isSameAddress","NATIVE_ASSET_ADDRESS","POOLS","GeneralisedJoinHandler","txBuilder","encodedCall","relayerSignature","approvalActions","evmAmountsIn","token","tokenAddresses","signerAddress","slippage","poolId","hasInvalidAmounts","item","isNativeAssetJoin","configService","simulationType","approvalActionsLength","SimulationType","nativeAsset","AddressZero","ExactInJoinHandler","addressesIn","tokensList","_amountsIn","findByAddress","sdkPool","_tokensIn","formatAddressForSor","expectedBPTOut","evmPriceImpact","amountsInAddresses","wNativeAsset","includesNativeAsset","includesAddress","poolTokensList","tokensListExclBpt","JoinHandler","JoinPoolService","getBalancerSDK","type","handlerParams","throwQueryError","errorMessage","error","joinPoolProvider","queryJoinDebounceMillis","isMounted","highPriceImpactAccepted","txError","isSingleAssetJoin","debounceQueryJoin","debounce","queryJoin","queryEnabled","computed","txInProgress","queryJoinQuery","useQuery","QUERY_KEYS","reactive","joinPoolService","getTokens","injectTokens","priceFor","wrappedNativeAsset","useTokens","toFiat","useNumbers","useUserSettings","getSigner","appNetworkConfig","useWeb3","transactionDeadline","useApp","txState","resetTxState","useTxState","relayerApproval","useRelayerApprovalTx","RelayerType","getTokenApprovalActions","updateAllowancesFor","useTokenApprovalActions","relayerApprovalAction","useRelayerApproval","isDeepPool","isDeep","poolJoinTokens","joinTokens","a","highPriceImpact","HIGH_PRICE_IMPACT","rektPriceImpact","REKT_PRICE_IMPACT","hasAcceptedHighPriceImpact","hasValidInputs","hasAmountsIn","amountsInWithValue","missingPricesIn","fiatValueIn","fiatValuesIn","bnSum","fiatValueOut","fiatValueOf","shouldSignRelayer","amountsToApprove","isLoadingQuery","queryError","joinHandlerType","supportsProportionalOptimization","isStableLike","setAmountsIn","setTokensIn","resetAmounts","_","i","resetQueryJoinState","setApprovalActions","tokenApprovalActions","ApprovalAction","validateAmountsIn","output","logJoinException","join","setIsSingleAssetJoin","setJoinWithNativeAsset","joinWithNativeAsset","newAddress","prevAddress","query","sender","captureBalancerException","watch","onBeforeMount","onMounted","readonly","JoinPoolProviderSymbol","symbolKeys","provideJoinPool","joinPoolResponse","provide","useJoinPool","safeInject","useMyWallet","isLoadingPool","usePool","getMaxBalanceFor","excludedTokens","setMaxAmount","maxBalance","isNativeAsset","isWrappedNativeAsset","handleMyWalletTokenClick","isPoolToken","nextTick","props","__props","hasNativeBalance","nativeBalance","nativeCurrency","useNativeBalance","t","useI18n","usePoolHelpers","nativeBalanceText","sectionTitle","isMainnetWstETHPool","toRef","networkConfig","useConfig","getToken","networkSlug","useNetwork","stETH","wstETH","fNum","currency","emit","__emit","addTransaction","useTransactions","lockablePoolId","useVeBal","isStakablePool","usePoolStaking","isMismatchedNetwork","poolWeightsLabel","joinPoolApprovalActions","actions","submit","handleSuccess","receipt","confirmedAt","handleFailed","tx","FNumFormats","onUnmounted","confirmed","title","showTokensOut","tokenOutMap","amountInMap","amountMap","amountOutMap","tokenInMap","tokenMap","fiatAmountInMap","fiatAmountMap","fiatAmountOutMap","fiatTotalOut","total","amount","handleClose","handleShowStakeModal","useIntervalFn","oneSecondInMs","usePropMaxJoin","useNativeAsset","config","balanceFor","poolTokens","poolTokenBalances","balancesMap","parseUnits","getAddress","poolToken","calcProportionalValue","fixedAmountIn","poolTokenBalance","fixedTokenData","evmFixedAmount","fixedTokenPoolBalance","formatUnits","propAmountsGiven","getPropMax","maxAmounts","hasBalance","balance","_balance","proportionalAmountsIn","proportionalAmountIn","currentMaxAmount","thisAmount","_b","useAddLiquidityTotals","isWethOrEth","tokensWithBalanceFrom","tokensWithoutBalanceFrom","useUserTokens","priceImpactClasses","optimizeBtnClasses","hasBalanceForAllTokens","hasBalanceForAll","hasWethOrEthBalance","hasBalanceForSomeTokens","hasBalanceForSome","maximized","optimized","propMaxAmountsIn","maximizeAmounts","optimizeAmounts","isWalletReady","showPreview","showStakeModal","managedPoolWithSwappingHalted","veBalTokenInfo","startConnectWithInjectedProvider","forceProportionalInputs","poolHasLowLiquidity","LOW_LIQUIDITY_THRESHOLD","tokens","initializeTokensForm","isSingleAssetJoin2","getTokenInputLabel","tokenOptions","onTokenChange","isSingleAsset","newJoinTokens","prevIsSingleAsset","prevJoinToken","hasTabChanged","isEqual","network","isPreMintedBptPool","totalColsClasses","gapClasses","maxWidthClasses","colSpanClasses","useDisabledJoinsGuard","router","useRouter","shouldDisableJoins","useDisabledJoinPool","redirectToPoolPage","isMobile","useBreakpoints","useRoute","providePoolStaking","refetchOnchainPoolData","isLoading"],"mappings":"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"}