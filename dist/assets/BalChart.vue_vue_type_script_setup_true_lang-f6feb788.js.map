{"version":3,"file":"BalChart.vue_vue_type_script_setup_true_lang-f6feb788.js","sources":["../../src/components/_global/BalChart/BalChart.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport * as echarts from 'echarts/core';\nimport { GridOption } from 'echarts/types/dist/shared';\nimport { last } from 'lodash';\nimport { Dictionary } from 'lodash';\nimport numeral from 'numeral';\nimport ECharts from 'vue-echarts';\nimport { initEcharts } from '@/dependencies/echarts';\n\nimport useDarkMode from '@/composables/useDarkMode';\nimport useNumbers, { FNumOptions } from '@/composables/useNumbers';\nimport useTailwind from '@/composables/useTailwind';\nimport { bnum } from '@/lib/utils';\n\ninitEcharts();\n\ntype AxisMoveEvent = {\n  seriesIndex: number;\n  dataIndex: number;\n};\n\ntype ChartData = {\n  name: string;\n  values: (readonly [string, number])[];\n  hoverColor?: string;\n  hoverBorderColor?: string;\n};\n\ntype AxisLabelFormat = {\n  xAxis?: FNumOptions;\n  yAxis?: FNumOptions;\n};\n\ntype AreaStyle = {\n  color: echarts.LinearGradientObject;\n};\n\ntype Props = {\n  data: ChartData[];\n  chartType: string;\n  lineStyles?: any[];\n  onAxisMoved?: undefined | ((value: readonly [string, number]) => void);\n  isLoading?: boolean;\n  hideYAxis?: boolean;\n  hideXAxis?: boolean;\n  xAxisMinInterval?: number;\n  showHeader?: boolean;\n  needChartValue?: boolean;\n  axisLabelFormatter?: AxisLabelFormat;\n  color?: string[];\n  hoverColor?: string;\n  hoverBorderColor?: string;\n  height: number | string;\n  showLegend?: boolean;\n  legendState?: Dictionary<boolean>;\n  forceResizeTick?: number; // manually uptick this variable to force a resize calculation on the chart\n  isLastValueChipVisible?: boolean; // whether to show the little rectangle with the last value of the data\n  customGrid?: echarts.ComposeOption<GridOption>; // provide a custom grid for the chart\n  chartClass?: string; // sets the class for the chart container\n  wrapperClass?: unknown; // sets the class for the element which wraps the chart and the header\n  showTooltip?: boolean; // shows the tooltip\n  showTooltipLayer?: boolean; // hides tooltip floating layer\n  useMinMax?: boolean; // whether to constrain the y-axis based on the min and max values of the data passed in\n  areaStyle?: AreaStyle;\n  symbolSize?: number;\n  reverseParams?: boolean;\n  paramsLabel?: string;\n};\n\nconst emit = defineEmits([\n  'periodSelected',\n  'setCurrentChartValue',\n  'mouseLeaveEvent',\n  'mouseEnterEvent',\n]);\n\nconst props = withDefaults(defineProps<Props>(), {\n  isLoading: false,\n  type: 'category',\n  hideYAxis: false,\n  hideXAxis: false,\n  showHeader: false,\n  needChartValue: false,\n  showLegend: false,\n  axisLabelFormatter: () => ({}),\n  showTooltip: true,\n  showTooltipLayer: true,\n  useMinMax: false,\n  symbolSize: 5,\n});\n\nconst chartInstance = ref<echarts.ECharts>();\nconst currentValue = ref('$0,00');\nconst change = ref(0);\nconst { fNum } = useNumbers();\nconst tailwind = useTailwind();\nconst { darkMode } = useDarkMode();\n\n// https://echarts.apache.org/en/option.html\nconst chartConfig = computed(() => ({\n  // controls the legend you see at the top\n  // formatter allows us to show the latest value for each series\n  legend: {\n    show: props.showLegend,\n    left: 0,\n    top: 0,\n    icon: 'roundRect',\n    itemHeight: 5,\n    formatter: (legendName: string) => {\n      const latestValue = last(\n        props.data.find(d => d.name === legendName)?.values as any\n      ) as [string | number, string | number];\n      return `${legendName}: ${fNum(\n        latestValue[1],\n        props.axisLabelFormatter.yAxis\n      )}`;\n    },\n    selected: props.legendState || {},\n    textStyle: {\n      color: darkMode.value\n        ? tailwind.theme.colors.gray['100']\n        : tailwind.theme.colors.gray['800'],\n    },\n    inactiveColor: darkMode.value\n      ? tailwind.theme.colors.gray['700']\n      : tailwind.theme.colors.gray['300'],\n  },\n  // controlling the display of the X-Axis\n  xAxis: {\n    type: 'time',\n    show: !props.hideXAxis,\n    axisTick: { show: false },\n    axisLine: {\n      show: false,\n    },\n    minInterval: props.xAxisMinInterval,\n    axisLabel: {\n      formatter: props.axisLabelFormatter.xAxis\n        ? value => fNum(value, props.axisLabelFormatter.xAxis)\n        : undefined,\n      color: tailwind.theme.colors.gray['400'],\n    },\n    splitArea: {\n      show: false,\n      areaStyle: {\n        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'],\n      },\n    },\n  },\n  // controlling the display of the Y-Axis\n  yAxis: {\n    axisLine: {\n      show: false,\n    },\n    axisTick: { show: false },\n    min: props.useMinMax ? 'dataMin' : null,\n    max: props.useMinMax ? 'dataMax' : null,\n    type: 'value',\n    show: !props.hideYAxis,\n    splitNumber: 4,\n    splitLine: {\n      show: false,\n    },\n    position: 'left',\n    axisLabel: {\n      show: !props.hideYAxis,\n      formatter: props.axisLabelFormatter.yAxis\n        ? value => fNum(value, props.axisLabelFormatter.yAxis)\n        : undefined,\n      color: tailwind.theme.colors.gray['400'],\n    },\n    nameGap: 25,\n  },\n  color: props.color,\n  // Controls the boundaries of the chart from the HTML defined rectangle\n  grid: props.customGrid || {\n    left: '2.5%',\n    right: 0,\n    top: '10%',\n    bottom: '5%',\n    containLabel: true,\n  },\n  tooltip: {\n    show: props.showTooltip,\n    showContent: props.showTooltipLayer,\n    trigger: 'axis',\n    confine: true,\n    axisPointer: {\n      type: 'shadow',\n      label: {\n        show: false,\n      },\n    },\n    backgroundColor: darkMode.value\n      ? tailwind.theme.colors.gray['800']\n      : tailwind.theme.colors.white,\n    borderColor: darkMode.value\n      ? tailwind.theme.colors.gray['900']\n      : tailwind.theme.colors.white,\n    formatter: params => {\n      let processedParams = params;\n\n      // if veBAL, reverse the order of the params to meet the design requirements\n      if (props.reverseParams) {\n        processedParams = [...params.reverse()];\n        // filter equal values in same date\n        processedParams = processedParams.filter((param, index) => {\n          if (index === 0) return true;\n          return param.value[1] !== processedParams[index - 1].value[1];\n        });\n      }\n\n      return `\n            <div class='flex flex-col font-body bg-white dark:bg-gray-850 dark:text-white'>\n              <span>${params[0].value[0]}</span>\n              ${processedParams\n                .map(\n                  param => `\n                    <span>\n                      ${param.marker} ${param.seriesName}\n                      <span class='font-semibold'>\n                        ${fNum(\n                          param.value[1],\n                          props.axisLabelFormatter.yAxis\n                        )} ${props.paramsLabel || ''}\n                      </span>\n                    </span>\n                  `\n                )\n                .join('')}\n            </div>\n          `;\n    },\n  },\n  series: props.data.map((d, i) => ({\n    data: d.values,\n    type: props.chartType,\n    smooth: 0.3,\n    showSymbol: false,\n    name: d.name,\n    silent: true,\n    animationEasing: function (k) {\n      return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n    },\n    lineStyle: {\n      width: 2,\n      ...props.lineStyles?.[i],\n    },\n    areaStyle: props.areaStyle,\n    itemStyle: {\n      borderRadius: 100,\n    },\n    emphasis: {\n      itemStyle: {\n        color: d.hoverColor || props.hoverColor,\n        borderColor: d.hoverBorderColor || props.hoverBorderColor,\n      },\n    },\n    symbolSize: props.symbolSize,\n    // This is a retrofitted option to show the small pill with the\n    // latest value of the series at the end of the line on the RHS\n    // the line is hidden, but the label is shown with extra styles\n    markLine: {\n      symbol: 'roundRect',\n      symbolSize: 0,\n      lineStyle: {\n        color: 'rgba(0, 0, 0, 0)',\n      },\n      precision: 5,\n      label: {\n        backgroundColor: (props.color || [])[i] || 'black',\n        borderRadius: 3,\n        padding: 4,\n        formatter: (params: any) => {\n          return fNum(params.data.yAxis, props.axisLabelFormatter.yAxis);\n        },\n        color: '#FFF',\n        fontSize: 10,\n      },\n      data: props.isLastValueChipVisible\n        ? [\n            {\n              name: 'Latest',\n              yAxis:\n                props.data[i]?.values.length > 0\n                  ? (last(props.data[i]?.values) || [])[1]\n                  : 0,\n            },\n          ]\n        : [],\n      animation: false,\n    },\n  })),\n}));\n\nconst styleOverrides = computed(() => {\n  let style: any = {};\n  if (props.height && typeof props.height === 'number') {\n    style.height = `${props.height}px`;\n  }\n  return style;\n});\n\n// sometimes the autoresize doesn't resize as often as we'd like\n// for page size changes, its own mechanism is fine however for\n// usages where we need to animate the size of the graph, it's not as\n// smooth so we can use this little tick (updated by anim tick) to resize\n// smoothly.\nwatch(\n  () => props.forceResizeTick,\n  () => {\n    if (chartInstance.value) {\n      chartInstance.value.resize();\n    }\n  }\n);\n\nfunction setCurrentValueToLatest(updateCurrentValue: boolean) {\n  const currentDayValue = numeral(\n    (props.data[0].values[props.data[0].values.length - 1] || [])[1]\n  );\n\n  if (updateCurrentValue) {\n    currentValue.value = fNum(\n      currentDayValue.value() || 0,\n      props.axisLabelFormatter.yAxis || {\n        style: 'currency',\n        currency: 'USD',\n        fixedFormat: true,\n      }\n    );\n    const currentChartValue = props.data[0].values[0];\n\n    if (currentChartValue) {\n      emit('setCurrentChartValue', {\n        chartDate: currentChartValue[0],\n        chartValue: currentChartValue[1],\n      });\n    }\n  }\n\n  const startValue = numeral((props.data[0].values[0] || [])[1]);\n  change.value =\n    ((currentDayValue.value() || 0) - (startValue.value() || 0)) /\n    (startValue.value() || 0);\n}\n\n// make sure to update the latest values when we get a fresh set of data\nwatch(\n  () => props.data,\n  () => {\n    setCurrentValueToLatest(true);\n  }\n);\n\n// make sure to update the latest values when we get a fresh set of data\n// need to do this onMount as well since the data doesn't change on mount\n// it simply is there without change so it won't trigger the watcher\nonMounted(() => {\n  setCurrentValueToLatest(true);\n});\n\n//reset the current value to latest when the user's mouse leaves the view\nfunction handleMouseLeave() {\n  setCurrentValueToLatest(true);\n  emit('mouseLeaveEvent');\n}\n\nfunction handleMouseEnter() {\n  emit('mouseEnterEvent');\n}\n\n// Triggered when hovering mouse over different xAxis points\nconst handleAxisMoved = ({ dataIndex, seriesIndex }: AxisMoveEvent) => {\n  if (!props.showHeader && !props.needChartValue) return;\n  if (props.data[seriesIndex]?.values) {\n    props.onAxisMoved &&\n      props.onAxisMoved(props.data[seriesIndex].values[dataIndex]);\n\n    const currentChartValue = props.data[seriesIndex].values[dataIndex];\n\n    emit('setCurrentChartValue', {\n      chartDate: currentChartValue[0],\n      chartValue: currentChartValue[1],\n    });\n\n    // toFixed to prevent maximumFractionalDigits error in fNum formatting.\n    // Shouldn't need more than 6 decimals because this is a USD value.\n    const value = bnum(props.data[seriesIndex].values[dataIndex][1]).toFixed(6);\n\n    currentValue.value = fNum(\n      value,\n      props.axisLabelFormatter.yAxis || {\n        style: 'currency',\n        currency: 'USD',\n        fixedFormat: true,\n      }\n    );\n\n    // if first point in chart, show overall change\n    if (dataIndex === 0) {\n      const prev = Number(props.data[seriesIndex].values[0][1]);\n      const current = props.data[seriesIndex].values[\n        props.data[seriesIndex].values.length - 1\n      ][1] as number;\n      change.value = (current - prev) / prev;\n    } else {\n      const prev = props.data[seriesIndex].values[dataIndex - 1][1] as number;\n      const current = props.data[seriesIndex].values[dataIndex][1] as number;\n      const _change = (current - prev) / prev;\n\n      // 100% increase if coming from a 0!\n      if (prev === 0 && current !== 0) {\n        change.value = 1;\n        return;\n      }\n\n      // any errors or 0 division, fall back to 0\n      if (isNaN(_change)) {\n        change.value = 0;\n        return;\n      }\n      change.value = _change;\n    }\n  }\n};\n</script>\n\n<template>\n  <BalLoadingBlock v-if=\"isLoading\" class=\"mt-16 h-96\" />\n  <div\n    v-else\n    :class=\"wrapperClass\"\n    @mouseenter=\"handleMouseEnter\"\n    @touchstart.passive=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n    @touchend=\"handleMouseLeave\"\n  >\n    <div v-if=\"showHeader\" id=\"lineChartHeader\" class=\"mb-4\">\n      <h3 class=\"text-xl tracking-wider text-gray-800 dark:text-gray-400\">\n        {{ currentValue }}\n      </h3>\n      <span\n        :class=\"{\n          'text-green-400': change >= 0,\n          'text-red-400': change < 0,\n          'font-medium': true,\n        }\"\n        >{{ numeral(change).format('+0.0%') }}\n      </span>\n    </div>\n    <ECharts\n      ref=\"chartInstance\"\n      :class=\"[\n        height && typeof (height === 'string') ? `h-${height}` : '',\n        'w-full',\n        chartClass,\n      ]\"\n      :option=\"chartConfig\"\n      autoresize\n      :updateOptions=\"{ replaceMerge: 'series' }\"\n      :style=\"[styleOverrides]\"\n      @update-axis-pointer=\"handleAxisMoved\"\n    />\n  </div>\n</template>\n"],"names":["initEcharts","emit","__emit","props","__props","chartInstance","ref","currentValue","change","fNum","useNumbers","tailwind","useTailwind","darkMode","useDarkMode","chartConfig","computed","legendName","latestValue","last","_a","d","value","params","processedParams","param","index","i","k","_b","_c","styleOverrides","style","watch","setCurrentValueToLatest","updateCurrentValue","currentDayValue","numeral","currentChartValue","startValue","onMounted","handleMouseLeave","handleMouseEnter","handleAxisMoved","dataIndex","seriesIndex","bnum","prev","current","_change"],"mappings":"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"}