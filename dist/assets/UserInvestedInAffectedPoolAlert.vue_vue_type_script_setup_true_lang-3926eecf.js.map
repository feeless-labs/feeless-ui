{"version":3,"file":"UserInvestedInAffectedPoolAlert.vue_vue_type_script_setup_true_lang-3926eecf.js","sources":["../../src/components/tables/PoolsTable/PoolsTableActionsCell.vue","../../src/assets/images/icons/pool-actions/add.svg?url","../../src/assets/images/icons/pool-actions/migrateGauge.svg?url","../../src/assets/images/icons/pool-actions/poke.svg?url","../../src/assets/images/icons/pool-actions/remove.svg?url","../../src/assets/images/icons/pool-actions/stake.svg?url","../../src/assets/images/icons/pool-actions/unstake.svg?url","../../src/assets/images/icons/pool-actions/vote.svg?url","../../src/components/contextual/pages/pools/types.ts","../../src/components/tables/PoolsTable/PoolsTableActionSelector.vue","../../src/components/tables/PoolsTable/PoolsTable.vue","../../src/pages/recovery-exit/useUserIsDepositedInAffectedPool.ts","../../src/pages/recovery-exit/UserInvestedInAffectedPoolAlert.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, toRef } from 'vue';\n\nimport { isVeBalPool, usePoolHelpers } from '@/composables/usePoolHelpers';\nimport useNetwork from '@/composables/useNetwork';\nimport { POOLS } from '@/constants/pools';\nimport { Pool } from '@/services/pool/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  poolsType?: 'unstaked' | 'staked';\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  poolsType: 'unstaked',\n});\n\nconst emit = defineEmits<{\n  (e: 'click:stake', value: Pool): void;\n  (e: 'click:unstake', value: Pool): void;\n  (e: 'click:migrate', value: Pool): void;\n}>();\n/**\n * COMPOSABLES\n */\nconst { isMigratablePool } = usePoolHelpers(toRef(props, 'pool'));\nconst { networkSlug } = useNetwork();\n\n/** COMPUTED */\nconst stakablePoolIds = computed((): string[] =>\n  POOLS.Stakable.VotingGaugePools.concat(POOLS.Stakable.AllowList)\n);\nconst showVeBalLock = computed(() => isVeBalPool(props.pool.id));\n</script>\n\n<template>\n  <div class=\"flex justify-center py-4 px-2\">\n    <BalBtn\n      v-if=\"isMigratablePool(pool)\"\n      color=\"gradient\"\n      size=\"sm\"\n      @click.prevent.stop=\"emit('click:migrate', pool)\"\n    >\n      {{ $t('migrate') }}\n    </BalBtn>\n    <BalBtn\n      v-else-if=\"poolsType === 'unstaked' && stakablePoolIds.includes(pool.id)\"\n      color=\"gradient\"\n      size=\"sm\"\n      :disabled=\"isMigratablePool(pool)\"\n      @click.prevent.stop=\"emit('click:stake', pool)\"\n    >\n      {{ $t('stake') }}\n    </BalBtn>\n    <BalBtn\n      v-else-if=\"poolsType === 'staked'\"\n      class=\"dark:text-gray-300 dark:border-gray-300\"\n      outline\n      size=\"sm\"\n      @click.prevent.stop=\"emit('click:unstake', pool)\"\n    >\n      {{ $t('unstake') }}\n    </BalBtn>\n    <BalBtn\n      v-else-if=\"showVeBalLock\"\n      tag=\"router-link\"\n      :to=\"{\n        name: 'get-vebal',\n        query: {\n          networkSlug,\n          returnRoute: $route.name,\n          returnParams: JSON.stringify({\n            networkSlug,\n          }),\n        },\n      }\"\n      color=\"gradient-pink-yellow\"\n      size=\"sm\"\n    >\n      {{ $t('transactionAction.createLock') }}\n    </BalBtn>\n    <div v-else>-</div>\n  </div>\n</template>\n","export default \"__VITE_ASSET__543aced3__\"","export default \"__VITE_ASSET__2326af4d__\"","export default \"__VITE_ASSET__53b23abc__\"","export default \"__VITE_ASSET__190a4b19__\"","export default \"__VITE_ASSET__30428cce__\"","export default \"__VITE_ASSET__ab5c9ba9__\"","export default \"__VITE_ASSET__2c10ef7b__\"","export type UserGaugeShare = {\n  id: string;\n  gauge: {\n    poolId: string;\n    id?: string;\n  };\n  balance: string;\n};\n\nexport type LiquidityGauge = {\n  id?: string;\n  poolId: string;\n  shares: {\n    balance: string;\n  }[];\n};\n\nexport type UserGaugeSharesResponse = {\n  gaugeShares: UserGaugeShare[];\n  liquidityGauges: LiquidityGauge[];\n};\n\nexport type PoolStakingDataResponse = {\n  liquidityGauge: LiquidityGauge;\n};\n\nexport enum PoolAction {\n  Add = 'add',\n  Remove = 'remove',\n  Stake = 'stake',\n  Unstake = 'unstake',\n  Vote = 'vote',\n  MigrateGauge = 'migrateGauge',\n  Poke = 'poke',\n}\n","<script setup lang=\"ts\">\nimport { Pool } from '@/services/pool/types';\nimport { onClickOutside } from '@vueuse/core';\nimport { PoolAction } from '@/components/contextual/pages/pools/types';\nimport {\n  deprecatedDetails,\n  isJoinsDisabled,\n} from '@/composables/usePoolHelpers';\nimport { PoolWarning } from '@/types/pools';\nimport { usePoolWarning } from '@/composables/usePoolWarning';\nimport { useDisabledJoinPool } from '@/composables/useDisabledJoinPool';\nimport { POOLS } from '@/constants/pools';\n\ntype Props = {\n  pool: Pool;\n  defaultPoolActions: PoolAction[];\n  showPokeAction?: boolean;\n  showMigrateGaugeAction?: boolean;\n};\n\nconst props = withDefaults(defineProps<Props>(), {\n  showPokeAction: false,\n  showMigrateGaugeAction: false,\n});\ndefineEmits<{\n  (e: 'click:add', value: Pool): void;\n  (e: 'click:remove', value: Pool): void;\n  (e: 'click:unstake', value: Pool): void;\n  (e: 'click:vote', value: Pool): void;\n  (e: 'click:poke', value: Pool): void;\n  (e: 'click:migrateGauge', value: Pool): void;\n}>();\n\nconst { isAffectedBy } = usePoolWarning(computed(() => props.pool.id));\nconst { shouldDisableJoins } = useDisabledJoinPool(props.pool);\n\nconst isSelectorOpened = ref(false);\n\nfunction handleClickOutside() {\n  isSelectorOpened.value = false;\n}\nfunction getActionIcon(action: string) {\n  return new URL(\n    `/src/assets/images/icons/pool-actions/${action}.svg`,\n    import.meta.url\n  ).href;\n}\n\nfunction isActionDisabled(action: PoolAction) {\n  const isDeprecated =\n    Boolean(deprecatedDetails(props.pool.id)) ||\n    isAffectedBy(PoolWarning.PoolProtocolFeeVulnWarning) ||\n    isJoinsDisabled(props.pool.id) ||\n    shouldDisableJoins.value ||\n    POOLS.BrandedRedirect?.[props.pool.poolType];\n\n  const actionsToDisable = [\n    PoolAction.Add,\n    PoolAction.Stake,\n    PoolAction.MigrateGauge,\n  ];\n\n  const isStakablePool =\n    POOLS.Stakable.VotingGaugePools.includes(props.pool.id) ||\n    POOLS.Stakable.AllowList.includes(props.pool.id);\n\n  return (\n    (isDeprecated && actionsToDisable.includes(action)) ||\n    (!isStakablePool && action === PoolAction.Stake)\n  );\n}\n\nconst menuItems = computed(() => {\n  const items = [...props.defaultPoolActions];\n  if (props.showMigrateGaugeAction) {\n    items.unshift(PoolAction.MigrateGauge);\n  } else if (props.showPokeAction) {\n    items.unshift(PoolAction.Poke);\n  }\n\n  return items;\n});\n\nconst showActionCall = computed(() => {\n  return menuItems.value.some(\n    action => action === 'migrateGauge' || action === 'poke'\n  );\n});\n\nconst clickOutsideTarget = ref(null);\n\nonClickOutside(clickOutsideTarget, handleClickOutside);\n</script>\n\n<template>\n  <div\n    v-if=\"menuItems\"\n    ref=\"clickOutsideTarget\"\n    class=\"flex relative justify-end py-4 pr-8\"\n  >\n    <div\n      class=\"flex relative justify-center items-center w-7 h-7 text-blue-600 hover:bg-blue-50 rounded-md border-2 border-blue-600 transition-all duration-200 text-[8px]\"\n      @click.stop=\"isSelectorOpened = !isSelectorOpened\"\n    >\n      <div\n        v-if=\"showActionCall\"\n        class=\"absolute w-3 h-3 bg-red-500 rounded-full border-2 border-white right-[-4px] top-[-4px]\"\n      />\n      &bull;&bull;&bull;\n    </div>\n    <ul\n      v-if=\"isSelectorOpened\"\n      class=\"absolute z-10 bg-white dark:bg-gray-700 rounded border border-gray-200 shadow right-[60px] top-[50px] radius-md\"\n    >\n      <template v-for=\"action in menuItems\" :key=\"action\">\n        <li\n          v-if=\"!isActionDisabled(action)\"\n          class=\"flex items-center py-3 pr-10 pl-3 font-medium text-left dark:hover:text-gray-600 whitespace-pre hover:bg-gray-100 first:rounded-t cursor-pointer radius-md\"\n          :class=\"{\n            'bg-red-50 hover:bg-red-100 dark:bg-red-300 border-b border-gray-200':\n              action === PoolAction.Poke || action === PoolAction.MigrateGauge,\n          }\"\n          @click.stop=\"$emit(`click:${action}`, pool)\"\n        >\n          <img\n            :src=\"getActionIcon(action)\"\n            alt=\"\"\n            class=\"p-0.5 rounded-full w-[20px]\"\n          />\n          <div class=\"pr-5 pl-2\">{{ $t(`poolActions.${action}`) }}</div>\n        </li>\n      </template>\n    </ul>\n  </div>\n</template>\n\n","<script setup lang=\"ts\">\nimport { format } from 'date-fns';\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport { useRouter } from 'vue-router';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\n\nimport APRTooltip from '@/components/tooltips/APRTooltip/APRTooltip.vue';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useDarkMode from '@/composables/useDarkMode';\nimport useFathom from '@/composables/useFathom';\nimport useNumbers from '@/composables/useNumbers';\nimport useNetwork from '@/composables/useNetwork';\nimport {\n  absMaxApr,\n  fiatValueOf,\n  isMigratablePool,\n  isStableLike,\n  orderedPoolTokens,\n  orderedTokenAddresses,\n  totalAprLabel,\n  isLBP,\n  shouldHideAprs,\n} from '@/composables/usePoolHelpers';\nimport { bnum } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\nimport { APR_THRESHOLD, VOLUME_THRESHOLD } from '@/constants/pools';\nimport { configService } from '@/services/config/config.service';\n\nimport PoolsTableActionsCell from './PoolsTableActionsCell.vue';\nimport TokenPills from './TokenPills/TokenPills.vue';\nimport TokensWhite from '@/assets/images/icons/tokens_white.svg';\nimport TokensBlack from '@/assets/images/icons/tokens_black.svg';\nimport { poolMetadata } from '@/lib/config/metadata';\nimport PoolsTableExtraInfo from './PoolsTableExtraInfo.vue';\nimport PoolsTableActionSelector from './PoolsTableActionSelector.vue';\nimport { PoolAction } from '@/components/contextual/pages/pools/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * TYPES\n */\ntype Props = {\n  data?: Pool[];\n  poolsType?: 'unstaked' | 'staked';\n  isLoading?: boolean;\n  isLoadingMore?: boolean;\n  showPoolShares?: boolean;\n  noPoolsLabel?: string;\n  isPaginated?: boolean;\n  sortColumn?: string;\n  selectedTokens?: string[];\n  hiddenColumns?: string[];\n  showBoost?: boolean;\n  showActions?: boolean;\n  columnStates?: Record<string, string>;\n  skeletonClass?: string;\n  shares?: Record<string, string>;\n  boosts?: Record<string, string>;\n  defaultPoolActions?: PoolAction[];\n  shouldPokePoolsMap?: Record<string, string>;\n  hasNonPrefGaugesPoolsAddresses?: string[];\n};\n\n/**\n * PROPS & EMITS\n */\n\nconst props = withDefaults(defineProps<Props>(), {\n  poolsType: 'unstaked',\n  isLoadingMore: false,\n  showPoolShares: false,\n  noPoolsLabel: 'No pools',\n  isPaginated: false,\n  sortColumn: 'totalLiquidity',\n  hiddenColumns: () => [],\n  showBoost: false,\n  showActions: false,\n  columnStates: () => ({}),\n  data: () => [],\n  selectedTokens: () => [],\n  skeletonClass: 'h-64',\n});\n\nconst emit = defineEmits<{\n  (e: 'loadMore'): void;\n  (e: 'triggerVote'): void;\n  (e: 'triggerStake', value: Pool): void;\n  (e: 'triggerUnstake', value: Pool): void;\n  (e: 'triggerCheckpoint', value: Pool): void;\n  (e: 'onColumnSort', value: string): void;\n}>();\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst router = useRouter();\nconst { t } = useI18n();\nconst { trackGoal, Goals } = useFathom();\nconst { darkMode } = useDarkMode();\nconst { upToLargeBreakpoint, upToSmallBreakpoint, isMobile } = useBreakpoints();\nconst { networkSlug } = useNetwork();\nconst { isWalletReady } = useWeb3();\n\nconst wideCompositionWidth = computed(() => {\n  if (upToSmallBreakpoint.value) return 250;\n  return 350;\n});\n\n/**\n * DATA\n */\nconst columns = computed<ColumnDefinition<Pool>[]>(() => [\n  {\n    name: 'Icons',\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 125,\n    noGrow: true,\n  },\n  {\n    name: t('composition'),\n    id: 'poolName',\n    accessor: 'id',\n    Cell: 'poolNameCell',\n    width: props.hiddenColumns.length >= 2 ? wideCompositionWidth.value : 350,\n  },\n  {\n    name: t('myBoost'),\n    accessor: pool => `${bnum(boostFor(pool)).toFixed(3)}x`,\n    align: 'right',\n    id: 'myBoost',\n    hidden: !props.showBoost,\n    sortKey: pool => Number(boostFor(pool)),\n    width: 150,\n    cellClassName: 'font-numeric',\n  },\n  {\n    name: t('myBalance'),\n    accessor: pool =>\n      fNum(balanceValue(pool), {\n        style: 'currency',\n        maximumFractionDigits: 0,\n        fixedFormat: true,\n      }),\n    align: 'right',\n    id: 'myBalance',\n    hidden: !props.showPoolShares,\n    sortKey: pool => Number(balanceValue(pool)),\n    width: 160,\n    cellClassName: 'font-numeric',\n  },\n  {\n    name: t('poolValue'),\n    accessor: pool =>\n      fNum(pool.totalLiquidity || 0, {\n        style: 'currency',\n        maximumFractionDigits: 0,\n      }),\n    align: 'right',\n    id: 'totalLiquidity',\n    sortKey: pool => {\n      const apr = Number(pool.totalLiquidity);\n      if (apr === Infinity || isNaN(apr)) return 0;\n      return apr;\n    },\n    width: 150,\n    cellClassName: 'font-numeric',\n  },\n  {\n    name: t('volume24h', [t('hourAbbrev')]),\n    accessor: pool => pool?.volumeSnapshot || '0',\n    align: 'right',\n    id: 'volume',\n    Cell: 'volumeCell',\n    sortKey: pool => {\n      const volume = Number(pool?.volumeSnapshot);\n      if (volume === Infinity || isNaN(volume) || volume > VOLUME_THRESHOLD)\n        return 0;\n      return volume;\n    },\n    width: 175,\n    cellClassName: 'font-numeric',\n  },\n  {\n    name: props.showPoolShares ? t('myApr') : t('apr'),\n    Cell: 'aprCell',\n    accessor: pool => pool?.apr?.min.toString() || '0',\n    align: 'right',\n    id: 'apr',\n    sortKey: pool => {\n      let apr = 0;\n\n      if (pool?.apr) {\n        apr = Number(absMaxApr(pool.apr, pool.boost));\n      }\n\n      return isFinite(apr) && (pool.apr?.swapFees || 0) < APR_THRESHOLD\n        ? apr\n        : 0;\n    },\n    width: 150,\n  },\n  {\n    name: t('expiryDate'),\n    Cell: 'lockEndDateCell',\n    accessor: 'lockedEndDate',\n    align: 'right',\n    id: 'lockEndDate',\n    width: 150,\n  },\n  {\n    name: t('migrate'),\n    Cell: 'migrateCell',\n    accessor: 'migrate',\n    align: 'center',\n    id: 'migrate',\n    width: 150,\n  },\n  {\n    name: t('actions'),\n    Cell: 'actionsCell',\n    accessor: 'actions',\n    align: 'right',\n    id: 'actions',\n    hidden: !props.showActions,\n    width: 150,\n  },\n]);\n\nconst visibleColumns = computed(() =>\n  columns.value.filter(column => !props.hiddenColumns.includes(column.id))\n);\n\n/**\n * METHODS\n */\nfunction handleRowClick(pool: Pool, inNewTab?: boolean) {\n  trackGoal(Goals.ClickPoolsTableRow);\n  const route = router.resolve({\n    name: 'pool',\n    params: { id: pool.id, networkSlug },\n  });\n  inNewTab ? window.open(route.href) : router.push(route);\n}\n\nfunction navigateToPoolMigration(pool: Pool) {\n  router.push({\n    name: 'migrate-pool',\n    params: {\n      from: pool.id,\n      to: configService.network.pools.Migrations?.[pool.id].toPoolId,\n    },\n    query: { returnRoute: 'home' },\n  });\n}\n\nfunction balanceValue(pool: Pool): string {\n  const bpt = props?.shares?.[pool.id] || '0';\n  return fiatValueOf(pool, bpt);\n}\n\nfunction boostFor(pool: Pool): string {\n  return pool.boost || props?.boosts?.[pool.id] || '1';\n}\n\nfunction aprLabelFor(pool: Pool): string {\n  const poolAPRs = pool?.apr;\n  if (!poolAPRs) return '0';\n\n  return totalAprLabel(poolAPRs, boostFor(pool), isWalletReady.value);\n}\n\nfunction lockedUntil(lockEndDate?: number) {\n  return lockEndDate ? format(lockEndDate, PRETTY_DATE_FORMAT) : '—';\n}\n\nfunction iconAddresses(pool: Pool) {\n  return poolMetadata(pool.id)?.hasIcon\n    ? [pool.address]\n    : orderedTokenAddresses(pool);\n}\nfunction addLiquidity(id: string) {\n  router.push({\n    name: 'add-liquidity',\n    params: {\n      id,\n      networkSlug,\n    },\n  });\n}\nfunction removeLiquidity(id: string) {\n  router.push({\n    name: 'withdraw',\n    params: {\n      id,\n      networkSlug,\n    },\n  });\n}\nfunction goToPoolPage(id: string) {\n  router.push({\n    name: 'pool',\n    params: {\n      id,\n      networkSlug,\n    },\n  });\n}\n</script>\n\n<template>\n  <BalCard\n    shadow=\"lg\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n    exposeOverflow\n  >\n    <BalTable\n      :columns=\"visibleColumns\"\n      :data=\"data\"\n      :noResultsLabel=\"noPoolsLabel\"\n      :isLoading=\"isLoading\"\n      :isLoadingMore=\"isLoadingMore\"\n      :skeletonClass=\"skeletonClass\"\n      sticky=\"both\"\n      :square=\"upToLargeBreakpoint\"\n      :onRowClick=\"handleRowClick\"\n      :isPaginated=\"isPaginated\"\n      isOnlyDescSort\n      :initialState=\"{\n        sortColumn: sortColumn,\n        sortDirection: 'desc',\n      }\"\n      @on-column-sort=\"emit('onColumnSort', $event)\"\n      @load-more=\"emit('loadMore')\"\n    >\n      <template #iconColumnHeader>\n        <div class=\"flex items-center\">\n          <img\n            v-if=\"darkMode\"\n            :src=\"TokensWhite\"\n            alt=\"token\"\n            loading=\"lazy\"\n            width=\"24\"\n            height=\"15\"\n          />\n          <img\n            v-else\n            :src=\"TokensBlack\"\n            alt=\"token\"\n            loading=\"lazy\"\n            width=\"24\"\n            height=\"15\"\n          />\n        </div>\n      </template>\n      <template #iconColumnCell=\"pool\">\n        <div v-if=\"!isLoading\" class=\"py-4 px-6\" :data-testid=\"pool?.id\">\n          <BalAssetSet\n            :addresses=\"iconAddresses(pool)\"\n            :width=\"100\"\n            :size=\"isMobile ? 28 : 32\"\n          />\n        </div>\n      </template>\n      <template #poolNameCell=\"pool\">\n        <div v-if=\"!isLoading\" class=\"flex items-center py-4 px-6\">\n          <div v-if=\"poolMetadata(pool.id)?.name\" class=\"pr-2 text-left\">\n            {{ poolMetadata(pool.id)?.name }}\n          </div>\n          <div v-else>\n            <TokenPills\n              :tokens=\"orderedPoolTokens(pool, pool.tokens)\"\n              :isStablePool=\"isStableLike(pool.poolType)\"\n              :selectedTokens=\"selectedTokens\"\n              :pickedTokens=\"selectedTokens\"\n            />\n          </div>\n          <PoolsTableExtraInfo :pool=\"pool\" />\n        </div>\n      </template>\n      <template #volumeCell=\"pool\">\n        <div\n          :key=\"columnStates.volume\"\n          class=\"flex justify-end py-4 px-6 -mt-1 font-numeric\"\n        >\n          <BalLoadingBlock v-if=\"!pool?.volumeSnapshot\" class=\"w-12 h-4\" />\n          <span v-else class=\"text-right\">\n            {{\n              fNum(\n                pool?.volumeSnapshot < VOLUME_THRESHOLD\n                  ? pool?.volumeSnapshot\n                  : '-',\n                {\n                  style: 'currency',\n                  maximumFractionDigits: 0,\n                }\n              )\n            }}\n          </span>\n        </div>\n      </template>\n      <template #aprCell=\"pool\">\n        <div\n          :key=\"columnStates.aprs\"\n          :class=\"[\n            'flex justify-end py-4 px-6 -mt-1 font-numeric text-right',\n            {\n              'text-gray-300 dark:text-gray-600 line-through': isLBP(\n                pool.poolType\n              ),\n            },\n          ]\"\n        >\n          <span v-if=\"!pool?.apr || shouldHideAprs(pool.id)\">-</span>\n          <template v-else>\n            {{ aprLabelFor(pool) }}\n            <BalTooltip\n              v-if=\"isLBP(pool.poolType)\"\n              width=\"36\"\n              :text=\"$t('lbpAprTooltip')\"\n              iconSize=\"sm\"\n              iconClass=\"ml-1\"\n            />\n            <APRTooltip v-else-if=\"pool?.apr\" :pool=\"pool\" />\n          </template>\n        </div>\n      </template>\n      <template #migrateCell=\"pool\">\n        <div class=\"flex justify-center py-4 px-2\">\n          <BalBtn\n            v-if=\"isMigratablePool(pool)\"\n            color=\"gradient\"\n            size=\"sm\"\n            @click.prevent=\"navigateToPoolMigration(pool)\"\n          >\n            {{ $t('migrate') }}\n          </BalBtn>\n        </div>\n      </template>\n      <template #lockEndDateCell=\"pool\">\n        <div class=\"py-4 px-6 text-right\">\n          {{ lockedUntil(pool.lockedEndDate) }}\n        </div>\n      </template>\n      <template #actionsCell=\"pool\">\n        <PoolsTableActionSelector\n          v-if=\"defaultPoolActions\"\n          :defaultPoolActions=\"defaultPoolActions\"\n          :pool=\"pool\"\n          :showPokeAction=\"Boolean(shouldPokePoolsMap?.[pool.address]) || false\"\n          :showMigrateGaugeAction=\"\n            hasNonPrefGaugesPoolsAddresses?.includes(pool.address) || false\n          \"\n          @click:add=\"addLiquidity(pool.id)\"\n          @click:remove=\"removeLiquidity(pool.id)\"\n          @click:unstake=\"pool => emit('triggerUnstake', pool)\"\n          @click:stake=\"pool => emit('triggerStake', pool)\"\n          @click:vote=\"emit('triggerVote')\"\n          @click:migrate-gauge=\"goToPoolPage(pool.id)\"\n          @click:poke=\"pool => emit('triggerCheckpoint', pool)\"\n        />\n        <PoolsTableActionsCell\n          v-else\n          :pool=\"pool\"\n          :poolsType=\"poolsType\"\n          @click:stake=\"pool => emit('triggerStake', pool)\"\n          @click:unstake=\"pool => emit('triggerUnstake', pool)\"\n          @click:migrate=\"pool => navigateToPoolMigration(pool)\"\n        />\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n","import useWeb3 from '@/services/web3/useWeb3';\nimport { CSP_ISSUE_POOL_IDS } from '@/constants/pool-lists/csp-issue';\nimport { networkId } from '@/composables/useNetwork';\nimport useGraphQuery from '@/composables/queries/useGraphQuery';\nimport { configService } from '@/services/config/config.service';\nimport { TokenInfoMap } from '@/types/TokenList';\nimport { keyBy, merge, pickBy } from 'lodash';\nimport { useQuery } from '@tanstack/vue-query';\nimport { bnum } from '@/lib/utils';\nimport TokenService from '@/services/token/token.service';\nimport { getAddress } from '@ethersproject/address';\nimport { balancerTokenLists } from '@/providers/token-lists.provider';\n\ntype LiquidityGaugesQueryResponse = {\n  liquidityGauges: {\n    id: string;\n    symbol: string;\n    poolId: string;\n    poolAddress: string;\n  }[];\n};\n\ntype AuraGaugesQueryResponse = {\n  pools: {\n    id: string;\n    poolId: string;\n    address: string;\n    name: string;\n    lpToken: {\n      address: string;\n    };\n  }[];\n};\n\nexport function useUserIsDepositedInAffectedPool() {\n  const tokenService = new TokenService();\n\n  const { account } = useWeb3();\n\n  const poolIds = computed((): string[] => CSP_ISSUE_POOL_IDS[networkId.value]);\n  const poolAddresses = computed(() =>\n    poolIds.value.map(id => id.slice(0, 42))\n  );\n\n  const enableBalanceFetching = computed(() => {\n    return !!account.value;\n  });\n\n  const liquidityGaugesQuery = useGraphQuery<LiquidityGaugesQueryResponse>(\n    configService.network.subgraphs.gauge,\n    [\n      'useUserIsDepositedInAffectedPool',\n      'vulnerability',\n      'liquidityGauges',\n      'unstake',\n      { networkId },\n    ],\n    () => ({\n      liquidityGauges: {\n        __args: { first: 1000, where: { poolId_in: poolIds.value } },\n        id: true,\n        symbol: true,\n        poolId: true,\n        poolAddress: true,\n      },\n    }),\n    {\n      keepPreviousData: true,\n      refetchOnWindowFocus: false,\n    }\n  );\n\n  const auraGaugesQuery = useGraphQuery<AuraGaugesQueryResponse>(\n    'https://data.aura.finance/graphql',\n    [\n      'useUserIsDepositedInAffectedPool',\n      'vulnerability',\n      'auraGauges',\n      'unstake',\n      { networkId },\n    ],\n    () => ({\n      pools: {\n        __args: { chainId: networkId.value },\n        id: true,\n        poolId: true,\n        address: true,\n        name: true,\n        lpToken: {\n          address: true,\n        },\n      },\n    }),\n    {\n      keepPreviousData: true,\n      refetchOnWindowFocus: false,\n    }\n  );\n\n  const allLiquidityGauges = computed(() => {\n    return liquidityGaugesQuery.data.value?.liquidityGauges ?? [];\n  });\n  const allLiquidityGaugesAsTokenInfoMap = computed((): TokenInfoMap => {\n    const tokens = allLiquidityGauges.value.map(gauge => ({\n      chainId: networkId.value,\n      address: gauge.id,\n      decimals: 18,\n      symbol: gauge.symbol,\n      name: gauge.symbol,\n      tags: ['balancer'],\n    }));\n\n    return keyBy(tokens, 'address');\n  });\n\n  const allAuraGauges = computed(() =>\n    (auraGaugesQuery.data.value?.pools ?? []).filter(pool =>\n      poolAddresses.value.includes(pool.lpToken.address)\n    )\n  );\n  const allAuraGaugesAsTokenInfoMap = computed((): TokenInfoMap => {\n    const tokens = allAuraGauges.value.map(gauge => ({\n      chainId: networkId.value,\n      address: gauge.address,\n      decimals: 18,\n      symbol: gauge.name,\n      name: gauge.name,\n      tags: ['aura'],\n    }));\n\n    return keyBy(tokens, 'address');\n  });\n\n  const allGaugesAsTokenInfoMap = computed(\n    (): TokenInfoMap =>\n      merge(\n        allAuraGaugesAsTokenInfoMap.value,\n        allLiquidityGaugesAsTokenInfoMap.value\n      )\n  );\n\n  const enableBalancesQuery = computed(\n    () =>\n      enableBalanceFetching.value &&\n      (allLiquidityGauges.value.length > 0 || allAuraGauges.value.length > 0)\n  );\n\n  // Fetch user balances for all gauges.\n  const gaugeBalancesQuery = useQuery(\n    [\n      'useUserIsDepositedInAffectedPool',\n      'gauge',\n      'balances',\n      { networkId, allLiquidityGauges, allAuraGauges },\n    ],\n    async () => {\n      return tokenService.balances.get(\n        account.value,\n        allGaugesAsTokenInfoMap.value\n      );\n    },\n    { enabled: enableBalancesQuery }\n  );\n\n  const gaugeBalances = computed(() => {\n    return gaugeBalancesQuery.data.value || {};\n  });\n\n  const gaugesWithBalance = computed((): TokenInfoMap => {\n    return pickBy(allGaugesAsTokenInfoMap.value, token =>\n      bnum(gaugeBalancerFor(getAddress(token.address))).gt(0)\n    );\n  });\n\n  function gaugeBalancerFor(address: string): string {\n    return gaugeBalances.value[getAddress(address)] || '0';\n  }\n\n  const affectedPoolIds = computed(\n    (): string[] => CSP_ISSUE_POOL_IDS[networkId.value]\n  );\n\n  const affectedPools = computed(() =>\n    affectedPoolIds.value.map(id => ({\n      id,\n      address: id.slice(0, 42),\n    }))\n  );\n\n  // Query 1:\n  // Fetches balances for all affected pools on the current network.\n  const poolBalancesQuery = useQuery(\n    ['useUserIsDepositedInAffectedPool', 'balances', { networkId, account }],\n    async () => {\n      const poolBpts = await tokenService.metadata.get(\n        affectedPools.value.map(pool => pool.address),\n        balancerTokenLists.value\n      );\n      return tokenService.balances.get(account.value, poolBpts);\n    },\n    { enabled: enableBalanceFetching }\n  );\n\n  const poolBalances = computed(() => poolBalancesQuery.data.value || {});\n  const poolsWithBalances = computed(() =>\n    affectedPools.value.filter(pool =>\n      bnum(poolBalances.value[getAddress(pool.address)] || '0').gt(0)\n    )\n  );\n\n  const isUserDepositedInAffectedPool = computed(() => {\n    return (\n      Object.keys(gaugesWithBalance.value).length > 0 ||\n      poolsWithBalances.value.length > 0\n    );\n  });\n\n  return {\n    isUserDepositedInAffectedPool,\n  };\n}\n","<script setup lang=\"ts\">\nimport useNetwork from '@/composables/useNetwork';\nimport { lsGet, lsSet } from '@/lib/utils';\nimport { useUserIsDepositedInAffectedPool } from '@/pages/recovery-exit/useUserIsDepositedInAffectedPool';\nimport LS_KEYS from '@/constants/local-storage.keys';\n\n/**\n * STATE\n */\nconst dismissed = ref<boolean>(\n  lsGet(LS_KEYS.Alerts.RecoveryExitDismissed, false)\n);\n\n/**\n * COMPOSABLES\n */\nconst { networkSlug } = useNetwork();\nconst { isUserDepositedInAffectedPool } = useUserIsDepositedInAffectedPool();\n\nfunction handleClose() {\n  lsSet(LS_KEYS.Alerts.RecoveryExitDismissed, true);\n  dismissed.value = true;\n}\n</script>\n\n<template>\n  <div v-if=\"isUserDepositedInAffectedPool && !dismissed\" class=\"px-4 xl:px-0\">\n    <BalAlert\n      type=\"error\"\n      title=\"Pool Vulnerability - August 22, 2023\"\n      actionLabel=\"Withdraw now\"\n      class=\"mb-4\"\n      block\n      dismissable\n      @close=\"handleClose\"\n      @action-click=\"\n        $router.push({ name: 'recovery-exit', params: { networkSlug } })\n      \"\n      >A vulnerability has been discovered that affects a pool you are deposited\n      in. Please withdraw your funds as soon as possible.</BalAlert\n    >\n  </div>\n</template>\n"],"names":["props","__props","emit","__emit","isMigratablePool","usePoolHelpers","toRef","networkSlug","useNetwork","stakablePoolIds","computed","POOLS","showVeBalLock","isVeBalPool","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","__vite_glob_0_4","__vite_glob_0_5","__vite_glob_0_6","PoolAction","isAffectedBy","usePoolWarning","shouldDisableJoins","useDisabledJoinPool","isSelectorOpened","ref","handleClickOutside","getActionIcon","action","isActionDisabled","isDeprecated","deprecatedDetails","PoolWarning","isJoinsDisabled","_a","actionsToDisable","isStakablePool","menuItems","items","showActionCall","clickOutsideTarget","onClickOutside","fNum","useNumbers","router","useRouter","t","useI18n","trackGoal","Goals","useFathom","darkMode","useDarkMode","upToLargeBreakpoint","upToSmallBreakpoint","isMobile","useBreakpoints","isWalletReady","useWeb3","wideCompositionWidth","columns","pool","bnum","boostFor","balanceValue","apr","volume","VOLUME_THRESHOLD","absMaxApr","APR_THRESHOLD","visibleColumns","column","handleRowClick","inNewTab","route","navigateToPoolMigration","configService","bpt","fiatValueOf","aprLabelFor","poolAPRs","totalAprLabel","lockedUntil","lockEndDate","format","PRETTY_DATE_FORMAT","iconAddresses","poolMetadata","orderedTokenAddresses","addLiquidity","id","removeLiquidity","goToPoolPage","useUserIsDepositedInAffectedPool","tokenService","TokenService","account","poolIds","CSP_ISSUE_POOL_IDS","networkId","poolAddresses","enableBalanceFetching","liquidityGaugesQuery","useGraphQuery","auraGaugesQuery","allLiquidityGauges","allLiquidityGaugesAsTokenInfoMap","tokens","gauge","keyBy","allAuraGauges","allAuraGaugesAsTokenInfoMap","allGaugesAsTokenInfoMap","merge","enableBalancesQuery","gaugeBalancesQuery","useQuery","gaugeBalances","gaugesWithBalance","pickBy","token","gaugeBalancerFor","getAddress","address","affectedPoolIds","affectedPools","poolBalancesQuery","poolBpts","balancerTokenLists","poolBalances","poolsWithBalances","dismissed","lsGet","LS_KEYS","isUserDepositedInAffectedPool","handleClose","lsSet"],"mappings":"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"}