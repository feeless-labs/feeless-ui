{"version":3,"file":"TxActionBtn.vue_vue_type_script_setup_true_lang-27990a4e.js","sources":["../../src/components/btns/TxActionBtn/TxActionBtn.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport {\n  TransactionReceipt,\n  TransactionResponse,\n} from '@ethersproject/abstract-provider';\nimport { useI18n } from 'vue-i18n';\n\nimport useEthers from '@/composables/useEthers';\nimport useTransactions, {\n  TransactionAction,\n} from '@/composables/useTransactions';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * TYPES\n */\ntype Props = {\n  actionFn: () => Promise<TransactionResponse>;\n  action: TransactionAction;\n  summary: string;\n  confirmingLabel: string;\n  onConfirmFn?: () => unknown;\n  disabled?: boolean;\n  disableNotification?: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  disabled: false,\n});\n\nconst emit = defineEmits<{\n  (e: 'init'): void;\n  (e: 'confirming', value: TransactionResponse): void;\n  (e: 'confirmed', value: TransactionReceipt): void;\n  (e: 'failed'): void;\n}>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { addTransaction } = useTransactions();\nconst { txListener } = useEthers();\nconst { isMismatchedNetwork } = useWeb3();\n\n/**\n * TYPES\n */\nenum BtnStates {\n  Default,\n  Init,\n  Confirming,\n  Confirmed,\n}\n\n/**\n * STATE\n */\nconst btnState = ref(BtnStates.Default);\n\n/**\n * COMPUTED\n */\nconst isWaitingOnWallet = computed(() => btnState.value === BtnStates.Init);\nconst isConfirming = computed(() => btnState.value === BtnStates.Confirming);\n\nconst loadingLabel = computed(() =>\n  isWaitingOnWallet.value ? t('confirm') : props.confirmingLabel\n);\n\n/**\n * METHODS\n */\nasync function initTx() {\n  try {\n    btnState.value = BtnStates.Init;\n    emit('init');\n\n    const tx = await props.actionFn();\n\n    btnState.value = BtnStates.Confirming;\n    emit('confirming', tx);\n\n    if (!props.disableNotification)\n      addTransaction({\n        id: tx.hash,\n        type: 'tx',\n        action: props.action,\n        summary: props.summary,\n      });\n\n    await txListener(tx, {\n      onTxConfirmed: async (receipt: TransactionReceipt) => {\n        if (props.onConfirmFn) props.onConfirmFn();\n\n        btnState.value = BtnStates.Confirmed;\n        emit('confirmed', receipt);\n      },\n      onTxFailed: () => {\n        console.error('Tx failed');\n        btnState.value = BtnStates.Default;\n        emit('failed');\n      },\n    });\n  } catch (error) {\n    btnState.value = BtnStates.Default;\n    console.error(error);\n  }\n}\n</script>\n\n<template>\n  <BalBtn\n    :loadingLabel=\"loadingLabel\"\n    :loading=\"isWaitingOnWallet || isConfirming\"\n    :disabled=\"props.disabled || isMismatchedNetwork\"\n    @click.stop=\"initTx\"\n  />\n</template>\n"],"names":["props","__props","emit","__emit","t","useI18n","addTransaction","useTransactions","txListener","useEthers","isMismatchedNetwork","useWeb3","btnState","ref","isWaitingOnWallet","computed","isConfirming","loadingLabel","initTx","tx","receipt","error"],"mappings":"6WA6BA,MAAAA,EAAAC,EAIAC,EAAAC,EAUA,CAAA,EAAAC,GAAAC,IACA,CAAA,eAAAC,GAAAC,IACA,CAAA,WAAAC,GAAAC,IACA,CAAA,oBAAAC,GAAAC,IAeAC,EAAAC,EAAA,GAKAC,EAAAC,EAAA,IAAAH,EAAA,QAAA,CAAA,EACAI,EAAAD,EAAA,IAAAH,EAAA,QAAA,CAAA,EAEAK,EAAAF,EAAqB,IAAAD,EAAA,MAAAV,EAAA,SAAA,EAAAJ,EAAA,eAC4B,EAMjD,eAAAkB,GAAA,CACE,GAAA,CACEN,EAAA,MAAA,EACAV,EAAA,MAAA,EAEA,MAAAiB,EAAA,MAAAnB,EAAA,WAEAY,EAAA,MAAA,EACAV,EAAA,aAAAiB,CAAA,EAEAnB,EAAA,qBACEM,EAAA,CAAe,GAAAa,EAAA,KACN,KAAA,KACD,OAAAnB,EAAA,OACQ,QAAAA,EAAA,OACC,CAAA,EAGnB,MAAAQ,EAAAW,EAAA,CAAqB,cAAA,MAAAC,GAAA,CAEjBpB,EAAA,aAAuBA,EAAA,YAAA,EAEvBY,EAAA,MAAA,EACAV,EAAA,YAAAkB,CAAA,CAAyB,EAC3B,WAAA,IAAA,CAEE,QAAA,MAAA,WAAA,EACAR,EAAA,MAAA,EACAV,EAAA,QAAA,CAAa,CACf,CAAA,CACD,OAAAmB,EAAA,CAEDT,EAAA,MAAA,EACA,QAAA,MAAAS,CAAA,CAAmB,CACrB"}