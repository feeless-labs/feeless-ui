{"version":3,"file":"index-0a503100.js","sources":["../../src/components/_global/BalFlexGrid/BalFlexGrid.vue","../../src/assets/images/icons/claims-header/add-liquidity.svg","../../src/assets/images/icons/claims-header/stake.svg","../../src/assets/images/icons/claims-header/vebal.svg","../../src/assets/images/icons/claims-header/claim.svg","../../src/services/balancer/gauges/gauges.decorator.ts","../../src/composables/queries/useGaugesDecorationQuery.ts","../../src/services/balancer/gauges/entities/gauges/query.ts","../../src/services/balancer/gauges/entities/gauges/gauges.entity.ts","../../src/services/balancer/gauges/gauges-subgraph.client.ts","../../src/services/balancer/gauges/gauges-subgraph.service.ts","../../src/composables/queries/useGaugesQuery.ts","../../src/services/balancer/contracts/contracts/balancer-minter.ts","../../src/components/btns/ClaimBalBtn/ClaimBalBtn.vue","../../src/components/tables/BalClaimsTable.vue","../../src/services/balancer/contracts/contracts/gauge-reward-helper.ts","../../src/components/btns/ClaimRewardsBtn/ClaimRewardsBtn.vue","../../src/components/tables/GaugeRewardsTable.vue","../../src/services/balancer/contracts/contracts/fee-distributor.ts","../../src/composables/queries/useProtocolRewardsQuery.ts","../../src/components/btns/ClaimProtocolRewardsBtn.vue","../../src/components/tables/ProtocolRewardsTable.vue","../../src/composables/useClaimsData.ts","../../src/composables/useTokenHelpers.ts","../../src/services/balancer/contracts/contracts/bb-a-usd-token.ts","../../src/pages/claim/index.vue"],"sourcesContent":["<script lang=\"ts\">\nimport { VNodeArrayChildren } from 'vue';\n\nexport default defineComponent({\n  name: 'BalFlexGrid',\n\n  props: {\n    gap: { type: Number, default: 4 },\n    flexWrap: { type: Boolean, default: false },\n  },\n\n  setup(props, { slots }) {\n    const spacing = computed((): string => (props.gap / 2).toString());\n\n    const flexClasses = computed(() => ({\n      'flex-wrap': props.flexWrap,\n    }));\n\n    // @ts-ignore\n    const slotChildren = slots.default()[0].children as VNodeArrayChildren;\n    const gridItems = slotChildren.map(slotItem =>\n      h('div', { class: `px-${spacing.value} mb-${spacing.value}` }, [slotItem])\n    );\n\n    return () =>\n      h('div', { class: `px-${spacing.value}` }, [\n        h(\n          'div',\n          { class: [`flex -mx-${props.gap}`, flexClasses.value] },\n          gridItems\n        ),\n      ]);\n  },\n});\n</script>\n","export default \"__VITE_ASSET__c8846ddb__\"","export default \"__VITE_ASSET__68b0e8d4__\"","export default \"__VITE_ASSET__3abf23c1__\"","export default \"__VITE_ASSET__5046f0bc__\"","import { AddressZero } from '@ethersproject/constants';\nimport { configService } from '@/services/config/config.service';\n\nimport {\n  Gauge,\n  OnchainGaugeData,\n  OnchainGaugeDataMap,\n  SubgraphGauge,\n} from './types';\nimport { getMulticaller } from '@/dependencies/Multicaller';\nimport { Multicaller } from '@/services/multicalls/multicaller';\n\nconst MAX_REWARD_TOKENS = 8;\n\nexport class GaugesDecorator {\n  multicaller: Multicaller;\n\n  constructor() {\n    const multicaller = getMulticaller();\n    this.multicaller = new multicaller();\n  }\n\n  /**\n   * @summary Combine subgraph gauge schema with onchain data using multicalls.\n   */\n  async decorate(\n    subgraphGauges: SubgraphGauge[],\n    userAddress: string\n  ): Promise<Gauge[]> {\n    this.callRewardTokens(subgraphGauges);\n    this.callClaimableTokens(subgraphGauges, userAddress);\n\n    let gaugesDataMap = await this.multicaller.execute<OnchainGaugeDataMap>();\n\n    const nativeGauges = subgraphGauges.filter(gauge => !gauge.streamer);\n    this.callClaimableRewards(nativeGauges, userAddress, gaugesDataMap, false);\n    const oldL2Gauges = subgraphGauges.filter(gauge => !!gauge.streamer);\n    this.callClaimableRewards(oldL2Gauges, userAddress, gaugesDataMap, true);\n\n    gaugesDataMap = await this.multicaller.execute<OnchainGaugeDataMap>(\n      gaugesDataMap\n    );\n\n    return subgraphGauges.map(subgraphGauge => ({\n      ...subgraphGauge,\n      ...this.format(gaugesDataMap[subgraphGauge.id]),\n    }));\n  }\n\n  /**\n   * @summary Format raw onchain data fetched from multicalls.\n   */\n  private format(gaugeData: OnchainGaugeData): OnchainGaugeData {\n    return {\n      ...gaugeData,\n      rewardTokens: this.formatRewardTokens(gaugeData.rewardTokens),\n      claimableTokens: gaugeData.claimableTokens?.toString() || '0',\n      claimableRewards: this.formatClaimableRewards(gaugeData.claimableRewards),\n    };\n  }\n\n  /**\n   * @summary Add multicaller calls that fetch list of reward token addresses for each gauge\n   * in given array of gauges.\n   */\n  private callRewardTokens(subgraphGauges: SubgraphGauge[]) {\n    subgraphGauges.forEach(gauge => {\n      for (let i = 0; i < MAX_REWARD_TOKENS; i++) {\n        this.multicaller.call({\n          key: `${gauge.id}.rewardTokens[${i}]`,\n          address: gauge.id,\n          abi: ['function reward_tokens(uint256) view returns (address)'],\n          function: 'reward_tokens',\n          params: [i],\n        });\n      }\n    });\n  }\n\n  /**\n   * @summary Filter out zero addresses from reward tokens array.\n   * @description There can be up to 8 reward tokens for a gauge.\n   * The onchain call for reward tokens returns an array of length 8\n   * with each position filled with the zero address if a reward token\n   * has not been added.\n   */\n  private formatRewardTokens(rewardTokens: string[]): string[] {\n    return rewardTokens.filter(token => token !== AddressZero);\n  }\n\n  /**\n   * @summary Add multicaller calls that fetch the user's claimable BAL\n   * for each gauge in given array of gauges.\n   */\n  private callClaimableTokens(\n    subgraphGauges: SubgraphGauge[],\n    userAddress: string\n  ) {\n    subgraphGauges.forEach(gauge => {\n      this.multicaller.call({\n        key: `${gauge.id}.claimableTokens`,\n        address: gauge.id,\n        function: 'claimable_tokens',\n        abi: ['function claimable_tokens(address) view returns (uint256)'],\n        params: [userAddress],\n      });\n    });\n  }\n\n  /**\n   * @summary Add multicaller calls that fetch the claimable amounts for reward tokens,\n   * e.g. non BAL rewards on gauge.\n   */\n  private callClaimableRewards(\n    subgraphGauges: SubgraphGauge[],\n    userAddress: string,\n    gaugesDataMap: OnchainGaugeDataMap,\n    shouldUseRewardHelper: boolean\n  ) {\n    const methodName = shouldUseRewardHelper\n      ? 'getPendingRewards'\n      : 'claimable_reward';\n\n    subgraphGauges.forEach(gauge => {\n      gaugesDataMap[gauge.id].rewardTokens.forEach(rewardToken => {\n        if (rewardToken === AddressZero) return;\n\n        const params = shouldUseRewardHelper\n          ? [gauge.id, userAddress, rewardToken]\n          : [userAddress, rewardToken];\n\n        const contractAddress =\n          shouldUseRewardHelper &&\n          configService.network.addresses.gaugeRewardsHelper\n            ? configService.network.addresses.gaugeRewardsHelper\n            : gauge.id;\n\n        const abi = shouldUseRewardHelper\n          ? [\n              'function getPendingRewards(address,address,address) view returns (uint256)',\n            ]\n          : [\n              'function claimable_reward(address,address) view returns (uint256)',\n            ];\n\n        this.multicaller.call({\n          key: `${gauge.id}.claimableRewards.${rewardToken}`,\n          address: contractAddress,\n          function: methodName,\n          abi,\n          params,\n        });\n      });\n    });\n  }\n\n  /**\n   * @summary converts claimable reward values in map to strings from BigNumbers.\n   */\n  private formatClaimableRewards(\n    claimableRewards: Record<string, string>\n  ): Record<string, string> {\n    if (!claimableRewards) return {};\n\n    Object.keys(claimableRewards).forEach(rewardToken => {\n      if (!claimableRewards[rewardToken]) {\n        claimableRewards[rewardToken] = '0';\n      }\n      claimableRewards[rewardToken] = claimableRewards[rewardToken].toString();\n    });\n\n    return claimableRewards;\n  }\n}\n\nexport const gaugesDecorator = new GaugesDecorator();\n","import { computed, reactive, Ref } from 'vue';\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { gaugesDecorator } from '@/services/balancer/gauges/gauges.decorator';\nimport { Gauge, SubgraphGauge } from '@/services/balancer/gauges/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport useNetwork from '../useNetwork';\nimport { useTokens } from '@/providers/tokens.provider';\n\n/**\n * TYPES\n */\ntype QueryResponse = Gauge[] | null;\ntype QueryOptions = UseQueryOptions<QueryResponse>;\n\n/**\n * @summary Fetches onchain data for gauges list.\n */\nexport default function useGaugesDecorationQuery(\n  gauges: Ref<SubgraphGauge[] | undefined>,\n  options: QueryOptions = {}\n) {\n  /**\n   * COMPOSABLES\n   */\n  const { account, isWalletReady } = useWeb3();\n  const { networkId } = useNetwork();\n  const { injectTokens } = useTokens();\n\n  /**\n   * COMPUTED\n   */\n  const isQueryEnabled = computed(\n    () => gauges?.value && gauges.value?.length > 0 && isWalletReady.value\n  );\n\n  /**\n   * QUERY KEY\n   */\n  const queryKey = reactive(\n    QUERY_KEYS.Gauges.All.Onchain(gauges, account, networkId)\n  );\n\n  /**\n   * QUERY FUNCTION\n   */\n  const queryFn = async () => {\n    if (!gauges.value) return null;\n    const _gauges = await gaugesDecorator.decorate(gauges.value, account.value);\n    const tokens = _gauges.map(gauge => gauge.rewardTokens).flat();\n    await injectTokens(tokens);\n    return _gauges;\n  };\n\n  /**\n   * QUERY OPTIONS\n   */\n  const queryOptions = reactive({\n    enabled: isQueryEnabled,\n    ...options,\n  });\n\n  return useQuery<QueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","import { merge } from 'lodash';\n\nconst defaultArgs = {\n  first: 999,\n};\n\nconst defaultAttrs = {\n  id: true,\n  symbol: true,\n  poolId: true,\n  totalSupply: true,\n  isKilled: true,\n  factory: {\n    id: true,\n  },\n  isPreferentialGauge: true,\n  streamer: true,\n};\n\nexport const gaugeQueryBuilder = (\n  args = {},\n  attrs = {},\n  name: string | undefined = undefined\n) => ({\n  __name: name,\n  liquidityGauges: {\n    __args: merge({}, defaultArgs, args),\n    ...merge({}, defaultAttrs, attrs),\n  },\n});\n","import { GaugesSubgraphService } from '../../gauges-subgraph.service';\nimport { QueryBuilder, SubgraphGauge } from '../../types';\nimport { gaugeQueryBuilder } from './query';\n\nexport class GaugesEntity {\n  constructor(\n    private readonly service: GaugesSubgraphService,\n    private readonly query: QueryBuilder = gaugeQueryBuilder\n  ) {}\n\n  public async get(args = {}, attrs = {}): Promise<SubgraphGauge[]> {\n    const queryName = 'Gauges';\n    const query = this.query(args, attrs, queryName);\n    const data = await this.service.client.get(query);\n    return data.liquidityGauges;\n  }\n}\n","import axios from 'axios';\nimport { jsonToGraphQLQuery } from 'json-to-graphql-query';\n\nimport { configService } from '@/services/config/config.service';\nexport class GaugesSubgraphClient {\n  constructor(\n    public readonly url: string = configService.network.subgraphs.gauge\n  ) {}\n\n  public async get(query) {\n    try {\n      if (!this.url) {\n        return {\n          liquidityGauges: [],\n        };\n      }\n      const payload = this.payloadFor(query);\n      const {\n        data: { data },\n      } = await axios.post(this.url, payload);\n      return data;\n    } catch (error) {\n      console.error('GaugesSubgraphClient request failed', error);\n      throw error;\n    }\n  }\n\n  public payloadFor(query) {\n    return { query: jsonToGraphQLQuery({ query }) };\n  }\n}\n\nexport const gaugesSubgraphClient = new GaugesSubgraphClient();\n","import { GaugesEntity } from './entities/gauges/gauges.entity';\nimport { gaugesSubgraphClient } from './gauges-subgraph.client';\n\nexport class GaugesSubgraphService {\n  gauges: GaugesEntity;\n\n  constructor(readonly client = gaugesSubgraphClient) {\n    this.gauges = new GaugesEntity(this);\n  }\n}\n\nexport const gaugesSubgraphService = new GaugesSubgraphService();\n","import { reactive } from 'vue';\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { gaugesSubgraphService } from '@/services/balancer/gauges/gauges-subgraph.service';\nimport { SubgraphGauge } from '@/services/balancer/gauges/types';\n\n/**\n * TYPES\n */\ntype QueryResponse = SubgraphGauge[];\ntype QueryOptions = UseQueryOptions<QueryResponse>;\n\n/**\n * @summary Fetches guages list from subgraph\n */\nexport default function useGaugesQuery(options: QueryOptions = {}) {\n  /**\n   * QUERY KEY\n   */\n  const queryKey = reactive(QUERY_KEYS.Gauges.All.Static());\n\n  /**\n   * QUERY FUNCTION\n   */\n  const queryFn = async () => {\n    try {\n      return await gaugesSubgraphService.gauges.get();\n    } catch (error) {\n      console.error('Failed to fetch gauges', error);\n      return [];\n    }\n  };\n\n  /**\n   * QUERY OPTIONS\n   */\n  const queryOptions = reactive({\n    enabled: true,\n    ...options,\n  });\n\n  return useQuery<QueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","import BalancerMinterAbi from '@/lib/abi/BalancerMinter.json';\nimport { configService } from '@/services/config/config.service';\nimport { walletService as walletServiceInstance } from '@/services/web3/wallet.service';\n\nexport class BalancerMinter {\n  constructor(\n    private readonly abi = BalancerMinterAbi,\n    private readonly config = configService,\n    private readonly walletService = walletServiceInstance,\n    public readonly address = config.network.addresses.balancerMinter\n  ) {}\n\n  /**\n   * @summary Claim BAL rewards for gauge\n   */\n  async mint(gaugeAddress: string) {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'mint',\n      params: [gaugeAddress],\n    });\n  }\n\n  /**\n   * @summary Claim BAL rewards for multiple gauges in one transaction\n   */\n  async mintMany(gaugeAddresses: string[]) {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'mintMany',\n      params: [gaugeAddresses],\n    });\n  }\n}\n\nexport const balancerMinter = new BalancerMinter();\n","<script lang=\"ts\" setup>\nimport { getAddress } from '@ethersproject/address';\nimport { useI18n } from 'vue-i18n';\n\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\nimport useGaugesDecorationQuery from '@/composables/queries/useGaugesDecorationQuery';\nimport useGaugesQuery from '@/composables/queries/useGaugesQuery';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { balancerMinter } from '@/services/balancer/contracts/contracts/balancer-minter';\nimport { Gauge } from '@/services/balancer/gauges/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  gauges: Gauge[];\n  label: string;\n  amount: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { fNum } = useNumbers();\nconst { data: subgraphGauges } = useGaugesQuery();\nconst gaugesQuery = useGaugesDecorationQuery(subgraphGauges);\n\n/**\n * COMPUTED\n */\nconst gaugeAddresses = computed((): string[] =>\n  props.gauges.map(gauge => getAddress(gauge.id))\n);\n\n/**\n * METHODS\n */\nasync function claimTx() {\n  if (props.gauges.length === 1) {\n    return await balancerMinter.mint(gaugeAddresses.value[0]);\n  } else {\n    return await balancerMinter.mintMany(gaugeAddresses.value);\n  }\n}\n</script>\n\n<template>\n  <TxActionBtn\n    :label=\"label\"\n    color=\"gradient\"\n    size=\"sm\"\n    :actionFn=\"claimTx\"\n    :onConfirmFn=\"gaugesQuery.refetch\"\n    action=\"claim\"\n    :summary=\"`${t('claim')} ${fNum(props.amount, FNumFormats.token)} BAL`\"\n    :confirmingLabel=\"$t('claiming')\"\n  />\n</template>\n","<script lang=\"ts\" setup>\nimport { useI18n } from 'vue-i18n';\nimport { useRouter } from 'vue-router';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport ClaimBalBtn from '@/components/btns/ClaimBalBtn/ClaimBalBtn.vue';\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport {\n  isStableLike,\n  orderedPoolTokens,\n  orderedTokenAddresses,\n} from '@/composables/usePoolHelpers';\nimport { bnum } from '@/lib/utils';\nimport { GaugePool } from '@/composables/useClaimsData';\n\nimport { Gauge } from '@/services/balancer/gauges/types';\nimport PoolWarningTooltip from '@/components/pool/PoolWarningTooltip.vue';\nimport useNetwork from '@/composables/useNetwork';\nimport { poolMetadata } from '@/lib/config/metadata';\n\n/**\n * TYPES\n */\nexport type RewardRow = {\n  gauge: Gauge;\n  pool: GaugePool;\n  amount: string;\n  value: string;\n};\n\ntype Props = {\n  rewardsData: RewardRow[];\n  isLoading: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { fNum } = useNumbers();\nconst router = useRouter();\nconst { networkSlug } = useNetwork();\n\n/**\n * STATE\n */\nconst columns = ref<ColumnDefinition<RewardRow>[]>([\n  {\n    name: t('pools'),\n    id: 'icons',\n    accessor: 'icons',\n    Cell: 'iconsColumnCell',\n    width: 50,\n    noGrow: true,\n  },\n  {\n    name: '',\n    id: 'pills',\n    accessor: 'pills',\n    Cell: 'pillsColumnCell',\n    width: 350,\n  },\n  {\n    name: t('amount'),\n    id: 'amount',\n    align: 'right',\n    width: 150,\n    totalsCell: 'totalAmountCell',\n    accessor: ({ amount }) => `${fNum(amount, FNumFormats.token)} BAL`,\n  },\n  {\n    name: t('value'),\n    id: 'value',\n    align: 'right',\n    width: 150,\n    totalsCell: 'totalValueCell',\n    accessor: ({ value }) => fNum(value, FNumFormats.fiat),\n  },\n  {\n    name: '',\n    id: 'claim',\n    accessor: 'claim',\n    Cell: 'claimColumnCell',\n    totalsCell: 'claimTotalCell',\n    width: 150,\n  },\n]);\n\n/**\n * COMPUTED\n */\nconst allGauges = computed((): Gauge[] =>\n  props.rewardsData.map(row => row.gauge)\n);\n\nconst totalClaimAmount = computed((): string =>\n  props.rewardsData\n    .reduce((acc, row) => acc.plus(row.amount), bnum('0'))\n    .toString()\n);\n\nconst totalClaimValue = computed((): string =>\n  props.rewardsData\n    .reduce((acc, row) => acc.plus(row.value), bnum('0'))\n    .toString()\n);\n\n/**\n * METHODS\n */\nfunction redirectToPool({ pool }: { pool: GaugePool }) {\n  router.push({ name: 'pool', params: { id: pool.id, networkSlug } });\n}\n</script>\n\n<template>\n  <BalCard\n    shadow=\"lg\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <BalTable\n      :columns=\"columns\"\n      :data=\"rewardsData\"\n      :noResultsLabel=\"$t('noResultsTable.noBalIncentives')\"\n      :isLoading=\"isLoading\"\n      :onRowClick=\"redirectToPool\"\n      skeletonClass=\"h-24\"\n      :square=\"upToLargeBreakpoint\"\n    >\n      <template #iconsColumnCell=\"{ pool }\">\n        <div class=\"py-4 px-6\">\n          <BalAssetSet :addresses=\"orderedTokenAddresses(pool)\" :width=\"100\" />\n        </div>\n      </template>\n      <template #pillsColumnCell=\"{ pool }\">\n        <div class=\"flex items-center py-4 px-6\">\n          <div v-if=\"poolMetadata(pool.id)\" class=\"text-left\">\n            {{ poolMetadata(pool.id)!.name }}\n          </div>\n\n          <TokenPills\n            v-else\n            :tokens=\"orderedPoolTokens(pool, pool.tokens)\"\n            :isStablePool=\"isStableLike(pool.poolType)\"\n          />\n          <PoolWarningTooltip :pool=\"pool\" />\n        </div>\n      </template>\n      <template #claimColumnCell=\"{ gauge, amount }\">\n        <div class=\"py-4 px-6\">\n          <ClaimBalBtn\n            :label=\"$t('claim')\"\n            :gauges=\"[gauge]\"\n            :amount=\"amount\"\n          />\n        </div>\n      </template>\n      <template #totalAmountCell>\n        <div class=\"flex justify-end\">\n          {{ fNum(totalClaimAmount, FNumFormats.token) }} BAL\n        </div>\n      </template>\n      <template #totalValueCell>\n        <div class=\"flex justify-end\">\n          {{ fNum(totalClaimValue, FNumFormats.fiat) }}\n        </div>\n      </template>\n      <template #claimTotalCell>\n        <ClaimBalBtn\n          :label=\"$t('claimAll')\"\n          :gauges=\"allGauges\"\n          :amount=\"totalClaimAmount\"\n        />\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n","import { Contract } from '@ethersproject/contracts';\nimport { TransactionResponse } from '@ethersproject/providers';\n\nimport LiquidityGaugeRewardHelperAbi from '@/lib/abi/LiquidityGaugeHelperAbi.json';\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\nimport { walletService as walletServiceInstance } from '@/services/web3/wallet.service';\n\nexport class LiquidityGaugeRewardsHelper {\n  instance: Contract;\n\n  constructor(\n    public readonly address: string,\n    private readonly provider = rpcProviderService.jsonProvider,\n    private readonly abi = LiquidityGaugeRewardHelperAbi,\n    private readonly walletService = walletServiceInstance\n  ) {\n    this.instance = new Contract(this.address, this.abi, this.provider);\n  }\n\n  /**\n   * @summary Claim all user's reward tokens on L2\n   */\n  async claimRewardsForGauge(\n    gaugeAddress: string,\n    userAddress: string\n  ): Promise<TransactionResponse> {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'claimRewardsFromGauge',\n      params: [gaugeAddress, userAddress],\n    });\n  }\n}\n","<script lang=\"ts\" setup>\nimport { getAddress } from '@ethersproject/address';\nimport { useI18n } from 'vue-i18n';\n\nimport useGaugesDecorationQuery from '@/composables/queries/useGaugesDecorationQuery';\nimport useGaugesQuery from '@/composables/queries/useGaugesQuery';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { LiquidityGauge } from '@/services/balancer/contracts/contracts/liquidity-gauge';\nimport { LiquidityGaugeRewardsHelper } from '@/services/balancer/contracts/contracts/gauge-reward-helper';\nimport { Gauge } from '@/services/balancer/gauges/types';\n\nimport TxActionBtn from '../TxActionBtn/TxActionBtn.vue';\nimport { configService } from '@/services/config/config.service';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * TYPES\n */\ntype Props = {\n  gauge: Gauge;\n  fiatValue: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { fNum } = useNumbers();\nconst { data: subgraphGauges } = useGaugesQuery();\nconst { account } = useWeb3();\nconst gaugesQuery = useGaugesDecorationQuery(subgraphGauges);\n\n/**\n * STATE\n */\nconst gaugeAddress = getAddress(props.gauge.id);\nconst liquidityGaugeContract = new LiquidityGauge(gaugeAddress);\n\n/**\n * METHODS\n */\nfunction claimTx() {\n  if (props.gauge.streamer) {\n    const liquidityGaugeRewardsHelperContract = new LiquidityGaugeRewardsHelper(\n      configService.network.addresses.gaugeRewardsHelper || ''\n    );\n    return liquidityGaugeRewardsHelperContract.claimRewardsForGauge(\n      gaugeAddress,\n      account.value\n    );\n  }\n  return liquidityGaugeContract.claimRewards();\n}\n</script>\n\n<template>\n  <TxActionBtn\n    :label=\"t('claimAll')\"\n    color=\"gradient\"\n    size=\"sm\"\n    :actionFn=\"claimTx\"\n    :onConfirmFn=\"gaugesQuery.refetch\"\n    action=\"claim\"\n    :summary=\"`${t('claim')} ${fNum(props.fiatValue, FNumFormats.fiat)}`\"\n    :confirmingLabel=\"t('claiming')\"\n  />\n</template>\n","<script lang=\"ts\" setup>\nimport { formatUnits } from '@ethersproject/units';\nimport { computed, ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport ClaimRewardsBtn from '@/components/btns/ClaimRewardsBtn/ClaimRewardsBtn.vue';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { Gauge } from '@/services/balancer/gauges/types';\nimport { TokenInfo } from '@/types/TokenList';\n\n/**\n * TYPES\n */\ntype Props = {\n  gauge: Gauge;\n  isLoading: boolean;\n};\n\ntype Reward = {\n  token: TokenInfo;\n  amount: string;\n  value: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { fNum, toFiat } = useNumbers();\nconst { getToken } = useTokens();\n\n/**\n * STATE\n */\nconst columns = ref<ColumnDefinition<Reward>[]>([\n  {\n    name: t('incentiveToken'),\n    id: 'token',\n    accessor: 'token',\n    Cell: 'tokenColumnCell',\n    width: 475,\n    noGrow: true,\n  },\n  {\n    name: t('amount'),\n    id: 'amount',\n    align: 'right',\n    width: 150,\n    accessor: ({ amount, token }) =>\n      `${fNum(amount, FNumFormats.token)} ${token?.symbol}`,\n  },\n  {\n    name: t('value'),\n    id: 'value',\n    align: 'right',\n    width: 150,\n    totalsCell: 'totalValueCell',\n    accessor: ({ value }) => fNum(value, FNumFormats.fiat),\n  },\n  {\n    name: '',\n    id: 'claim',\n    accessor: 'claim',\n    Cell: 'claimColumnCell',\n    totalsCell: 'totalClaimCell',\n    width: 150,\n  },\n]);\n\n/**\n * COMPUTED\n */\nconst rewardsData = computed((): Reward[] => {\n  return props.gauge.rewardTokens\n    .map(tokenAddress => {\n      const token = getToken(tokenAddress);\n      const amount = formatUnits(\n        props.gauge.claimableRewards[tokenAddress],\n        token?.decimals || 18\n      );\n\n      if (\n        bnum(amount).isZero() ||\n        !token?.address ||\n        !token?.symbol ||\n        !token?.decimals\n      )\n        return null;\n\n      return {\n        token,\n        amount,\n        value: token?.address ? toFiat(amount, token?.address) : '0',\n      };\n    })\n    .filter(r => r !== null) as Reward[];\n});\n\nconst totalRewardValue = computed((): string => {\n  return rewardsData.value\n    .reduce((acc, reward) => acc.plus(reward.value), bnum('0'))\n    .toString();\n});\n</script>\n\n<template>\n  <BalCard\n    shadow=\"lg\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <BalTable\n      :columns=\"columns\"\n      :data=\"rewardsData\"\n      :isLoading=\"isLoading\"\n      skeletonClass=\"h-64\"\n      :square=\"upToLargeBreakpoint\"\n    >\n      <template #tokenColumnCell=\"{ token }\">\n        <div class=\"flex items-center py-4 px-6\">\n          <BalAsset :iconURI=\"token?.logoURI\" />\n          <span class=\"ml-2\">{{ token?.name }}</span>\n        </div>\n      </template>\n      <template #totalValueCell>\n        <div class=\"flex justify-end\">\n          {{ fNum(totalRewardValue, FNumFormats.fiat) }}\n        </div>\n      </template>\n      <template #totalClaimCell>\n        <div class=\"\">\n          <ClaimRewardsBtn :gauge=\"gauge\" :fiatValue=\"totalRewardValue\" />\n        </div>\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n","import { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { formatUnits } from '@ethersproject/units';\nimport { BigNumber, Contract } from 'ethers';\nimport { zipObject } from 'lodash';\n\nimport FeeDistributorABI from '@/lib/abi/FeeDistributor.json';\nimport FeeDistributorStaticABI from '@/lib/abi/FeeDistributorStatic.json';\nimport { configService } from '@/services/config/config.service';\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\nimport { BalanceMap } from '@/services/token/concerns/balances.concern';\nimport { walletService as walletServiceInstance } from '@/services/web3/wallet.service';\nimport { getOldMulticaller } from '@/dependencies/OldMulticaller';\n\nexport class FeeDistributor {\n  public claimableTokens: string[] = [\n    '0x7B50775383d3D6f0215A8F290f2C9e2eEBBEceb2', // bb-a-USD v1\n    '0xA13a9247ea42D743238089903570127DdA72fE44', // bb-a-USD v2\n    '0xfeBb0bbf162E64fb9D0dfe186E517d84C395f016', // bb-a-USD v3\n    '0xba100000625a3754423978a60c9317c58a424e3D', // BAL\n    '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC\n  ];\n\n  constructor(\n    public readonly address: string,\n    private readonly abi = FeeDistributorABI,\n    private readonly staticAbi = FeeDistributorStaticABI,\n    private readonly config = configService,\n    private readonly walletService = walletServiceInstance,\n    private readonly provider = rpcProviderService.jsonProvider\n  ) {}\n\n  /**\n   * @summary Instantiates a contract instance for the FeeDistributor.\n   * @returns Ethers Contract instance\n   */\n  public getInstance(): Contract {\n    return new Contract(this.address, this.abi, this.provider);\n  }\n\n  /**\n   * @summary Instantiates a multicaller instance of the FeeDistributor\n   */\n  public getMulticaller() {\n    const Multicaller = getOldMulticaller();\n    return new Multicaller(this.config.network.key, this.provider, this.abi);\n  }\n\n  /**\n   * @summary Get claimable protocol fee reward balances\n   * @descrition To get claimable balances we have to simulate a transaction to\n   * the claimTokens method by modifing the ABI to make it a view function.\n   */\n  public async getClaimableBalances(userAddress: string): Promise<BalanceMap> {\n    const balances = await this.walletService.txBuilder.contract.callStatic<\n      BigNumber[]\n    >({\n      contractAddress: this.address,\n      abi: this.staticAbi,\n      action: 'claimTokens',\n      params: [userAddress, this.claimableTokens],\n    });\n    const stringBalances = balances.map(balance => balance.toString());\n\n    return zipObject(this.claimableTokens, stringBalances);\n  }\n\n  /**\n   * @summary Claim all protocol reward token balances.\n   */\n  public async claimBalances(\n    userAddress: string\n  ): Promise<TransactionResponse> {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'claimTokens',\n      params: [userAddress, this.claimableTokens],\n    });\n  }\n\n  /**\n   * @summary Claim specific protocol reward token balance.\n   */\n  public async claimBalance(\n    userAddress: string,\n    tokenAddress: string\n  ): Promise<TransactionResponse> {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'claimToken',\n      params: [userAddress, tokenAddress],\n    });\n  }\n\n  /**\n   * @summary Get total token distribution in week.\n   * @param {string} token address to check distribution for, either bb-a-USD or BAL\n   * @param {number} timestamp unix timestamp of epoch to check, has to be exact\n   * epoch timestamp\n   */\n  public async getTokensDistributedInWeek(\n    token: string,\n    timestamp: number,\n    instance?: Contract\n  ): Promise<string> {\n    if (!instance) instance = this.getInstance();\n    const amount = await instance.getTokensDistributedInWeek(token, timestamp);\n\n    return formatUnits(amount, 18);\n  }\n\n  /**\n   * @summary Get total veBAL supply at epoch.\n   * @param {number} timestamp unix timestamp of epoch to check, has to be exact\n   * epoch timestamp\n   */\n  public async getTotalSupply(\n    timestamp: number,\n    instance?: Contract\n  ): Promise<string> {\n    if (!instance) instance = this.getInstance();\n    const amount = await instance.getTotalSupplyAtTimestamp(timestamp);\n\n    return formatUnits(amount, 18);\n  }\n}\n","import { computed, reactive } from 'vue';\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { FeeDistributor } from '@/services/balancer/contracts/contracts/fee-distributor';\nimport { configService } from '@/services/config/config.service';\nimport { BalanceMap } from '@/services/token/concerns/balances.concern';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport { networkId } from '../useNetwork';\n\n/**\n * TYPES\n */\nexport type ProtocolRewardsQueryResponse = {\n  v1?: BalanceMap;\n  v2?: BalanceMap;\n};\n\ntype QueryOptions = UseQueryOptions<ProtocolRewardsQueryResponse>;\n\n/**\n * SERVICES\n */\nconst feeDistributorV1 = new FeeDistributor(\n  configService.network.addresses.feeDistributorDeprecated\n);\nconst feeDistributorV2 = new FeeDistributor(\n  configService.network.addresses.feeDistributor\n);\n\nexport const networkHasProtocolRewards = computed<boolean>(\n  () =>\n    configService.network.addresses.feeDistributorDeprecated != '' ||\n    configService.network.addresses.feeDistributor != ''\n);\n\n/**\n * @summary Fetches claimable protocol reward balances.\n */\nexport default function useProtocolRewardsQuery(options: QueryOptions = {}) {\n  /**\n   * COMPOSABLES\n   */\n  const { account, isWalletReady } = useWeb3();\n\n  /**\n   * COMPUTED\n   */\n  const enabled = computed(\n    () =>\n      isWalletReady.value &&\n      account.value != null &&\n      networkHasProtocolRewards.value\n  );\n\n  /**\n   * QUERY KEY\n   */\n  const queryKey = reactive(QUERY_KEYS.Claims.Protocol(networkId, account));\n\n  /**\n   * QUERY FUNCTION\n   */\n  const queryFn = async () => {\n    try {\n      const [v1, v2] = await Promise.all([\n        feeDistributorV1.getClaimableBalances(account.value),\n        feeDistributorV2.getClaimableBalances(account.value),\n      ]);\n      return { v1, v2 };\n    } catch (error) {\n      console.error('Failed to fetch claimable protocol balances', error);\n      return {};\n    }\n  };\n\n  /**\n   * QUERY OPTIONS\n   */\n  const queryOptions = reactive({\n    enabled,\n    ...options,\n  });\n\n  return useQuery<ProtocolRewardsQueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","<script lang=\"ts\" setup>\nimport { useI18n } from 'vue-i18n';\n\nimport useProtocolRewardsQuery from '@/composables/queries/useProtocolRewardsQuery';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { FeeDistributor } from '@/services/balancer/contracts/contracts/fee-distributor';\nimport { configService } from '@/services/config/config.service';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport TxActionBtn from './TxActionBtn/TxActionBtn.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  tokenAddress?: string;\n  fiatValue: string;\n  deprecated?: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * SERVICES\n */\nconst feeDistributorV1 = new FeeDistributor(\n  configService.network.addresses.feeDistributorDeprecated\n);\nconst feeDistributorV2 = new FeeDistributor(\n  configService.network.addresses.feeDistributor\n);\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { fNum } = useNumbers();\nconst { account } = useWeb3();\nconst protocolRewardsQuery = useProtocolRewardsQuery();\n\n/**\n * METHODS\n */\nfunction claimTx() {\n  const feeDistributor = props.deprecated ? feeDistributorV1 : feeDistributorV2;\n\n  if (props.tokenAddress)\n    return feeDistributor.claimBalance(account.value, props.tokenAddress);\n  return feeDistributor.claimBalances(account.value);\n}\n</script>\n\n<template>\n  <TxActionBtn\n    :label=\"tokenAddress ? $t('claim') : $t('claimAll')\"\n    color=\"gradient\"\n    size=\"sm\"\n    :actionFn=\"claimTx\"\n    :onConfirmFn=\"protocolRewardsQuery.refetch\"\n    action=\"claim\"\n    :summary=\"`${t('claim')} ${fNum(fiatValue, FNumFormats.fiat)}`\"\n    :confirmingLabel=\"$t('claiming')\"\n    v-bind=\"$attrs\"\n  />\n</template>\n","<script lang=\"ts\" setup>\nimport { computed, ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport ClaimProtocolRewardsBtn from '@/components/btns/ClaimProtocolRewardsBtn.vue';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { bnum } from '@/lib/utils';\nimport { TokenInfo } from '@/types/TokenList';\n\n/**\n * TYPES\n */\nexport type ProtocolRewardRow = {\n  token: TokenInfo;\n  amount: string;\n  value: string;\n  deprecated?: boolean;\n};\n\ntype Props = {\n  rewardsData: ProtocolRewardRow[];\n  isLoading: boolean;\n  deprecated?: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  deprecated: false,\n});\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { fNum } = useNumbers();\n\n/**\n * STATE\n */\nconst columns = ref<ColumnDefinition<ProtocolRewardRow>[]>([\n  {\n    name: t('token'),\n    id: 'token',\n    accessor: 'token',\n    Cell: 'tokenColumnCell',\n    align: 'left',\n    width: 50,\n    noGrow: true,\n  },\n  {\n    name: '',\n    id: 'symbol',\n    accessor: 'symbol',\n    Cell: 'symbolColumnCell',\n    width: 350,\n  },\n  {\n    name: t('amount'),\n    id: 'amount',\n    align: 'right',\n    width: 150,\n    accessor: ({ amount }) => `${fNum(amount, FNumFormats.token)}`,\n  },\n  {\n    name: t('value'),\n    id: 'value',\n    align: 'right',\n    width: 150,\n    totalsCell: 'totalValueCell',\n    accessor: ({ value }) => fNum(value, FNumFormats.fiat),\n  },\n  {\n    name: '',\n    id: 'claim',\n    accessor: 'claim',\n    Cell: 'claimColumnCell',\n    totalsCell: 'claimTotalCell',\n    width: 150,\n  },\n]);\n\n/**\n * COMPUTED\n */\nconst totalClaimAmount = computed((): string =>\n  props.rewardsData\n    .reduce((acc, row) => acc.plus(row.amount), bnum('0'))\n    .toString()\n);\n\nconst totalClaimValue = computed((): string =>\n  props.rewardsData\n    .reduce((acc, row) => acc.plus(row.value), bnum('0'))\n    .toString()\n);\n\nconst hasClaimableBalance = computed((): boolean => {\n  if (props.isLoading) return true;\n  return bnum(totalClaimAmount.value).gt(0);\n});\n</script>\n\n<template>\n  <div>\n    <div\n      v-if=\"deprecated && hasClaimableBalance\"\n      class=\"px-4 xl:px-0 mt-4 mb-2\"\n    >\n      <h6 class=\"text-lg\">{{ $t('pastEarnings.title') }}</h6>\n      <p class=\"mb-3\">{{ $t('pastEarnings.description') }}</p>\n    </div>\n    <BalCard\n      v-if=\"hasClaimableBalance || !deprecated\"\n      shadow=\"lg\"\n      :square=\"upToLargeBreakpoint\"\n      :noBorder=\"upToLargeBreakpoint\"\n      noPad\n      class=\"mb-8\"\n    >\n      <BalTable\n        :columns=\"columns\"\n        :data=\"rewardsData\"\n        :noResultsLabel=\"$t('noResultsTable.noProtocolRevenue')\"\n        :isLoading=\"isLoading\"\n        skeletonClass=\"h-24\"\n        :square=\"upToLargeBreakpoint\"\n      >\n        <template #tokenColumnCell=\"{ token }\">\n          <div class=\"flex justify-center ml-4 xl:ml-0\">\n            <BalAsset :address=\"token.address\" />\n          </div>\n        </template>\n        <template #symbolColumnCell=\"{ token }\">\n          <div class=\"flex py-4 px-6\">\n            {{ token.symbol }}\n          </div>\n        </template>\n\n        <template #totalValueCell>\n          <div class=\"flex justify-end\">\n            {{ fNum(totalClaimValue, FNumFormats.fiat) }}\n          </div>\n        </template>\n        <template #claimColumnCell=\"{ token, amount, value }\">\n          <div class=\"py-4 px-6\">\n            <ClaimProtocolRewardsBtn\n              :tokenAddress=\"token.address\"\n              :fiatValue=\"value\"\n              :disabled=\"bnum(amount).eq(0)\"\n              :deprecated=\"deprecated\"\n            />\n          </div>\n        </template>\n        <template #claimTotalCell>\n          <ClaimProtocolRewardsBtn\n            :fiatValue=\"totalClaimValue\"\n            :disabled=\"!hasClaimableBalance\"\n            :deprecated=\"deprecated\"\n          />\n        </template>\n      </BalTable>\n    </BalCard>\n  </div>\n</template>\n","import { computed, reactive } from 'vue';\n\nimport { Gauge } from '@/services/balancer/gauges/types';\nimport { PoolToken } from '@/services/pool/types';\n\nimport useGaugesDecorationQuery from './queries/useGaugesDecorationQuery';\nimport useGaugesQuery from './queries/useGaugesQuery';\nimport useGraphQuery from './queries/useGraphQuery';\nimport useProtocolRewardsQuery, {\n  networkHasProtocolRewards,\n  ProtocolRewardsQueryResponse,\n} from './queries/useProtocolRewardsQuery';\nimport { isQueryLoading } from './queries/useQueryHelpers';\nimport { subgraphFallbackService } from '@/services/balancer/subgraph/subgraph-fallback.service';\nimport { PoolType } from '@feeless/sdk';\nimport QUERY_KEYS from '@/constants/queryKeys';\n\nexport type GaugePool = {\n  id: string;\n  address: string;\n  poolType: PoolType;\n  tokens: PoolToken[];\n  tokensList: string[];\n};\n\ntype GaugePoolQueryResponse = {\n  pools: GaugePool[];\n};\n\n/**\n * @summary Combines queries for fetching claims page gauges and associated pools.\n */\nexport function useClaimsData() {\n  const protocolRewardsQuery = useProtocolRewardsQuery();\n  const protocolRewards = computed(\n    (): ProtocolRewardsQueryResponse => protocolRewardsQuery.data.value || {}\n  );\n\n  // Fetch subgraph liquidity gauges\n  const subgraphGaugesQuery = useGaugesQuery();\n\n  // Decorate subgraph gauges with current account's claim data, e.g. reward values\n  const gaugesQuery = useGaugesDecorationQuery(subgraphGaugesQuery.data);\n  const gauges = computed((): Gauge[] => gaugesQuery.data.value || []);\n  const gaugePoolIds = computed((): string[] => {\n    return gauges.value.map(gauge => gauge.poolId).filter(id => !!id);\n  });\n\n  // Fetch pools associated with gauges\n  const gaugePoolQueryEnabled = computed(\n    (): boolean => gaugePoolIds?.value && gaugePoolIds.value?.length > 0\n  );\n  const gaugePoolQuery = useGraphQuery<GaugePoolQueryResponse>(\n    subgraphFallbackService.url.value,\n    QUERY_KEYS.Claims.GaugePools(gaugePoolIds),\n    () => ({\n      pools: {\n        __args: {\n          where: { id_in: gaugePoolIds.value },\n          first: 1000,\n        },\n        id: true,\n        address: true,\n        poolType: true,\n        tokensList: true,\n        tokens: {\n          address: true,\n          weight: true,\n        },\n      },\n    }),\n    reactive({ enabled: gaugePoolQueryEnabled })\n  );\n\n  /**\n   * COMPUTED\n   */\n  const gaugePools = computed(\n    (): GaugePool[] => gaugePoolQuery.data.value?.pools || []\n  );\n\n  const isLoading = computed(\n    (): boolean =>\n      gaugePools.value.length === 0 ||\n      isQueryLoading(gaugePoolQuery) ||\n      (networkHasProtocolRewards.value && isQueryLoading(protocolRewardsQuery))\n  );\n\n  return {\n    gauges,\n    gaugePools,\n    networkHasProtocolRewards,\n    protocolRewards,\n    isLoading,\n  };\n}\n","import { getAddress } from '@ethersproject/address';\nimport { computed } from 'vue';\n\nimport { TOKENS } from '@/constants/tokens';\nimport { isSameAddress } from '@/lib/utils';\nimport { TokenInfo } from '@/types/TokenList';\n\nimport { useTokens } from '@/providers/tokens.provider';\n\nconst balAddress = getAddress(TOKENS.Addresses.BAL);\n\nfunction isBalAddress(address: string): boolean {\n  return isSameAddress(address, balAddress);\n}\n\nexport function useTokenHelpers() {\n  /**\n   * COMPOSABLES\n   */\n  const { getToken, wrappedNativeAsset, nativeAsset } = useTokens();\n\n  /**\n   * COMPUTED\n   */\n  const balToken = computed((): TokenInfo => getToken(balAddress));\n\n  /**\n   * METHODS\n   */\n  function replaceWethWithEth(addresses: string[]): string[] {\n    return addresses.map(address => {\n      if (isSameAddress(address, wrappedNativeAsset.value.address)) {\n        return nativeAsset.address;\n      }\n      return address;\n    });\n  }\n\n  return {\n    // computed\n    balAddress,\n    balToken,\n    // methods\n    isBalAddress,\n    replaceWethWithEth,\n  };\n}\n","import { formatUnits } from '@ethersproject/units';\nimport { Contract } from 'ethers';\n\nimport { TOKENS } from '@/constants/tokens';\nimport StablePhantomAbi from '@/lib/abi/StablePhantomPool.json';\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\n\nexport class BBAUSDToken {\n  constructor(\n    private readonly abi = StablePhantomAbi,\n    public readonly address = TOKENS.Addresses.bbaUSDv2,\n    private readonly provider = rpcProviderService.jsonProvider\n  ) {}\n\n  /**\n   * @summary Instantiates a contract instance for the bb-a-USD token.\n   * @returns Ethers Contract instance\n   */\n  public getInstance(): Contract {\n    if (!this.address) throw new Error('No bb-a-USD address');\n    return new Contract(this.address, this.abi, this.provider);\n  }\n\n  /**\n   * @description This function returns the appreciation of one BPT relative to the underlying tokens.\n   * This starts at 1 when the pool is created and grows over time. Because of preminted BPT, it uses `\n   * getVirtualSupply` instead of `totalSupply`.\n   */\n  public async getRate(): Promise<string> {\n    const instance = this.getInstance();\n    const rate = await instance.getRate();\n\n    return formatUnits(rate, 18);\n  }\n}\n\nexport const bbAUSDToken = new BBAUSDToken();\n","<script lang=\"ts\" setup>\nimport { getAddress } from '@ethersproject/address';\nimport { formatUnits } from '@ethersproject/units';\nimport { computed, onBeforeMount, watch } from 'vue';\n\nimport HeroClaim from '@/components/contextual/pages/claim/HeroClaim.vue';\nimport BalClaimsTable, {\n  RewardRow,\n} from '@/components/tables/BalClaimsTable.vue';\nimport GaugeRewardsTable from '@/components/tables/GaugeRewardsTable.vue';\nimport ProtocolRewardsTable, {\n  ProtocolRewardRow,\n} from '@/components/tables/ProtocolRewardsTable.vue';\nimport { GaugePool, useClaimsData } from '@/composables/useClaimsData';\nimport useNumbers from '@/composables/useNumbers';\nimport { isStableLike } from '@/composables/usePoolHelpers';\nimport { useTokenHelpers } from '@/composables/useTokenHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { bbAUSDToken } from '@/services/balancer/contracts/contracts/bb-a-usd-token';\nimport { Gauge } from '@/services/balancer/gauges/types';\nimport { configService } from '@/services/config/config.service';\nimport { BalanceMap } from '@/services/token/concerns/balances.concern';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TOKENS } from '@/constants/tokens';\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\nimport { Network } from '@/lib/config/types';\nimport { poolMetadata } from '@/lib/config/metadata';\n\n/**\n * TYPES\n */\ntype GaugeTable = {\n  gauge: Gauge;\n  pool: GaugePool;\n};\n\n/**\n * COMPOSABLES\n */\nconst { injectTokens, injectPrices, getToken } = useTokens();\nconst { balToken } = useTokenHelpers();\nconst { toFiat, fNum } = useNumbers();\nconst { isWalletReady } = useWeb3();\nconst {\n  gauges,\n  gaugePools,\n  networkHasProtocolRewards,\n  protocolRewards,\n  isLoading: isClaimsLoading,\n} = useClaimsData();\n\n/**\n * STATE\n */\ninterface NetworkMetadata {\n  id: string;\n  name: string;\n  key: Network;\n}\n\nconst networks: NetworkMetadata[] = [\n  {\n    id: 'iota',\n    name: 'Iota',\n    key: Network.MAINNET,\n  }\n];\n\n/**\n * COMPUTED\n */\nconst loading = computed(\n  (): boolean => isClaimsLoading.value && isWalletReady.value\n);\n\nconst networkBtns = computed(() => {\n  return networks.filter(\n    network => network.key.toString() !== configService.network.key\n  );\n});\n\nconst balRewardsData = computed((): RewardRow[] => {\n  if (!isWalletReady.value) return [];\n  // Using reduce to filter out gauges we don't have corresponding pools for\n  return gauges.value.reduce<RewardRow[]>((arr, gauge) => {\n    const amount = formatUnits(gauge.claimableTokens, balToken.value.decimals);\n    const pool = gaugePools.value.find(pool => pool.id === gauge.poolId);\n\n    if (pool && bnum(amount).gt(0))\n      arr.push({\n        gauge,\n        pool,\n        amount,\n        value: toFiat(amount, balToken.value.address),\n      });\n\n    return arr;\n  }, []);\n});\n\nconst protocolRewardsData = computed((): ProtocolRewardRow[] => {\n  return formatRewardsData(protocolRewards.value.v2);\n});\n\n/**\n * The feeDistributor contract was updated and so we need to support the old\n * one so that users can claim their rewards. Eventually we should be able to\n * remove this.\n */\nconst protocolRewardsDataDeprecated = computed((): ProtocolRewardRow[] => {\n  return formatRewardsData(protocolRewards.value.v1);\n});\n\nconst gaugesWithRewards = computed((): Gauge[] => {\n  return gauges.value.filter(gauge => gauge.rewardTokens.length > 0);\n});\n\nconst gaugeTables = computed((): GaugeTable[] => {\n  // Only return gauges if we have a corresponding pool and rewards > 0\n  return gaugesWithRewards.value.reduce<GaugeTable[]>((arr, gauge) => {\n    const pool = gaugePools.value.find(pool => pool.id === gauge.poolId);\n    const totalRewardValue = Object.values(gauge.claimableRewards).reduce(\n      (acc, reward) => acc.plus(reward),\n      bnum(0)\n    );\n\n    if (pool && totalRewardValue.gt(0))\n      arr.push({\n        gauge,\n        pool,\n      });\n\n    return arr;\n  }, []);\n});\n\nconst networkHasBalClaiming = computed(\n  () => !!configService.network.addresses.balancerMinter\n);\n\n/**\n * METHODS\n */\nasync function injectRewardTokens(gauges: Gauge[]): Promise<void> {\n  const allRewardTokens = gauges.map(gauge => gauge.rewardTokens).flat();\n  return await injectTokens(allRewardTokens);\n}\n\nasync function injectPoolTokens(pools: GaugePool[]): Promise<void> {\n  const allPoolTokens = pools.map(pools => pools.tokensList).flat();\n  return await injectTokens(allPoolTokens);\n}\n\nfunction gaugeTitle(pool: GaugePool): string {\n  const metadata = poolMetadata(pool.id);\n  if (metadata?.name) return metadata.name;\n\n  const _tokens = pool.tokens.map(token => ({\n    ...token,\n    ...getToken(getAddress(token.address)),\n  }));\n\n  if (isStableLike(pool.poolType)) {\n    return Object.values(_tokens)\n      .map(token => token.symbol)\n      .join(' / ');\n  }\n\n  return Object.values(_tokens)\n    .map(\n      token =>\n        `${fNum(token.weight || '0', {\n          style: 'percent',\n          maximumFractionDigits: 0,\n        })} ${token.symbol}`\n    )\n    .join(' / ');\n}\n\nfunction formatRewardsData(data?: BalanceMap): ProtocolRewardRow[] {\n  if (!isWalletReady.value || !data) return [];\n\n  return Object.keys(data).map(tokenAddress => {\n    const token = getToken(tokenAddress);\n    const amount = formatUnits(data[tokenAddress], token.decimals);\n\n    return {\n      token,\n      amount,\n      value: toFiat(amount, tokenAddress),\n    };\n  });\n}\n\n/**\n * @summary Fetches bb-a-USD rate as an appoximation of USD price.\n */\nasync function getBBaUSDPrice() {\n  if (TOKENS.Addresses.bbaUSDv2) {\n    const approxPrice = bnum(await bbAUSDToken.getRate()).toNumber();\n    injectPrices({\n      [TOKENS.Addresses.bbaUSD as string]: approxPrice,\n      [TOKENS.Addresses.bbaUSDv2 as string]: approxPrice,\n    });\n  }\n}\n\n/**\n * WATCHERS\n */\nwatch(gauges, async newGauges => {\n  if (newGauges) await injectRewardTokens(newGauges);\n});\n\nwatch(gaugePools, async newPools => {\n  if (newPools) await injectPoolTokens(newPools);\n});\n\n/**\n * LIFECYCLE\n */\nonBeforeMount(async () => {\n  await getBBaUSDPrice();\n});\n</script>\n\n<template>\n  <div>\n    <HeroClaim\n      :title=\"$t('claimHero.title')\"\n      :description=\"$t('claimHero.description')\"\n    />\n    <div>\n      <div class=\"xl:container py-12 xl:px-4 xl:mx-auto\">\n        <h2 class=\"px-4 xl:px-0 font-body text-2xl font-semibold\">\n          {{ configService.network.chainName }} {{ $t('liquidityIncentives') }}\n        </h2>\n        <template v-if=\"networkHasBalClaiming\">\n          <div class=\"mb-16\">\n            <div class=\"px-4 xl:px-0\">\n              <div class=\"flex items-center mt-6 mb-2\">\n                <h3 class=\"inline-block mr-1.5 text-xl\">\n                  BAL {{ $t('incentives') }}\n                </h3>\n                <BalTooltip\n                  iconSize=\"xs\"\n                  textAlign=\"left\"\n                  class=\"relative top-px\"\n                  iconClass=\"text-secondary\"\n                  width=\"60\"\n                >\n                  {{ $t('claimPage.tips.BalIncentives') }}\n                </BalTooltip>\n              </div>\n            </div>\n            <BalClaimsTable\n              :rewardsData=\"balRewardsData\"\n              :isLoading=\"loading\"\n            />\n          </div>\n        </template>\n        <template v-if=\"networkHasProtocolRewards\">\n          <div class=\"mb-16\">\n            <h3 class=\"inline-block xl:px-0 pl-4 mt-8 mr-1.5 mb-3 text-xl\">\n              {{ $t('protocolIncentives') }}\n            </h3>\n            <BalTooltip\n              iconSize=\"xs\"\n              textAlign=\"left\"\n              class=\"relative top-px\"\n              iconClass=\"text-secondary\"\n              width=\"60\"\n            >\n              {{ $t('claimPage.tips.ProtocolAndVebal') }}\n            </BalTooltip>\n            <ProtocolRewardsTable\n              :rewardsData=\"protocolRewardsData\"\n              :isLoading=\"loading\"\n            />\n            <ProtocolRewardsTable\n              v-if=\"!loading\"\n              :rewardsData=\"protocolRewardsDataDeprecated\"\n              :isLoading=\"loading\"\n              deprecated\n            />\n          </div>\n        </template>\n        <div>\n          <h3 class=\"inline-block px-4 xl:px-0 mt-8 mr-1.5 text-xl\">\n            {{ $t('otherTokenIncentives') }}\n          </h3>\n          <BalTooltip\n            iconSize=\"xs\"\n            textAlign=\"left\"\n            class=\"relative top-px\"\n            iconClass=\"text-secondary\"\n            width=\"60\"\n          >\n            {{ $t('claimPage.tips.OtherIncentives') }}\n          </BalTooltip>\n        </div>\n        <BalLoadingBlock v-if=\"loading\" class=\"mt-6 mb-2 h-56\" />\n        <template v-if=\"!isClaimsLoading && gaugeTables.length > 0\">\n          <div v-for=\"{ gauge, pool } in gaugeTables\" :key=\"gauge.id\">\n            <div class=\"mb-16\">\n              <div class=\"flex px-4 xl:px-0 mt-4\">\n                <h4 class=\"mb-2 text-base\">\n                  {{ gaugeTitle(pool) }}\n                </h4>\n              </div>\n              <GaugeRewardsTable :gauge=\"gauge\" :isLoading=\"isClaimsLoading\" />\n            </div>\n          </div>\n        </template>\n        <BalBlankSlate\n          v-else-if=\"\n            (!isClaimsLoading && gaugeTables.length === 0) || !isWalletReady\n          \"\n          class=\"px-4 xl:px-0 mt-4 mb-16\"\n        >\n          {{ $t('noClaimableIncentives') }}\n        </BalBlankSlate>\n        <div class=\"px-4 xl:px-0 mb-16\">\n          <h2 class=\"mt-8 font-body text-2xl font-semibold\">\n            {{ $t('pages.claim.titles.incentivesOnOtherNetworks') }}\n          </h2>\n          <BalFlexGrid class=\"mt-4\" flexWrap>\n            <BalBtn\n              v-for=\"network in networkBtns\"\n              :key=\"network.id\"\n              tag=\"a\"\n              :href=\"`https://app.balancer.fi/#/${network.id}/claim`\"\n              color=\"white\"\n            >\n              <img\n                :src=\"buildNetworkIconURL(network.id as unknown as  Network)\"\n                :alt=\"network.id\"\n                class=\"mr-2 w-6 h-6 rounded-full shadow-sm\"\n              />\n              {{ $t('pages.claim.btns.claimOn') }} {{ network.name }}\n            </BalBtn>\n          </BalFlexGrid>\n          <BalLink\n            v-if=\"isWalletReady\"\n            tag=\"router-link\"\n            to=\"/ethereum/claim/legacy\"\n            class=\"flex items-center\"\n            >{{ $t('legacyClaims') }}\n            <BalIcon name=\"arrow-right\" size=\"sm\" class=\"mx-1\"\n          /></BalLink>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n"],"names":["_sfc_main$8","defineComponent","props","slots","spacing","computed","flexClasses","gridItems","slotItem","h","_imports_0","_imports_1","_imports_2","_imports_3","MAX_REWARD_TOKENS","GaugesDecorator","__publicField","multicaller","getMulticaller","subgraphGauges","userAddress","gaugesDataMap","nativeGauges","gauge","oldL2Gauges","subgraphGauge","gaugeData","_a","i","rewardTokens","token","AddressZero","shouldUseRewardHelper","methodName","rewardToken","params","contractAddress","configService","abi","claimableRewards","gaugesDecorator","useGaugesDecorationQuery","gauges","options","account","isWalletReady","useWeb3","networkId","useNetwork","injectTokens","useTokens","isQueryEnabled","queryKey","reactive","QUERY_KEYS","queryFn","_gauges","tokens","queryOptions","useQuery","defaultArgs","defaultAttrs","gaugeQueryBuilder","args","attrs","name","merge","GaugesEntity","service","query","queryName","GaugesSubgraphClient","url","payload","data","axios","error","jsonToGraphQLQuery","gaugesSubgraphClient","GaugesSubgraphService","client","gaugesSubgraphService","useGaugesQuery","BalancerMinter","BalancerMinterAbi","config","walletService","walletServiceInstance","address","gaugeAddress","gaugeAddresses","balancerMinter","__props","useI18n","fNum","useNumbers","gaugesQuery","getAddress","claimTx","upToLargeBreakpoint","useBreakpoints","router","useRouter","networkSlug","columns","ref","amount","FNumFormats","value","allGauges","row","totalClaimAmount","acc","bnum","totalClaimValue","redirectToPool","pool","LiquidityGaugeRewardsHelper","provider","rpcProviderService","LiquidityGaugeRewardHelperAbi","Contract","liquidityGaugeContract","LiquidityGauge","toFiat","getToken","rewardsData","tokenAddress","formatUnits","r","totalRewardValue","reward","FeeDistributor","FeeDistributorABI","staticAbi","FeeDistributorStaticABI","Multicaller","getOldMulticaller","stringBalances","balance","zipObject","timestamp","instance","feeDistributorV1","feeDistributorV2","networkHasProtocolRewards","useProtocolRewardsQuery","enabled","v1","v2","t","protocolRewardsQuery","feeDistributor","hasClaimableBalance","useClaimsData","protocolRewards","subgraphGaugesQuery","gaugePoolIds","id","gaugePoolQueryEnabled","gaugePoolQuery","useGraphQuery","subgraphFallbackService","gaugePools","isLoading","isQueryLoading","balAddress","TOKENS","isBalAddress","isSameAddress","useTokenHelpers","wrappedNativeAsset","nativeAsset","balToken","replaceWethWithEth","addresses","BBAUSDToken","StablePhantomAbi","rate","bbAUSDToken","injectPrices","isClaimsLoading","networks","Network","loading","networkBtns","network","balRewardsData","arr","pool2","protocolRewardsData","formatRewardsData","protocolRewardsDataDeprecated","gaugesWithRewards","gaugeTables","networkHasBalClaiming","injectRewardTokens","gauges2","allRewardTokens","injectPoolTokens","pools","allPoolTokens","pools2","gaugeTitle","metadata","poolMetadata","_tokens","isStableLike","getBBaUSDPrice","approxPrice","watch","newGauges","newPools","onBeforeMount"],"mappings":"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"}