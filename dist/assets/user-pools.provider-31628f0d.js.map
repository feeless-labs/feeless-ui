{"version":3,"file":"user-pools.provider-31628f0d.js","sources":["../../src/composables/useLock.ts","../../src/services/balancer/contracts/contracts/gauge-checkpointer.ts","../../src/providers/local/user-staking.provider.ts","../../src/providers/local/user-pools.provider.ts"],"sourcesContent":["import { Pool } from '@/services/pool/types';\nimport { TokenInfo } from '@/types/TokenList';\n\nimport { useTokens } from '@/providers/tokens.provider';\nimport { useUserData } from '@/providers/user-data.provider';\nimport usePoolQuery from './queries/usePoolQuery';\nimport { fiatValueOf } from './usePoolHelpers';\nimport useVeBal, { isVeBalSupported } from './useVeBAL';\nimport { bnum } from '@/lib/utils';\n\ninterface Options {\n  enabled?: boolean;\n}\nexport function useLock({ enabled = true }: Options = {}) {\n  /**\n   * COMPOSABLES\n   */\n  const { lockablePoolId } = useVeBal();\n  const { getToken, balanceFor } = useTokens();\n\n  /**\n   * QUERIES\n   */\n  const shouldFetchLockPool = computed(\n    (): boolean => isVeBalSupported.value && enabled\n  );\n  const lockPoolQuery = usePoolQuery(\n    lockablePoolId.value as string,\n    shouldFetchLockPool\n  );\n  const { lockQuery } = useUserData();\n\n  /**\n   * COMPUTED\n   */\n  const isLoadingLockPool = computed(\n    (): boolean => lockPoolQuery.isLoading.value\n  );\n\n  const isLoadingLockInfo = computed((): boolean => lockQuery.isLoading.value);\n\n  const isLoadingLock = computed(\n    (): boolean => isLoadingLockPool.value || isLoadingLockInfo.value\n  );\n\n  const lockPool = computed<Pool | undefined>(() => lockPoolQuery.data.value);\n\n  const lockPoolToken = computed((): TokenInfo | null =>\n    lockPool.value != null ? getToken(lockPool.value.address) : null\n  );\n\n  const lock = computed(() => lockQuery.data.value);\n\n  // Total fiat value of locked tokens.\n  const totalLockedValue = computed((): string =>\n    lockPool.value && lock.value?.hasExistingLock\n      ? fiatValueOf(lockPool.value, lock.value.lockedAmount)\n      : '0'\n  );\n\n  // Total locked shares (veBAL).\n  const totalLockedShares = computed((): string =>\n    lockPool.value && lock.value?.hasExistingLock\n      ? lock.value.lockedAmount\n      : '0'\n  );\n\n  const bptPrice = computed(() => {\n    if (!lockPool.value) return bnum(0);\n    return bnum(lockPool.value.totalLiquidity).div(lockPool.value.totalShares);\n  });\n\n  const bptBalance = computed(() => {\n    if (!lockPool.value) return bnum(0);\n    return balanceFor(lockPool.value.address);\n  });\n\n  const fiatTotal = computed(() =>\n    bptPrice.value.times(bptBalance.value).toString()\n  );\n\n  return {\n    isLoadingLockPool,\n    isLoadingLockInfo,\n    isLoadingLock,\n    lockPoolToken,\n    lockPool,\n    lock,\n    totalLockedValue,\n    totalLockedShares,\n    bptBalance,\n    fiatTotal,\n  };\n}\n","import GaugeCheckpointerAbi from '@/lib/abi/GaugeCheckpointer.json';\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\n\nimport { Contract } from '@ethersproject/contracts';\nimport { JsonRpcSigner } from '@ethersproject/providers';\n\nexport class GaugeCheckpointer {\n  instance: Contract;\n\n  constructor(\n    public readonly address: string,\n    private readonly provider = rpcProviderService.jsonProvider,\n    private readonly abi = GaugeCheckpointerAbi\n  ) {\n    this.instance = new Contract(this.address, this.abi, this.provider);\n  }\n\n  public async checkpoint(payload: {\n    signer: JsonRpcSigner;\n    userAddress: string;\n    gauges: string[];\n  }) {\n    const { gauges, signer, userAddress } = payload;\n    const txBuilder = new TransactionBuilder(signer);\n\n    return await txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'gaugeCheckpoint',\n      params: [userAddress, gauges],\n    });\n  }\n}\n","/**\n * Provides all user staking related data.\n */\nimport usePoolsQuery from '@/composables/queries/usePoolsQuery';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport { fiatValueOf } from '@/composables/usePoolHelpers';\nimport symbolKeys from '@/constants/symbol.keys';\nimport { Pool } from '@/services/pool/types';\nimport { computed, InjectionKey, provide } from 'vue';\nimport { safeInject } from '../inject';\nimport { useUserData } from '../user-data.provider';\nimport { configService } from '@/services/config/config.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { GaugeCheckpointer } from '@/services/balancer/contracts/contracts/gauge-checkpointer';\nimport { LiquidityGauge } from '@/services/balancer/contracts/contracts/liquidity-gauge';\n\nconst provider = () => {\n  /**\n   * COMPOSABLES\n   */\n  const { userGaugeSharesQuery, userBoostsQuery, stakedSharesQuery } =\n    useUserData();\n  const { getSigner, account } = useWeb3();\n  /**\n   * COMPUTED\n   */\n  const { data: userGaugeShares } = userGaugeSharesQuery;\n  const { data: poolBoostsMap } = userBoostsQuery;\n  const { data: stakedShares } = stakedSharesQuery;\n\n  // Array of all the pools a user has staked BPT for.\n  const stakedPoolIds = computed((): string[] => {\n    if (!userGaugeShares.value) return [];\n    return userGaugeShares.value.map(gaugeShare => gaugeShare.gauge.poolId);\n  });\n\n  const isPoolsQueryEnabled = computed(\n    (): boolean => stakedPoolIds.value.length > 0\n  );\n\n  const hasNonPrefGaugesPoolsAddresses = computed(() => {\n    const arr = userGaugeShares.value?.reduce((acc: string[], gauge) => {\n      if (!gauge.gauge.isPreferentialGauge && !gauge.gauge.isKilled) {\n        acc.push(gauge.gauge.poolAddress);\n      }\n      return acc;\n    }, []);\n\n    return arr;\n  });\n\n  const filterOptions = computed(() => ({\n    poolIds: stakedPoolIds.value,\n    pageSize: 999,\n  }));\n\n  const stakedPoolsQuery = usePoolsQuery(filterOptions, {\n    enabled: isPoolsQueryEnabled,\n  });\n\n  const { data: _stakedPools, refetch: refetchStakedPools } = stakedPoolsQuery;\n\n  // Pool records for all the pools where a user has staked BPT.\n  const stakedPools = computed(\n    (): Pool[] => _stakedPools.value?.pages[0].pools || []\n  );\n\n  // Total fiat value of staked shares.\n  const totalStakedValue = computed((): string => {\n    return Object.keys(stakedShares.value || {})\n      .reduce((acc, poolId) => {\n        const pool = stakedPools.value.find(pool => pool.id === poolId);\n        if (!pool) return acc;\n        const bpt = stakedShares?.value?.[poolId] || '0';\n        return acc + Number(fiatValueOf(pool, bpt));\n      }, 0)\n      .toString();\n  });\n\n  // Is loading any user staking data?\n  const isLoading = computed((): boolean => {\n    return (\n      isQueryLoading(userGaugeSharesQuery) ||\n      isQueryLoading(stakedSharesQuery) ||\n      isQueryLoading(userBoostsQuery) ||\n      isQueryLoading(stakedPoolsQuery)\n    );\n  });\n\n  /**\n   * Gets a user's staked BPT balance for a given pool.\n   *\n   * @param {string} poolId - The pool to get the staked balance for.\n   * @returns The staked balance.\n   */\n  function stakedSharesFor(poolId: string): string {\n    return stakedShares?.value?.[poolId] || '0';\n  }\n\n  async function checkpointGauge(gaugeAddress: string) {\n    const gaugeContract = new LiquidityGauge(gaugeAddress);\n\n    const signer = getSigner();\n\n    return gaugeContract.checkpointUser({\n      signer,\n      userAddress: account.value,\n    });\n  }\n\n  async function checkpointAllGauges(gauges: string[]) {\n    const contractAddress = configService.network.addresses.gaugeCheckpointer;\n    if (!contractAddress) throw new Error('No contract address found');\n    const signer = getSigner();\n    const gaugeCheckpointerContract = new GaugeCheckpointer(contractAddress);\n\n    return gaugeCheckpointerContract.checkpoint({\n      gauges,\n      signer,\n      userAddress: account.value,\n    });\n  }\n\n  return {\n    userGaugeShares,\n    stakedPools,\n    stakedShares,\n    poolBoostsMap,\n    totalStakedValue,\n    isLoading,\n    refetchStakedPools,\n    stakedSharesFor,\n    hasNonPrefGaugesPoolsAddresses,\n    checkpointGauge,\n    checkpointAllGauges,\n  };\n};\n\n/**\n * Provide setup: response type + symbol.\n */\nexport type UserStakingResponse = ReturnType<typeof provider>;\nexport const UserStakingProviderSymbol: InjectionKey<UserStakingResponse> =\n  Symbol(symbolKeys.Providers.UserStaking);\n\nexport function provideUserStaking(): UserStakingResponse {\n  const _provider = provider();\n  provide(UserStakingProviderSymbol, _provider);\n  return _provider;\n}\n\nexport function useUserStaking(): UserStakingResponse {\n  return safeInject(UserStakingProviderSymbol);\n}\n","import { InjectionKey } from 'vue';\nimport { UserStakingResponse } from '@/providers/local/user-staking.provider';\nimport { useUserData } from '@/providers/user-data.provider';\nimport { Pool, PoolType, allLinearTypes } from '@/services/pool/types';\nimport { bnSum } from '@/lib/utils';\nimport symbolKeys from '@/constants/symbol.keys';\nimport { safeInject } from '../inject';\nimport { useLock } from '@/composables/useLock';\nimport usePoolsQuery from '@/composables/queries/usePoolsQuery';\nimport { fiatValueOf } from '@/composables/usePoolHelpers';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport { isVeBalSupported } from '@/composables/useVeBAL';\nimport { useTokens } from '../tokens.provider';\nimport { POOLS } from '@/constants/pools';\n\n/**\n * Provides user pools data. Primarily for the portfolio page.\n */\nexport const provider = (userStaking: UserStakingResponse) => {\n  const {\n    stakedPools,\n    totalStakedValue,\n    refetchStakedPools,\n    isLoading: isStakedDataLoading,\n  } = userStaking;\n\n  // Access user data fetched on wallet connection/change.\n  const { userPoolSharesQuery, lockQuery } = useUserData();\n  const { data: userPoolShares, refetch: refetchUserPoolShares } =\n    userPoolSharesQuery;\n\n  const { totalLockedValue } = useLock();\n  const { injectTokens } = useTokens();\n\n  // Array of pool IDs that the user hasn't staked.\n  const unstakedPoolIds = computed((): string[] =>\n    Object.keys(userPoolShares.value || {})\n  );\n\n  // Only fetch unstaked pools if the user has pool shares.\n  const isPoolsQueryEnabled = computed(\n    (): boolean => unstakedPoolIds.value.length > 0\n  );\n\n  // Fetch pools that the user hasn't staked.\n  const filterOptions = computed(() => ({\n    poolIds: unstakedPoolIds.value,\n    pageSize: 999,\n    poolTypes: [...POOLS.IncludedPoolTypes, ...allLinearTypes] as PoolType[],\n  }));\n  const unstakedPoolsQuery = usePoolsQuery(filterOptions, {\n    enabled: isPoolsQueryEnabled,\n  });\n  const { data: _unstakedPools } = unstakedPoolsQuery;\n\n  // Helper property to drill down to first page of results.\n  const unstakedPools = computed(\n    (): Pool[] => _unstakedPools.value?.pages[0].pools || []\n  );\n\n  // Combine staked and unstaked pools.\n  const userPools = computed((): Pool[] => [\n    ...unstakedPools.value,\n    ...stakedPools.value,\n  ]);\n\n  // Total fiat value of unstaked positions.\n  const totalUnstakedValue = computed((): string => {\n    return Object.keys(userPoolShares.value || {})\n      .reduce((acc, poolId) => {\n        const pool = userPools.value.find(pool => pool.id === poolId);\n        if (!pool) return acc;\n        const bpt = userPoolShares?.value?.[poolId] || '0';\n        return acc + Number(fiatValueOf(pool, bpt));\n      }, 0)\n      .toString();\n  });\n\n  // Total portfolio fiat value, including staked, unstaked, and locked positions.\n  const totalFiatValue = computed((): string =>\n    bnSum([\n      totalUnstakedValue.value,\n      totalStakedValue.value,\n      totalLockedValue.value,\n    ]).toString()\n  );\n\n  const isLoading = computed(\n    (): boolean =>\n      isStakedDataLoading.value ||\n      isQueryLoading(userPoolSharesQuery) ||\n      isQueryLoading(unstakedPoolsQuery) ||\n      (isVeBalSupported.value && isQueryLoading(lockQuery))\n  );\n\n  // Trigger refetch of queries for staked and unstaked pools.\n  async function refetchAllUserPools() {\n    await Promise.all([refetchUserPoolShares(), refetchStakedPools()]);\n  }\n\n  // Whenever new pools show up in the user pools array, inject their tokens so\n  // that we can add the user's balance to the token registry.\n  watch(userPools, newUserPools => {\n    injectTokens(newUserPools.map(pool => pool.address));\n  });\n\n  return {\n    stakedPools,\n    unstakedPools,\n    userPoolShares,\n    totalFiatValue,\n    isLoading,\n    refetchAllUserPools,\n  };\n};\n\nexport type UserPoolsProviderResponse = ReturnType<typeof provider>;\nexport const UserPoolsProviderSymbol: InjectionKey<UserPoolsProviderResponse> =\n  Symbol(symbolKeys.Providers.UserPools);\n\nexport function providerUserPools(userStaking: UserStakingResponse) {\n  provide(UserPoolsProviderSymbol, provider(userStaking));\n}\n\nexport function useUserPools(): UserPoolsProviderResponse {\n  return safeInject(UserPoolsProviderSymbol);\n}\n"],"names":["useLock","enabled","lockablePoolId","useVeBal","getToken","balanceFor","useTokens","shouldFetchLockPool","computed","isVeBalSupported","lockPoolQuery","usePoolQuery","lockQuery","useUserData","isLoadingLockPool","isLoadingLockInfo","isLoadingLock","lockPool","lockPoolToken","lock","totalLockedValue","_a","fiatValueOf","totalLockedShares","bptPrice","bnum","bptBalance","fiatTotal","GaugeCheckpointer","address","provider","rpcProviderService","abi","GaugeCheckpointerAbi","__publicField","Contract","payload","gauges","signer","userAddress","TransactionBuilder","userGaugeSharesQuery","userBoostsQuery","stakedSharesQuery","getSigner","account","useWeb3","userGaugeShares","poolBoostsMap","stakedShares","stakedPoolIds","gaugeShare","isPoolsQueryEnabled","hasNonPrefGaugesPoolsAddresses","acc","gauge","filterOptions","stakedPoolsQuery","usePoolsQuery","_stakedPools","refetchStakedPools","stakedPools","totalStakedValue","poolId","pool","bpt","isLoading","isQueryLoading","stakedSharesFor","checkpointGauge","gaugeAddress","gaugeContract","LiquidityGauge","checkpointAllGauges","contractAddress","configService","UserStakingProviderSymbol","symbolKeys","provideUserStaking","_provider","provide","useUserStaking","safeInject","userStaking","isStakedDataLoading","userPoolSharesQuery","userPoolShares","refetchUserPoolShares","injectTokens","unstakedPoolIds","POOLS","allLinearTypes","unstakedPoolsQuery","_unstakedPools","unstakedPools","userPools","totalUnstakedValue","pool2","totalFiatValue","bnSum","refetchAllUserPools","watch","newUserPools","UserPoolsProviderSymbol","providerUserPools","useUserPools"],"mappings":"iaAaO,SAAAA,GAAA,CAAA,QAAAC,EAAA,EAAA,EAAA,CAAA,EAAA,CAIL,KAAA,CAAA,eAAAC,GAAAC,IACA,CAAA,SAAAC,EAAA,WAAAC,CAAA,EAAAC,EAAA,EAKAC,EAAAC,EAA4B,IAAAC,EAAA,OAAAR,CACe,EAE3CS,EAAAC,GAAsBT,EAAA,MACLK,CACf,EAEF,CAAA,UAAAK,GAAAC,IAKAC,EAAAN,EAA0B,IAAAE,EAAA,UAAA,KACe,EAGzCK,EAAAP,EAAA,IAAAI,EAAA,UAAA,KAAA,EAEAI,EAAAR,EAAsB,IAAAM,EAAA,OAAAC,EAAA,KACwC,EAG9DE,EAAAT,EAAA,IAAAE,EAAA,KAAA,KAAA,EAEAQ,EAAAV,EAAsB,IAAAS,EAAA,OAAA,KAAAb,EAAAa,EAAA,MAAA,OAAA,EAAA,IACwC,EAG9DE,EAAAX,EAAA,IAAAI,EAAA,KAAA,KAAA,EAGAQ,EAAAZ,EAAyB,IAAA,OAAA,OAAAS,EAAA,SAAAI,EAAAF,EAAA,QAAA,MAAAE,EAAA,iBAAAC,EAAAL,EAAA,MAAAE,EAAA,MAAA,YAAA,EAAA,IAGnB,EAINI,EAAAf,EAA0B,WAAA,OAAAS,EAAA,SAAAI,EAAAF,EAAA,QAAA,MAAAE,EAAA,iBAAAF,EAAA,MAAA,aAAA,IAGpB,EAGNK,EAAAhB,EAAA,IACES,EAAA,MACAQ,EAAAR,EAAA,MAAA,cAAA,EAAA,IAAAA,EAAA,MAAA,WAAA,EADqBQ,EAAA,CAAA,CACoD,EAG3EC,EAAAlB,EAAA,IACES,EAAA,MACAZ,EAAAY,EAAA,MAAA,OAAA,EADqBQ,EAAA,CAAA,CACmB,EAG1CE,EAAAnB,EAAkB,IAAAgB,EAAA,MAAA,MAAAE,EAAA,KAAA,EAAA,SAAA,CACgC,EAGlD,MAAA,CAAO,kBAAAZ,EACL,kBAAAC,EACA,cAAAC,EACA,cAAAE,EACA,SAAAD,EACA,KAAAE,EACA,iBAAAC,EACA,kBAAAG,EACA,WAAAG,EACA,UAAAC,CACA,CAEJ,u8iBCtFO,MAAMC,EAAkB,CAG7B,YACkBC,EACCC,EAAWC,EAAmB,aAC9BC,EAAMC,GACvB,CANFC,EAAA,iBAGkB,KAAA,QAAAL,EACC,KAAA,SAAAC,EACA,KAAA,IAAAE,EAEZ,KAAA,SAAW,IAAIG,EAAS,KAAK,QAAS,KAAK,IAAK,KAAK,QAAQ,CACpE,CAEA,MAAa,WAAWC,EAIrB,CACD,KAAM,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,YAAAC,CAAA,EAAgBH,EAGjC,OAAA,MAFW,IAAII,EAAmBF,CAAM,EAExB,SAAS,gBAAgB,CAC9C,gBAAiB,KAAK,QACtB,IAAK,KAAK,IACV,OAAQ,kBACR,OAAQ,CAACC,EAAaF,CAAM,CAAA,CAC7B,CACH,CACF,CCjBA,MAAMP,GAAW,IAAM,CAIrB,KAAM,CAAE,qBAAAW,EAAsB,gBAAAC,EAAiB,kBAAAC,GAC7C9B,EAAY,EACR,CAAE,UAAA+B,EAAW,QAAAC,CAAQ,EAAIC,EAAQ,EAIjC,CAAE,KAAMC,CAAoB,EAAAN,EAC5B,CAAE,KAAMO,CAAkB,EAAAN,EAC1B,CAAE,KAAMO,CAAiB,EAAAN,EAGzBO,EAAgB1C,EAAS,IACxBuC,EAAgB,MACdA,EAAgB,MAAM,IAAkBI,GAAAA,EAAW,MAAM,MAAM,EADnC,EAEpC,EAEKC,EAAsB5C,EAC1B,IAAe0C,EAAc,MAAM,OAAS,CAAA,EAGxCG,EAAiC7C,EAAS,IAAM,OAQ7C,OAPKa,EAAA0B,EAAgB,QAAhB,YAAA1B,EAAuB,OAAO,CAACiC,EAAeC,KACpD,CAACA,EAAM,MAAM,qBAAuB,CAACA,EAAM,MAAM,UAC/CD,EAAA,KAAKC,EAAM,MAAM,WAAW,EAE3BD,GACN,CAAE,EAEE,CACR,EAEKE,EAAgBhD,EAAS,KAAO,CACpC,QAAS0C,EAAc,MACvB,SAAU,GACV,EAAA,EAEIO,EAAmBC,EAAcF,EAAe,CACpD,QAASJ,CAAA,CACV,EAEK,CAAE,KAAMO,EAAc,QAASC,GAAuBH,EAGtDI,EAAcrD,EAClB,IAAc,OAAA,QAAAa,EAAAsC,EAAa,QAAb,YAAAtC,EAAoB,MAAM,GAAG,QAAS,CAAC,EAAA,EAIjDyC,EAAmBtD,EAAS,IACzB,OAAO,KAAKyC,EAAa,OAAS,CAAE,CAAA,EACxC,OAAO,CAACK,EAAKS,IAAW,OACjB,MAAAC,EAAOH,EAAY,MAAM,KAAKG,GAAQA,EAAK,KAAOD,CAAM,EAC9D,GAAI,CAACC,EAAa,OAAAV,EAClB,MAAMW,IAAM5C,EAAA4B,GAAA,YAAAA,EAAc,QAAd,YAAA5B,EAAsB0C,KAAW,IAC7C,OAAOT,EAAM,OAAOhC,EAAY0C,EAAMC,CAAG,CAAC,CAAA,EACzC,CAAC,EACH,UACJ,EAGKC,EAAY1D,EAAS,IAEvB2D,EAAe1B,CAAoB,GACnC0B,EAAexB,CAAiB,GAChCwB,EAAezB,CAAe,GAC9ByB,EAAeV,CAAgB,CAElC,EAQD,SAASW,EAAgBL,EAAwB,OACxC,QAAA1C,EAAA4B,GAAA,YAAAA,EAAc,QAAd,YAAA5B,EAAsB0C,KAAW,GAC1C,CAEA,eAAeM,EAAgBC,EAAsB,CAC7C,MAAAC,EAAgB,IAAIC,EAAeF,CAAY,EAE/ChC,EAASM,IAEf,OAAO2B,EAAc,eAAe,CAClC,OAAAjC,EACA,YAAaO,EAAQ,KAAA,CACtB,CACH,CAEA,eAAe4B,EAAoBpC,EAAkB,CAC7C,MAAAqC,EAAkBC,EAAc,QAAQ,UAAU,kBACxD,GAAI,CAACD,EAAuB,MAAA,IAAI,MAAM,2BAA2B,EACjE,MAAMpC,EAASM,IAGf,OAFkC,IAAIhB,GAAkB8C,CAAe,EAEtC,WAAW,CAC1C,OAAArC,EACA,OAAAC,EACA,YAAaO,EAAQ,KAAA,CACtB,CACH,CAEO,MAAA,CACL,gBAAAE,EACA,YAAAc,EACA,aAAAZ,EACA,cAAAD,EACA,iBAAAc,EACA,UAAAI,EACA,mBAAAN,EACA,gBAAAQ,EACA,+BAAAf,EACA,gBAAAgB,EACA,oBAAAI,CAAA,CAEJ,EAMaG,EACX,OAAOC,EAAW,UAAU,WAAW,EAElC,SAASC,IAA0C,CACxD,MAAMC,EAAYjD,KAClB,OAAAkD,EAAQJ,EAA2BG,CAAS,EACrCA,CACT,CAEO,SAASE,IAAsC,CACpD,OAAOC,EAAWN,CAAyB,CAC7C,CCvIO,MAAA9C,GAAAqD,GAAA,CACL,KAAA,CAAM,YAAAtB,EACJ,iBAAAC,EACA,mBAAAF,EACA,UAAAwB,CACW,EAAAD,EAIb,CAAA,oBAAAE,EAAA,UAAAzE,CAAA,EAAAC,EAAA,EACA,CAAA,KAAAyE,EAAA,QAAAC,CAAA,EAAAF,EAGA,CAAA,iBAAAjE,GAAApB,KACA,CAAA,aAAAwF,GAAAlF,IAGAmF,EAAAjF,EAAwB,IAAA,OAAA,KAAA8E,EAAA,OAAA,CAAA,CAAA,CACgB,EAIxClC,EAAA5C,EAA4B,IAAAiF,EAAA,MAAA,OAAA,CACoB,EAIhDjC,EAAAhD,EAAA,KAAA,CAAsC,QAAAiF,EAAA,MACX,SAAA,IACf,UAAA,CAAA,GAAAC,EAAA,kBAAA,GAAAC,CAAA,CAC+C,EAAA,EAE3DC,EAAAlC,EAAAF,EAAA,CAAwD,QAAAJ,CAC7C,CAAA,EAEX,CAAA,KAAAyC,CAAA,EAAAD,EAGAE,EAAAtF,EAAsB,IAAA,OAAA,QAAAa,EAAAwE,EAAA,QAAA,YAAAxE,EAAA,MAAA,GAAA,QAAA,CAAA,EACmC,EAIzD0E,EAAAvF,EAAA,IAAA,CAAyC,GAAAsF,EAAA,MACtB,GAAAjC,EAAA,KACF,CAAA,EAIjBmC,EAAAxF,EAAA,IACE,OAAA,KAAA8E,EAAA,OAAA,CAAA,CAAA,EAAA,OAAA,CAAAhC,EAAAS,IAAA,OAEI,MAAAC,EAAA+B,EAAA,MAAA,KAAAE,GAAAA,EAAA,KAAAlC,CAAA,EACA,GAAA,CAAAC,EAAW,OAAAV,EACX,MAAAW,IAAA5C,EAAAiE,GAAA,YAAAA,EAAA,QAAA,YAAAjE,EAAA0C,KAAA,IACA,OAAAT,EAAA,OAAAhC,EAAA0C,EAAAC,CAAA,CAAA,CAA0C,EAAA,CAAA,EAAA,UAElC,EAIdiC,EAAA1F,EAAuB,IAAA2F,EAAA,CACfH,EAAA,MACelC,EAAA,MACF1C,EAAA,KACA,CAAA,EAAA,SAAA,CACP,EAGd8C,EAAA1D,EAAkB,IAAA4E,EAAA,OAAAjB,EAAAkB,CAAA,GAAAlB,EAAAyB,CAAA,GAAAnF,EAAA,OAAA0D,EAAAvD,CAAA,CAKqC,EAIvD,eAAAwF,GAAA,CACE,MAAA,QAAA,IAAA,CAAAb,EAAA,EAAA3B,EAAA,CAAA,CAAA,CAAiE,CAKnE,OAAAyC,GAAAN,EAAAO,GAAA,CACEd,EAAAc,EAAA,IAAAtC,GAAAA,EAAA,OAAA,CAAA,CAAmD,CAAA,EAGrD,CAAO,YAAAH,EACL,cAAAiC,EACA,eAAAR,EACA,eAAAY,EACA,UAAAhC,EACA,oBAAAkC,CACA,CAEJ,EAGOG,EAAA,OAAA1B,EAAA,UAAA,SAAA,EAGA,SAAA2B,GAAArB,EAAA,CACLH,EAAAuB,EAAAzE,GAAAqD,CAAA,CAAA,CACF,CAEO,SAAAsB,IAAA,CACL,OAAAvB,EAAAqB,CAAA,CACF"}