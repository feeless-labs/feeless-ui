{"version":3,"file":"balances-dbcb3da6.js","sources":["../../src/components/tables/InternalBalancesTable.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { orderBy } from 'lodash';\nimport { ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { vaultService } from '@/services/contracts/vault.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { bnum, includesAddress, trackLoading } from '@/lib/utils';\nimport { formatUnits, parseUnits } from '@ethersproject/units';\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\nimport { TokenInfo } from '@/types/TokenList';\nimport { configService } from '@/services/config/config.service';\n\n/**\n * TYPES\n */\nexport type InternalBalanceRow = TokenInfo & {\n  balance: string;\n  value: string;\n  price: string;\n};\n\n/**\n * STATE\n */\nconst internalBalances = ref<InternalBalanceRow[]>([]);\nconst loading = ref(true);\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { fNum } = useNumbers();\nconst { priceFor, getToken, tokens } = useTokens();\nconst { account } = useWeb3();\n\n/**\n * METHODS\n */\nfunction withdraw(asset: string) {\n  const kind = 1; // OP_KIND.WithdrawInternal\n  const balance = internalBalances.value.find(b => b.address === asset);\n  const amount = parseUnits(\n    balance?.balance || '0',\n    balance?.decimals\n  ).toString();\n  return () =>\n    vaultService.manageUserBalance({\n      kind,\n      asset,\n      amount,\n      sender: account.value,\n      recipient: account.value,\n    });\n}\n\n/**\n * Fetches internal balances for all tokens in registry, merges them with token\n * info, exlcudes zero balances, and sorts by value.\n */\nasync function getInternalBalances() {\n  const tokenAddresses = Object.keys(tokens.value);\n  const balances = await vaultService.getInternalBalance(\n    account.value,\n    tokenAddresses\n  );\n\n  const balancesWithAddress = tokenAddresses\n    .map((address, i) => {\n      const token = getToken(address);\n      const balance = formatUnits(balances[i], token.decimals);\n      const price = priceFor(address);\n      const value = bnum(balance).times(price).toString();\n\n      if (bnum(balance).lte(0)) return null;\n      if (!token.decimals && !token.name && !token.symbol) return null;\n\n      return {\n        ...token,\n        balance,\n        price,\n        value,\n      };\n    })\n    .filter(b => b) as unknown as InternalBalanceRow[];\n\n  internalBalances.value = orderBy(\n    balancesWithAddress,\n    ['value', 'balance'],\n    ['desc', 'desc']\n  );\n}\n\nfunction isWithdrawDisabled(address: string): boolean {\n  const disabledAddresses =\n    configService.network.tokens.DisableInternalBalanceWithdrawals;\n  return !!disabledAddresses && includesAddress(disabledAddresses, address);\n}\n\n/**\n * LIFECYCLE\n */\nonBeforeMount(async () => {\n  if (account.value) {\n    trackLoading(getInternalBalances, loading);\n  } else {\n    loading.value = false;\n  }\n});\n\n/**\n * WATCHERS\n */\nwatch(account, async newAccount => {\n  if (newAccount) {\n    trackLoading(getInternalBalances, loading);\n  } else {\n    internalBalances.value = [];\n    loading.value = false;\n  }\n});\n\n/**\n * TABLE\n */\nconst columns = ref<ColumnDefinition<any>[]>([\n  {\n    name: 'Token',\n    id: 'token',\n    accessor: 'token',\n    Cell: 'tokenColumnCell',\n    width: 475,\n    noGrow: true,\n  },\n  {\n    name: t('balance'),\n    id: 'Balance',\n    align: 'right',\n    width: 150,\n    accessor: ({ balance }) => `${fNum(balance, FNumFormats.token)}`,\n  },\n  {\n    name: t('value'),\n    id: 'value',\n    align: 'right',\n    width: 150,\n    accessor: ({ value }) =>\n      bnum(value).eq(0) ? '-' : fNum(value, FNumFormats.fiat),\n  },\n  {\n    name: '',\n    id: 'withdraw',\n    align: 'right',\n    accessor: 'withdraw',\n    Cell: 'withdrawColumnCell',\n    width: 150,\n  },\n]);\n</script>\n\n<template>\n  <BalCard\n    shadow=\"lg\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <BalTable\n      :columns=\"columns\"\n      :data=\"internalBalances\"\n      skeletonClass=\"h-64\"\n      :square=\"upToLargeBreakpoint\"\n      :isLoading=\"loading\"\n    >\n      <template #tokenColumnCell=\"{ symbol, address }\">\n        <div class=\"flex items-center py-4 px-6\">\n          <BalAsset :address=\"address\" />\n          <span class=\"ml-2\">{{ symbol }}</span>\n        </div>\n      </template>\n      <template #withdrawColumnCell=\"{ address, value }\">\n        <div class=\"flex justify-end py-4 px-6\">\n          <TxActionBtn\n            :label=\"$t('transactionAction.withdraw')\"\n            color=\"gradient\"\n            size=\"sm\"\n            :actionFn=\"withdraw(address)\"\n            action=\"withdraw\"\n            :summary=\"\n              $t('transactionSummary.withdrawFromBalance', [\n                fNum(value, FNumFormats.fiat),\n              ])\n            \"\n            :confirmingLabel=\"`${$t('withdrawing')}...`\"\n            :disabled=\"isWithdrawDisabled(address)\"\n            @confirmed=\"getInternalBalances\"\n          />\n        </div>\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n"],"names":["internalBalances","ref","loading","t","useI18n","upToLargeBreakpoint","useBreakpoints","fNum","useNumbers","priceFor","getToken","tokens","useTokens","account","useWeb3","withdraw","asset","balance","b","amount","parseUnits","vaultService","getInternalBalances","tokenAddresses","balances","balancesWithAddress","address","i","token","formatUnits","price","value","bnum","orderBy","isWithdrawDisabled","disabledAddresses","configService","includesAddress","onBeforeMount","trackLoading","watch","newAccount","columns","FNumFormats"],"mappings":"ysBA8BA,MAAAA,EAAAC,EAAA,CAAA,CAAA,EACAC,EAAAD,EAAA,EAAA,EAKA,CAAA,EAAAE,GAAAC,IACA,CAAA,oBAAAC,GAAAC,KACA,CAAA,KAAAC,GAAAC,IACA,CAAA,SAAAC,EAAA,SAAAC,EAAA,OAAAC,CAAA,EAAAC,EAAA,EACA,CAAA,QAAAC,GAAAC,IAKA,SAAAC,EAAAC,EAAA,CAEE,MAAAC,EAAAjB,EAAA,MAAA,KAAAkB,GAAAA,EAAA,UAAAF,CAAA,EACAG,EAAAC,GAAeH,GAAA,YAAAA,EAAA,UAAA,IACOA,GAAA,YAAAA,EAAA,QACX,EAAA,SAAA,EAEX,MAAA,IAAAI,EAAA,kBAAA,CACiC,OAC7B,MAAAL,EACA,OAAAG,EACA,OAAAN,EAAA,MACgB,UAAAA,EAAA,KACG,CAAA,CACpB,CAOL,eAAAS,GAAA,CACE,MAAAC,EAAA,OAAA,KAAAZ,EAAA,KAAA,EACAa,EAAA,MAAAH,EAAA,mBAAoCR,EAAA,MAC1BU,CACR,EAGFE,EAAAF,EAAA,IAAA,CAAAG,EAAAC,IAAA,CAEI,MAAAC,EAAAlB,EAAAgB,CAAA,EACAT,EAAAY,EAAAL,EAAAG,CAAA,EAAAC,EAAA,QAAA,EACAE,EAAArB,EAAAiB,CAAA,EACAK,EAAAC,EAAAf,CAAA,EAAA,MAAAa,CAAA,EAAA,WAGA,OADAE,EAAAf,CAAA,EAAA,IAAA,CAAA,GACA,CAAAW,EAAA,UAAA,CAAAA,EAAA,MAAA,CAAAA,EAAA,OAAqD,KAErD,CAAO,GAAAA,EACF,QAAAX,EACH,MAAAa,EACA,MAAAC,CACA,CACF,CAAA,EAAA,OAAAb,GAAAA,CAAA,EAIJlB,EAAA,MAAAiC,EAAA,QAAyBR,EACvB,CAAA,QAAA,SAAA,EACmB,CAAA,OAAA,MAAA,CACJ,CACjB,CAGF,SAAAS,EAAAR,EAAA,CACE,MAAAS,EAAAC,EAAA,QAAA,OAAA,kCAEA,MAAA,CAAA,CAAAD,GAAAE,EAAAF,EAAAT,CAAA,CAAwE,CAM1EY,EAAA,SAAA,CACEzB,EAAA,MACE0B,EAAAjB,EAAApB,CAAA,EAEAA,EAAA,MAAA,EACF,CAAA,EAMFsC,EAAA3B,EAAA,MAAA4B,GAAA,CACEA,EACEF,EAAAjB,EAAApB,CAAA,GAEAF,EAAA,MAAA,GACAE,EAAA,MAAA,GACF,CAAA,EAMF,MAAAwC,EAAAzC,EAAA,CAA6C,CAC3C,KAAA,QACQ,GAAA,QACF,SAAA,QACM,KAAA,kBACJ,MAAA,IACC,OAAA,EACC,EACV,CACA,KAAAE,EAAA,SAAA,EACmB,GAAA,UACb,MAAA,QACG,MAAA,IACA,SAAA,CAAA,CAAA,QAAAc,CAAA,IAAA,GAAAV,EAAAU,EAAA0B,EAAA,KAAA,CAAA,EACuD,EAChE,CACA,KAAAxC,EAAA,OAAA,EACiB,GAAA,QACX,MAAA,QACG,MAAA,IACA,SAAA,CAAA,CAAA,MAAA4B,CAAA,IAAAC,EAAAD,CAAA,EAAA,GAAA,CAAA,EAAA,IAAAxB,EAAAwB,EAAAY,EAAA,IAAA,CAEiD,EAC1D,CACA,KAAA,GACQ,GAAA,WACF,MAAA,QACG,SAAA,WACG,KAAA,qBACJ,MAAA,GACC,CACT,CAAA"}