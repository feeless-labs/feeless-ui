import{d,a9 as h,o as u,a as p,b as e,f as i,w as a,C as n,e as o,aa as r,p as m,g as f,cp as l,_ as g}from"./index-60943df8.js";const t=c=>(m("data-v-6c24757d"),c=c(),f(),c),v={class:"pb-4 risks"},y=t(()=>e("div",{class:"pb-3"},[e("h1",null,"Balancer Protocol Risks"),e("p",null," There are many inherent risks developers accept when working in DeFi and using the Balancer Protocol. This page aims to summarize the top risks to help you with your risk decisions. It is important to note that this list is not exhaustive, and there may be additional risks not explicitly mentioned here. As the risk environment is fluid, we expect to periodically update this summary. ")],-1)),k={class:"nav"},b=t(()=>e("h4",{class:"mb-2"},"Page contents",-1)),_=t(()=>e("h5",{class:"mb-2"},"Liquidity Provider risks",-1)),w={class:"toc-link"},x=t(()=>e("span",{class:"font-semibold"},"General risks",-1)),P={class:"text-sm toc-link"},B={class:"text-sm toc-link"},T={class:"text-sm toc-link"},L={class:"text-sm toc-link"},I={class:"text-sm toc-link"},S={class:"text-sm toc-link"},A={class:"text-sm toc-link"},F={class:"text-sm toc-link"},q={class:"text-sm toc-link"},M={class:"text-sm toc-link"},D={class:"text-sm toc-link"},E={class:"toc-link"},U=t(()=>e("span",{class:"font-semibold"},"Pool type risks",-1)),O={class:"text-sm toc-link"},H={class:"text-sm toc-link"},C={class:"text-sm toc-link"},G={class:"text-sm toc-link"},R={class:"toc-link"},z=t(()=>e("span",{class:"font-semibold"},"Layer 2 network risks",-1)),j={class:"text-sm toc-link"},V={class:"text-sm toc-link"},W={class:"text-sm toc-link"},N={class:"text-sm toc-link"},$=t(()=>e("h2",null,"Risks for Liquidity Providers (LPs)",-1)),J=["id"],X=r('<h3 data-v-6c24757d>General risks</h3><h4 data-v-6c24757d>Smart contract risk</h4><p data-v-6c24757d> Smart contract risk is a general risk when using DeFi protocols, including Balancer. Smart contracts are self-executing pieces of code that run on certain blockchains, like Ethereum. Although they are designed to be secure, they can be vulnerable to bugs and exploits. </p><p data-v-6c24757d> If there is a flaw in the smart contract code, it can be exploited by attackers to steal funds from the protocol. This can result in the loss of funds for liquidity providers and swappers who are using the protocol. Smart contract risk is a major risk for all DeFi users, and it is important to carefully evaluate the security of the protocols before using them. </p><h5 data-v-6c24757d>The Balancer Vault</h5><p data-v-6c24757d> The main architectural change between Balancer V1 and Balancer V2 is the transition to a single vault that holds and manages all the assets added by all Balancer pools. This separates the AMM logic from the token management and accounting. Token management/accounting is done by the vault while the AMM logic is individual to each pool. This provides many advantages, including flexibility and gas efficiency. </p><p data-v-6c24757d> One critique of this approach is that the Balancer Vault could be a single point of failure—i.e. hack the vault, get all the tokens of the protocol. This Balancer Vault architecture was heavily audited prior to launch and has now been battle-tested since May 2021, securing over $3b. It has also been forked by other teams across different networks, including Beethoven X on Fantom, without issue. </p><h5 data-v-6c24757d>How does Balancer work to mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> Development teams have engaged with top tier smart contract auditing firms to identify and fix bugs before deployment. </li><li data-v-6c24757d> The core of Balancer smart contracts are immutable and do not use proxies or other upgrade mechanisms. Note: Within DeFI, upgradable contracts are a major way exploits have been introduced. </li><li data-v-6c24757d> In addition, Balancer has a bug bounty program via <a class="link" href="https://immunefi.com/bounty/balancer/" data-v-6c24757d>Immunefi</a> to attract white-hat hackers to responsibly disclose any bugs. Rewards are distributed based on threat level—for critical smart contract vulnerabilities, there is a minimum reward of 250 ETH and a maximum reward of 1,000 ETH. </li></ul><h5 data-v-6c24757d>How can LPs mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> LPs should carefully research and use DeFi protocols that are battle-tested with a history of functioning as intended, while securing large amounts of assets. </li><li data-v-6c24757d> To diversify risk, LPs may consider not placing all their tokens into a single protocol. </li></ul>',11),K=[X],Z=["id"],Q=r("<h4 data-v-6c24757d>Mechanism / Economic risk</h4><p data-v-6c24757d> An mechanism or economic exploit of a DeFi protocol occurs when an attacker is able to manipulate the economic incentives of the protocol to their advantage, resulting in a loss of funds for other participants. This can happen even when there are no smart contract bugs or other unintended logic errors. </p><p data-v-6c24757d> For example, an attacker could take advantage of a liquidity pool&#39;s pricing mechanism to intentionally cause the price of an asset to deviate from its true value, allowing them to buy or sell that asset at a profit. </p><p data-v-6c24757d> In addition, the composable nature of DeFi means that a pool on Balancer may contain tokens that may be manipulated by an attacker on a third party protocol, which further increases risk. </p><p data-v-6c24757d> These types of economic exploits are difficult to detect and prevent. </p><h5 data-v-6c24757d>How does Balancer work to mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> Balancer strives to deliver careful economic modeling, rigorous mechanism design, testing and audits by top tier auditing firms. </li></ul><h5 data-v-6c24757d>How can LPs mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> LPs should carefully research and use DeFi platforms that are battle-tested with a history of functioning as intended, while securing large amounts of assets. </li></ul>",9),Y=[Q],ee=["id"],te=t(()=>e("h4",null,"Toxic pool token risk",-1)),oe=t(()=>e("p",null," A liquidity pool is only as good as its weakest token. This is because liquidity pools typically sell the winners (tokens moving up in price) and accumulate the losers (tokens moving down in price). If a pool contains a toxic token, the value of the BPT (LP tokens) of the liquidity pool could go to zero. This is the case even if the other pool tokens remain good and would otherwise not be affected. ",-1)),se=t(()=>e("p",null,[o(" A toxic token could be seeded into a liquidity pool by a malicious pool creator or an otherwise good token could become toxic (similar to Terra’s stablecoin "),e("code",null,"UST"),o("). ")],-1)),ie=t(()=>e("h5",null,"Tokens that could become problematic for LPs:",-1)),ae={class:"mt-2"},ne=t(()=>e("span",{class:"link"},"Rebasing tokens",-1)),le=t(()=>e("li",null,"Tokens with transfer fees",-1)),re=t(()=>e("li",null,"Proxy tokens with double entry points",-1)),ce=t(()=>e("li",null,"Tokens with more than 18 decimal points",-1)),de=t(()=>e("li",null,"Rebasing tokens",-1)),he=t(()=>e("li",null,[o(" Tokens that become toxic, including: "),e("ul",{class:"mt-2"},[e("li",null,"Tokens that are infinitely minted"),e("li",null,"Tokens that become frozen or exploited in any other way"),e("li",null,"Stablecoins that lose their peg")])],-1)),ue=["id"],pe=t(()=>e("h5",null,"Rebasing tokens",-1)),me=t(()=>e("p",null," Rebasing tokens are a type of cryptocurrency that adjusts the supply of the token based on a predetermined formula. This formula is usually designed to keep the price of the token stable relative to some external metric, such as the price of a particular asset or a specific index. When the external metric changes, the token supply is adjusted, which in turn affects the price of the token. ",-1)),fe=t(()=>e("p",null," For example, if a rebasing token is designed to maintain a price of $1 per token and the price of the external asset goes up by 10%, the token supply would decrease by 10% to maintain the $1 price point. Similarly, if the external asset price goes down by 10%, the token supply would increase by 10%. ",-1)),ge=t(()=>e("p",null,[o(" Some examples of rebasing tokens include "),e("code",null,"stETH"),o(" and "),e("code",null,"AMPL"),o(". ")],-1)),ve=t(()=>e("p",null," Unfortunately, rebasing tokens generally don’t work well in liquidity pools since LPs may suffer losses when rebasing occurs. ",-1)),ye=[pe,me,fe,ge,ve],ke=r("<h5 data-v-6c24757d>How does Balancer mitigate these risks?</h5><ul data-v-6c24757d><li data-v-6c24757d> Since the Balancer protocol is permissionless, anyone can create a liquidity pool composed of any ERC-20 token. This makes this type of risk difficult to mitigate. </li><li data-v-6c24757d> The Balancer App UI may be updated to exclude blacklisted tokens and pools but LPs should not rely on this. </li><li data-v-6c24757d> Instead of including tokens which rebase, new DeFi liquidity pool compatible wrapped tokens which do not rebase may be utilized. An example of this is <code data-v-6c24757d>wstETH</code>—a wrapped token which includes the accumulated yield from Lido ETH staking and does not rebase like <code data-v-6c24757d>stETH</code>. </li><li data-v-6c24757d> For Balancer Managed Pools, a novel feature called ‘circuit breakers’ has been designed to halt swapping if there is a large, uncorrelated drop in a token’s value. </li><li data-v-6c24757d> New pools have a ‘recovery mode’ which can be enabled by the Emergency DAO Multisig. Pools in recovery mode provide a simple way for LPs to exit the pool proportionally at the cost of disabling protocol fees (swaps, joins etc still work). </li></ul><h5 data-v-6c24757d>How can LPs mitigate these risks?</h5><ul data-v-6c24757d><li data-v-6c24757d> LPs should carefully check each pool constituent token and understand its specific risks. </li><li data-v-6c24757d> LP’s should review all pool tokens before providing liquidity to ensure no constituent pool tokens are unsupported by the Balancer Protocol (e.g. rebasing tokens). </li><li data-v-6c24757d> LPs should carefully check the pool creator address to verify it’s from a reliable actor. </li></ul>",4),be=["id"],_e=t(()=>e("h4",null,"DeFi composability risks",-1)),we=t(()=>e("p",null," DeFi composability refers to the ability of different DeFi protocols and applications to work together seamlessly in endless combinations, allowing developers to create more complex financial transactions and applications. This is sometimes referred to as DeFi lego building blocks, since they can be combined and connected to created interesting new structures and applications. ",-1)),xe=t(()=>e("p",null," While composability offers many benefits, layering on protocols and applications on top of each other comes with additional risks. For example, risks get compounded when multiple protocols are composed together, as a vulnerability in one contract could impact others. The interconnectivity of DeFi protocols can amplify risks, turning isolated incidents into systemic threats. For example, if a major protocol fails or suffers from an exploit, it could lead to a domino effect, impacting other protocols and users in the ecosystem. ",-1)),Pe=t(()=>e("p",null," Other risks could cascade if a protocol within a composability stack has a liquidity crisis, an unfavorable governance decision or regulatory outcome. ",-1)),Be=[_e,we,xe,Pe],Te=["id"],Le=r('<h4 data-v-6c24757d>DAO Governance risk</h4><p data-v-6c24757d> Balancer currently uses off-chain voting mechanisms to signal the will of veBAL token holders (vote-escrow BAL). This off-chain voting is done via <a class="link" href="https://snapshot.org/" data-v-6c24757d>Snapshot</a>—originally developed in-house by Balancer Labs. </p><p data-v-6c24757d> A summary of the immutability of the Balancer Protocol’s smart contracts: </p><ul data-v-6c24757d><li data-v-6c24757d> Balancer V1 contracts are immutable, so there were no core protocol parameters that could be changed. </li><li data-v-6c24757d> Balancer V2 contracts do allow for some tweaking of core protocol parameters, including the ability to: <ul class="mt-2" data-v-6c24757d><li data-v-6c24757d> Set a share of swap fees to be diverted to the protocol (hard capped at 50% of the swap fee) </li><li data-v-6c24757d>Set a Flash Loan fee</li><li data-v-6c24757d> Extract from the vault collected protocol fees and/or excess balances (e.g. airdrops), to any destination </li><li data-v-6c24757d>Set the address of the oracle implementation</li><li data-v-6c24757d> Set relayer addresses: relayers are (user opt-in, audited) contracts that can make calls to the vault (with the transaction “sender” being any arbitrary address) and use the sender’s ERC20 vault allowance, internal balance or BPTs on their behalf </li><li data-v-6c24757d> Set dynamic-fee controllers: addresses (initially assigned to Gauntlet) that may change the swap fee for pools created by the dynamic-fee pool factory that will be deployed by Balancer Labs </li><li data-v-6c24757d>Add and remove veBAL gauges</li></ul></li></ul><p data-v-6c24757d> Note: The system of Balancer Governance may change in the future. For example, Balancer community members have expressed interest in moving from the Multisig towards on-chain governance execution by veBAL token holders. </p><p data-v-6c24757d> The main risk with this setup consisting of off-chain voting executed by MultiSigs: </p><ul data-v-6c24757d><li data-v-6c24757d> The <a class="link" href="https://docs.balancer.fi/concepts/governance/multisig.html#dao-multisig-signer-set" data-v-6c24757d>Multisig signer set</a> could go rogue and disregard the decision made by veBAL holders in the off-chain voting. </li><li data-v-6c24757d> The <a class="link" href="https://docs.balancer.fi/concepts/governance/multisig.html#dao-multisig-signer-set" data-v-6c24757d>Multisig signer set</a> could mistakenly execute the wrong instruction without malice. </li><li data-v-6c24757d> An individual or an entity could acquire substantial veBAL and vote against the interests of the majority of the community. </li></ul><h5 data-v-6c24757d>How Balancer aims to mitigate this risk:</h5><ul data-v-6c24757d><li data-v-6c24757d> The core of Balancer smart contracts are immutable and do not use proxies or other upgrade mechanisms. Only parameters, which are considered to be less ‘dangerous’ may be tweaked. </li><li data-v-6c24757d> The Multisig does not have custody of, nor control over, funds from liquidity providers locked inside Balancer Protocol contracts. Balancer V2 was designed so that even if a multisig goes rogue, all the liquidity is safe and can be withdrawn by their rightful owners. </li></ul><h5 data-v-6c24757d>How LPs can mitigate this risk:</h5><ul data-v-6c24757d><li data-v-6c24757d> LPs should stay up to date with Balancer Governance by following discussions on the forum and participating in the off-chain voting. </li><li data-v-6c24757d> LPs may review past votes and verify that the DAO Multisig has executed outcomes accurately. </li></ul>',11),Ie=[Le],Se=["id"],Ae=t(()=>e("h4",null,"Flash Loans risk",-1)),Fe=t(()=>e("p",null," A Flash Loan is a type of loan where a user borrows assets with no upfront collateral and returns the borrowed assets within the same blockchain transaction. Flash Loans use smart contracts which requires that a borrower repays the loan before the transaction ends. They are typically used for arbitrage opportunities, collateral swaps and to lower transaction fees, across potentially multiple protocols. It’s a powerful new financial primitive, native to DeFi. ",-1)),qe=t(()=>e("p",null," Flash Loans may be used on Balancer and interact with the Balancer Vault. ",-1)),Me=t(()=>e("p",null," While Flash Loans offer many benefits, they also comes with certain risks. Flash Loans have also been used for multiple DeFi exploits resulting in losses worth millions of dollars. Flash Loan exploits are relatively new with the full range of attack surfaces still being discovered. ",-1)),De=t(()=>e("h5",null,"How Balancer aims to mitigate this risk:",-1)),Ee=t(()=>e("ul",null,[e("li",null," The Balancer Vault is non-reentrant, which blocks most Flash Loan attacks. "),e("li",null," Balancer strives to deliver careful economic modeling, rigorous mechanism design, testing and audits by top tier auditing firms. ")],-1)),Ue=[Ae,Fe,qe,Me,De,Ee],Oe=["id"],He=r("<h4 data-v-6c24757d>Mutable pool attributes</h4><p data-v-6c24757d> Balancer is a flexible AMM that allows people to create different types of liquidity pools, including those with immutable and/or mutable pool attributes. </p><p data-v-6c24757d> For pools with immutable attributes, LPs can be assured that the rules are designed so they cannot change once they have provided liquidity since no pool attribute should be changed by anyone at any time. </p><p data-v-6c24757d>For pools with mutable attributes, LPs should understand:</p><ul data-v-6c24757d><li data-v-6c24757d> Which attributes can change <ul data-v-6c24757d><li data-v-6c24757d> Certain attributes being mutable provide more risk than others. For example, changing the swap fee percentage is generally viewed as less risky than the ability to change the constituent tokens of a pool, since a malicious editor could introduce a toxic pool token. </li></ul></li><li data-v-6c24757d> Who can change each attribute <ul data-v-6c24757d><li data-v-6c24757d> On Balancer pools, if an attribute is editable, the address that can make the edit is also specified. The two most common parties that are set to be able to change pool attributes are either the Pool Owner or Balancer Governance. </li></ul></li></ul><h5 data-v-6c24757d>How does Balancer work to mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> For known pool types, the Balancer App UI transparently displays pool attributes and specifies if it is editable and if so, by whom. </li><li data-v-6c24757d> Balancer Managed Pools are designed to have mutable attributes that can be changed by the Pool Owner. For certain ‘dangerous operations’, there are ‘timelock delays’ which give LPs a period to review the proposed changes and withdraw funds if they do not agree with the change. In addition, Pool Controllers can set a guardian who has the ability to veto a proposed change from the Pool Owner if they believe it to be a malicious change or a mistake. </li></ul><h5 data-v-6c24757d>How can LPs mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> LPs should check to see the edibility of pool attributes and understand who can authorize any changes. </li></ul>",9),Ce=[He],Ge=["id"],Re=r("<h4 data-v-6c24757d>Loss of funds on join/exit of a pool</h4><h5 data-v-6c24757d>Due to high price impact</h5><p data-v-6c24757d> When joining a pool, LPs should be aware of the price impact from adding tokens to the pool. In general, adding liquidity in proportional amounts to the token weights of the pool incur low price impact. Adding custom token amounts (non-proportionally) causes the internal prices of the pool to change, as if you were swapping tokens. The higher the price impact the more you&#39;ll spend in swap fees. </p><h5 data-v-6c24757d>Due to slippage</h5><p data-v-6c24757d> LPs should also consider the effect of slippage when adding liquidity to a pool. Slippage occurs when market conditions change between the time your order is submitted and the time it gets executed on Ethereum. Slippage tolerance is the maximum change in price you are willing to accept. </p><p data-v-6c24757d> Slippage tolerance is a setting in both the Add/Remove liquidity flows on the Balancer App UI. Setting a low slippage tolerance protects you from front-running bots and miner extractable value (MEV). </p><h5 data-v-6c24757d>Due to high Gas fees</h5><p data-v-6c24757d> Gas on the Ethereum network refers to the unit that measures the amount of computational effort required to execute specific operations. Gas fees in Ethereum are the transaction costs users pay to have their transactions processed and validated by the network&#39;s miners. Gas fees vary depending on network congestion, transaction complexity, and the amount of gas a user is willing to pay. </p><p data-v-6c24757d> Gas fees can be particularly high during periods of network congestion. As a result, LPs might face increased costs when adding or removing liquidity, making adjustments to their positions, or claiming liquidity mining incentives. If the gas fees are higher than the returns they get from providing liquidity, LPs may end up with a net loss. </p><h5 data-v-6c24757d>How Balancer aims to mitigate this risk:</h5><ul data-v-6c24757d><li data-v-6c24757d> The Balancer Smart Order router is used to route liquidity efficiently via pools to minimize price impact. </li><li data-v-6c24757d> The Balancer App UI gives LP’s control over their slippage settings. </li><li data-v-6c24757d> LP’s are warned via the Balancer App UI when the price impact is excessive. Once price impact exceeds a certain threshold, the Balancer App UI prevents user’s from executing a transaction where they would otherwise get rekt. </li></ul><h5 data-v-6c24757d>How LP’s can mitigate this risk:</h5><ul data-v-6c24757d><li data-v-6c24757d> Users should review their slippage settings and potential price impact before adding or removing liquidity. </li><li data-v-6c24757d> Users should also review gas prices and the potential gas fee before any transaction. This information is usually provided by their wallet provider. </li></ul>",13),ze=[Re],je=["id"],Ve=r("<h4 data-v-6c24757d>Impermanent loss</h4><p data-v-6c24757d> Impermanent loss is a risk that liquidity providers (LPs) face when providing liquidity to an automated market maker (AMM) like Balancer. It is the difference between the value of holding assets in a pool versus holding them outside of the pool. </p><p data-v-6c24757d> If the price of the assets in the pool changes, LPs may experience a loss compared to holding the assets outside of the pool. This can happen because the AMM algorithm rebalances the pool to maintain a constant ratio of the assets in the pool. If the price of one asset increases, the algorithm will sell some of that asset and buy more of the other asset to maintain the ratio. This means that LPs will sell the asset that is increasing in price and buy the asset that is decreasing in price, resulting in a loss. </p><p data-v-6c24757d> This risk is particularly relevant for pools with volatile assets where token prices are likely diverge over time. </p><h5 data-v-6c24757d>How does Balancer work to mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> All AMMs either have impermanent loss or reduced yield to LPs. Balancer aims to make its pools as capital efficient as possible so that the yield LPs make is more likely to exceed any impermanent loss. </li><li data-v-6c24757d> The Balancer protocol supports unbalanced pools which LPs can use to reduce impermanent loss. For example, there is lower impermanent loss in an 80/20 pool (or any other unbalanced pools) versus a 50/50 pool with the same underlying tokens. </li><li data-v-6c24757d> Note: Some ecosystem developers are building on top of Balancer to create novel pools, including Managed Pools, with rebalancing algorithms designed to minimize impermanent loss. </li></ul><h5 data-v-6c24757d>How can LPs mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> LPs should consider the risk of impermanent risk carefully before providing liquidity to a Balancer pool. </li><li data-v-6c24757d> The longer an LP holds their position, the more likely it is that their yield from swap fees offset and exceed any impermanent loss, assuming the price divergence of the token prices isn’t extreme. </li><li data-v-6c24757d> LPs may consider providing liquidity into pools with less likelihood of token price divergence. For example, stable pools or boosted pools. </li><li data-v-6c24757d> LP’s should consider providing liquidity in unbalanced pools, like 80/20 pools which result in less impermanent loss versus a 50/50 pool with the same underlying tokens. </li></ul>",8),We=[Ve],Ne=["id"],$e=r('<h4 data-v-6c24757d>User Interface (UI) risk</h4><p data-v-6c24757d> DeFi users, including liquidity providers and swappers, typically interact with front-end user interfaces to interact with a protocol’s smart contracts. An example is the app.balancer.fi front-end UI instance which interacts with Balancer Protocol smart contracts. </p><p class="mb-0" data-v-6c24757d> A few risks of using front-ends to manage liquidity positions in DeFi: </p><ul data-v-6c24757d><li data-v-6c24757d> UIs may not always display timely, accurate data. This may be due to the use of third party data services experiencing periods of downtime or network congestion. </li><li data-v-6c24757d> UIs could be maliciously updated or exploited by rogue developers. </li><li data-v-6c24757d>UIs may be updated and remove certain feature sets.</li><li data-v-6c24757d> UIs may block certain wallet addresses or user’s in certain jurisdictions to comply with their regulations. </li><li data-v-6c24757d> UIs may experience periods of downtime or potentially be discontinued. UIs may also be shut down or have access denied to users in certain jurisdictions. </li></ul><h5 data-v-6c24757d>How does Balancer work to mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> Since the Balancer smart contracts can be interacted with by any front-end UI, there is less reliance on any one single UI. The Balancer App UI code is open source with an MIT License which allow other third party developers to fork the code, make improvements and compete for users. </li><li data-v-6c24757d> Users or third party developers can keep track of changes and review the open source repository on the Balancer Github for potential malicious code. </li><li data-v-6c24757d> The developers of the Balancer App UI have provided instructions on how to clone and run local environments of the app. This allows people to have the ability to keep deprecated features or modify the code to add new features that they prefer. </li></ul><h5 data-v-6c24757d>How can LPs mitigate this risk?</h5><ul data-v-6c24757d><li data-v-6c24757d> LP’s can learn how to interact with Balancer smart contracts on third party websites, like <a class="link" href="https://etherscan.io/" data-v-6c24757d>Etherscan</a>. </li><li data-v-6c24757d> To mitigate the risks of downtime or lack of access, users can fork the open source code and run their own local instance. </li></ul>',8),Je=[$e],Xe=["id"],Ke=t(()=>e("h4",null,"Regulatory risk",-1)),Ze=t(()=>e("p",null," The regulatory frameworks applicable to blockchain transactions in connection with tokens and stablecoins are still developing and evolving. In addition, the increasing complexity of DeFi applications and their interactions can make it difficult to assess and regulate them effectively. This could potentially lead to increased regulatory scrutiny or even a regulatory crackdown, which could have negative consequences for participants, our efforts to mitigate risks and the entire DeFi ecosystem. ",-1)),Qe=t(()=>e("p",null,[o(" It's also possible that the Balancer App UI may be wholly or partially suspended or terminated for any or no reason, which may limit your access to your tokens via this website. In this scenario, you may be able to recover funds by forking the open-source code on "),e("a",{class:"link",href:"https://github.com/balancer/frontend-v2/"},"Github"),o(" and running your own local instance, or by using a third party website, like "),e("a",{class:"link",href:"https://etherscan.io/"},"Etherscan"),o(". ")],-1)),Ye=[Ke,Ze,Qe],et=t(()=>e("hr",null,null,-1)),tt=["id"],ot=t(()=>e("h3",null,"Pool type risks",-1)),st=t(()=>e("p",null," Balancer is designed to be infinitely extendible to allow for any conceivable pool type with custom curves, logic and parameters, and more. The general risks of the most popular pool types are listed below. ",-1)),it=[ot,st],at=["id"],nt=t(()=>e("h4",null,"Weighted Pools",-1)),lt=t(()=>e("p",null,[o(" Weighted Pools use "),e("a",{class:"link",href:"https://docs.balancer.fi/reference/math/weighted-math.html"},"Weighted math"),o(", which makes them great for general cases, including tokens that don't necessarily have any price correlation (ex. DAI/WETH). Unlike weighted pools in other AMMs that only provide 50/50 weightings, Balancer Weighted Pools enable users to build pools with more than two tokens and custom weightings, such as pools with 80/20 or 60/20/20 weightings. Some risks of weighted pools include: ")],-1)),rt=t(()=>e("ul",null,[e("li",null,[o(" Impermanent loss on volatile non-correlated assets "),e("ul",null,[e("li",null,"See above for details of impermanent loss risks.")])]),e("li",null,[o(" Toxic token risk "),e("ul",null,[e("li",null," Balancer weighted pools are not limited to just having two tokens. The more tokens in a pool, the more risk that one of these could become toxic. ")])])],-1)),ct=[nt,lt,rt],dt=["id"],ht=r("<h4 data-v-6c24757d>Stable Pools</h4><h5 data-v-6c24757d>Loss of stablecoin peg</h5><p data-v-6c24757d> Stablecoins are tokens whose value is intended to be pegged or tied to that of another asset, which could be a currency, commodity or financial instrument. There are many types of stablecoins, some are risky than others depending on product design including evidence of reserves to support the peg in times of stress. Some example types of stablecoins include: </p><ul data-v-6c24757d><li data-v-6c24757d> Peg is secured by real world reserves <ul data-v-6c24757d><li data-v-6c24757d>e.g. USDC secured by USD reserves</li></ul></li><li data-v-6c24757d> Peg is secured by other crypto assets <ul data-v-6c24757d><li data-v-6c24757d> e.g. DAI secured by an over-collateralized basket of crypto assets </li></ul></li><li data-v-6c24757d> Peg is secured by smart contract algorithms <ul data-v-6c24757d><li data-v-6c24757d> e.g. <code data-v-6c24757d>UST</code> which aimed to be secured by algorithmic rebalances to reflect the peg. </li></ul></li></ul><p data-v-6c24757d> Depegging occurs when a stablecoin losses its peg to the target asset. In stable pools, if a stablecoin depegs, LPs may incurs losses. This is because liquidity pools typically sell the winners (tokens moving up in price) and accumulate the losers (tokens moving down in price). In the case of a USD-pegged stable pool, if an asset permanently loses it’s peg to $1 and goes down in value, the pool will sell any pegged assets and accumulate the asset which has lost it’s peg, leading to an overall loss of funds for LPs. </p>",5),ut=[ht],pt=["id"],mt=t(()=>e("h4",null,"Composable Stable Pools & MetaStable Pools",-1)),ft=t(()=>e("p",null," Composable Stable Pools are designed for assets that are either expected to consistently trade at near parity, or at a known exchange rate. Composable Stable Pools use Stable Math (based on StableSwap, popularized by Curve) which allows for trades of significant size before encountering substantial price impact, vastly increasing capital efficiency for like-kind and correlated-kind swaps. They are ideal for: ",-1)),gt=t(()=>e("ul",null,[e("li",null," Pegged Tokens: Tokens that trade near 1:1, such as two stablecoins of the same currency (eg: DAI, USDC, USDT), or synthetic assets (eg: renBTC, sBTC, WBTC) "),e("li",null," Correlated Tokens: Tokens that trade near each other with some slowly changing exchange rate, like derivatives (eg: wstETH, wETH) ")],-1)),vt=t(()=>e("p",null," Note: Composable Stable Pools are a superset of all previous Stable-type pools (Stable Pools, MetaStable Pools, StablePhantom Pools, and StablePool v2) and therefore obsolete all previous pools. ",-1)),yt=t(()=>e("p",null," Composable Stable Pools (including MetaStable Pools) carry the all of the same risks as stable pools, including the potential depegging of constituent stablecoin tokens. In addition, there are risks associated with the involvement of rate providers. ",-1)),kt=["id"],bt=t(()=>e("h5",null,"Rate provider risk",-1)),_t=t(()=>e("p",null," Rate Providers are contracts that provide an exchange rate between two assets. These exchange rates can come from any on-chain source, whether that may be an oracle, a ratio of queryable balances, or another calculation. ",-1)),wt=t(()=>e("p",null," This introduces risks around the rate provider being able to supply accurate and timely exchange rates between pool tokens. ",-1)),xt=["id"],Pt=t(()=>e("h6",null,"Oracle risk",-1)),Bt=t(()=>e("p",null," Oracles are data providers which supply external information to smart contracts. Oracles, like Chainlink, may be used to source exchange rates between pool tokens for a rate provider in Balancer MetaStable pools. The risks of using Oracles to supply exchange rates include: ",-1)),Tt=t(()=>e("ul",null,[e("li",null," Data accuracy: Oracles must provide accurate data for DeFi applications to function correctly. Inaccurate data can cause significant issues, such as incorrect pricing or faulty execution of smart contracts. "),e("li",null," Data availability: If an oracle experiences downtime or fails to update its data feed, the DeFi applications relying on it might not function correctly or become temporarily unusable, leading to potential losses for users. "),e("li",null," Latency: The time it takes for an oracle to fetch, process, and transmit data to a smart contract can impact the performance and efficiency of DeFi applications. High latency could lead to outdated data or missed opportunities. "),e("li",null," Oracle manipulation: Bad actors might attempt to manipulate an oracle's data feed to influence the outcome of a smart contract or profit from price discrepancies. This can lead to unintended consequences, such as liquidations, loss of funds, or arbitrage opportunities for attackers. "),e("li",null," Centralization risk: If an oracle relies on a centralized data source or a small number of data providers, it becomes a single point of failure. This centralization goes against the core principles of decentralization in the DeFi ecosystem and exposes the system to potential manipulation or downtime. "),e("li",null," Exploitation of vulnerabilities: Oracles themselves can have security vulnerabilities, which, if exploited, can compromise the entire DeFi system relying on them. ")],-1)),Lt=[Pt,Bt,Tt],It=["id"],St=t(()=>e("h6",null,"Rate provider cross-chain bridge risk",-1)),At=t(()=>e("p",null," Pools may use rate providers that are bridged between blockchain networks. ",-1)),Ft=t(()=>e("p",null," For example, some pools on Polygon zkEVM use a rate provider that is bridged from Ethereum Mainnet via the Layer Zero (an omnichain messaging service). In these pools, LP's are exposed to risk of significant losses if an incorrect rate is received via the omnichain messaging service. ",-1)),qt=[St,At,Ft],Mt=["id"],Dt=t(()=>e("h4",null,"Boosted Pools",-1)),Et=t(()=>e("p",null," Typically, only 10% or less of the liquidity deposited into an AMM pool is being utilized by traders because the trade sizes are much smaller than the available liquidity. Boosted Pools allow the remaining portion of liquidity to be sent to lending protocols where the liquidity can earn additional yield for accepting inherent risks. ",-1)),Ut=t(()=>e("ul",null,[e("li",null," Boosted Pools are designed to allow for greater capital efficiency, deeper liquidity, and increased yield for Liquidity Providers. "),e("li",null," For traders, Boosted Pools are a cheaper entry/exit into lending protocols like Aave. "),e("li",null," Boosted Pools increase the opportunity for LPs to gain exposure to a wide variety of yield increases from multiple yield protocols. ")],-1)),Ot=t(()=>e("h5",null," Third party lending platform risk exposure (DeFi composability risk) ",-1)),Ht=t(()=>e("span",{class:"link"},"Oracles",-1)),Ct=t(()=>e("p",null," Also note, some Boosted pools, like those by Tetu and Idle may use strategies that utilize multiple yield protocols in order to maximize yield. Since these strategies may change exposure to the underlying yield protocols at any time, LP's must accept the risk that the protocol utilizing these strategies carefully vets all third party protocols to reduce composability risks. ",-1)),Gt=t(()=>e("p",null," If the underlying lending protocol were to get hacked, LPs in a boosted pool that deposits liquidity in that protocol could lose funds. ",-1)),Rt=t(()=>e("h5",null,"Depegging risk",-1)),zt=t(()=>e("span",{class:"link"},"depegging risks",-1)),jt=t(()=>e("hr",null,null,-1)),Vt=["id"],Wt=t(()=>e("h3",null,"Layer 2 network risks",-1)),Nt=t(()=>e("p",null," Sidechains and Layer 2 networks can offer advantages over Ethereum Mainnet, like faster transaction times and lower fees. However, they come with their own set of risks and trade-offs. ",-1)),$t=t(()=>e("p",null," For example, sidechains and Layer 2 networks often have a different security models. They may rely on a smaller set of validators or different consensus mechanisms, which could potentially make them more susceptible to attacks or centralization risks. ",-1)),Jt=t(()=>e("p",null," In addition, there are bridging risks when user’s move funds between networks. Asset bridges rely on smart contracts to facilitate transfers between Ethereum Mainnet and Layer 2/sidechains. These contracts may have vulnerabilities, which could expose users' funds to risks during the bridging process. ",-1)),Xt=[Wt,Nt,$t,Jt],Kt=["id"],Zt=t(()=>e("h4",null,"Arbitrum One risks",-1)),Qt=t(()=>e("p",null,[e("a",{class:"link",href:"https://arbitrum.io/"},"Arbitrum"),o(" is a Layer 2 scaling solution for Ethereum that uses Optimistic Rollups to improve transaction throughput and reduce fees. ")],-1)),Yt=t(()=>e("p",null,[o(" View the risks of using Arbitrum on "),e("a",{class:"link",href:"https://l2beat.com/scaling/projects/arbitrum"},"L2Beat"),o(". ")],-1)),eo=[Zt,Qt,Yt],to=["id"],oo=t(()=>e("h4",null,"Optimism risks",-1)),so=t(()=>e("p",null,[e("a",{class:"link",href:"https://www.optimism.io/"},"Optimism"),o(" is a Layer 2 scaling solution for Ethereum that uses Optimistic Rollups to improve transaction throughput and reduce fees. Although, the Balancer App UI doesn’t support Optimism, the Balancer Protocol smart contracts are deployed on Optimism and currently used by "),e("a",{class:"link",href:"https://op.beets.fi/"},"Beethoven X"),o(". ")],-1)),io=t(()=>e("p",null,[o(" View the risks of using Optimism on "),e("a",{class:"link",href:"https://l2beat.com/scaling/projects/optimism#risks"},"L2Beat"),o(". ")],-1)),ao=[oo,so,io],no=["id"],lo=t(()=>e("h4",null,"Polygon risks",-1)),ro=t(()=>e("p",null,[e("a",{class:"link",href:"https://polygon.technology/"},"Polygon"),o(" is Proof-of-Stake (PoS) sidechain scaling solution that runs in parallel to Ethereum Mainnet. Its validators are solely responsible for validating Polygon transactions. It does not derive security from Ethereum Mainnet. ")],-1)),co=t(()=>e("p",null," Polygon is subject to the same risks of other PoS chains. In particular, it has a smaller pool of capital and validator set to gain consensus compared to Ethereum Mainnet. ",-1)),ho=[lo,ro,co],uo=["id"],po=t(()=>e("h4",null,"Gnosis chain risks",-1)),mo=t(()=>e("p",null,[e("a",{class:"link",href:"https://www.gnosis.io/"},"Gnosis Chain"),o(", formerly known as xDai Chain, is a sidechain for Ethereum focused on providing fast, stable, and cost-effective transactions. It uses a PoS consensus mechanism and is secured by a set of independent validators. It does not derive security from Ethereum Mainnet. ")],-1)),fo=t(()=>e("p",null," The Gnosis chain is subject to the same risks of other PoS chains. In particular, it has a smaller pool of capital and validator set to gain consensus compared to Ethereum Mainnet. ",-1)),go=[po,mo,fo],vo=t(()=>e("hr",null,null,-1)),yo=t(()=>e("div",null,[e("p",null,[o(" Navigating these challenges calls for active engagement and open communication within the community. Sharing insights, feedback, or concerns can contribute to building a safer and more inclusive environment for all. Please feel free to reach out with any questions, suggestions or propose changes for this page directly via the "),e("a",{class:"link",href:"https://github.com/balancer/frontend-v2/blob/develop/src/pages/risks.vue"},"Balancer Github"),o(". ")])],-1)),ko=d({__name:"risks",setup(c){return(bo,_o)=>{const s=h("router-link");return u(),p("div",v,[y,e("nav",k,[b,_,e("ul",null,[e("li",w,[i(s,{to:"risks#general-risks"},{default:a(()=>[x]),_:1}),e("ul",null,[e("li",P,[i(s,{to:"risks#general-risks"},{default:a(()=>[o("Smart contract risk")]),_:1})]),e("li",B,[i(s,{to:"risks#economic-risk"},{default:a(()=>[o("Mechanism / economic risk")]),_:1})]),e("li",T,[i(s,{to:"risks#toxic-token-risk"},{default:a(()=>[o("Toxic token risk")]),_:1})]),e("li",L,[i(s,{to:"risks#composability-risk"},{default:a(()=>[o("DeFi composability risk")]),_:1})]),e("li",I,[i(s,{to:"risks#governance-risk"},{default:a(()=>[o("DAO Governance risk")]),_:1})]),e("li",S,[i(s,{to:"risks#flash-loans-risk"},{default:a(()=>[o("Flash Loans risk")]),_:1})]),e("li",A,[i(s,{to:"risks#mutable-attributes-risk"},{default:a(()=>[o("Mutable pool attributes risk")]),_:1})]),e("li",F,[i(s,{to:"risks#join-exit-risk"},{default:a(()=>[o("Join/exit risk")]),_:1})]),e("li",q,[i(s,{to:"risks#impermanent-loss-risk"},{default:a(()=>[o("Impermanent loss risk")]),_:1})]),e("li",M,[i(s,{to:"risks#ui-risk"},{default:a(()=>[o("User Interface risk")]),_:1})]),e("li",D,[i(s,{to:"risks#regulatory-risk"},{default:a(()=>[o("Regulatory risk")]),_:1})])])]),e("li",E,[i(s,{to:"risks#pool-type-risks"},{default:a(()=>[U]),_:1}),e("ul",null,[e("li",O,[i(s,{to:"risks#weighted-pools"},{default:a(()=>[o("Weighted Pools")]),_:1})]),e("li",H,[i(s,{to:"risks#stable-pools"},{default:a(()=>[o("Stable Pools")]),_:1})]),e("li",C,[i(s,{to:"risks#composable-pools"},{default:a(()=>[o("Composable Stable Pools")]),_:1})]),e("li",G,[i(s,{to:"risks#boosted-pools"},{default:a(()=>[o("Boosted Pools")]),_:1})])])]),e("li",R,[i(s,{to:"risks#network-risks"},{default:a(()=>[z]),_:1}),e("ul",null,[e("li",j,[i(s,{to:"risks#arbitrum"},{default:a(()=>[o("Arbitrum")]),_:1})]),e("li",V,[i(s,{to:"risks#optimism"},{default:a(()=>[o("Optimism")]),_:1})]),e("li",W,[i(s,{to:"risks#polygon"},{default:a(()=>[o("Polygon")]),_:1})]),e("li",N,[i(s,{to:"risks#gnosis"},{default:a(()=>[o("Gnosis chain")]),_:1})])])])])]),$,e("div",{id:n(l).General,class:"risk"},K,8,J),e("div",{id:n(l).Economic,class:"risk"},Y,8,Z),e("div",{id:n(l).ToxicToken,class:"risk"},[te,oe,se,ie,e("ul",null,[e("li",null,[o(" Unsupported tokens on Balancer Protocol, including: "),e("ul",ae,[e("li",null,[i(s,{to:"risks#rebasing-tokens"},{default:a(()=>[ne]),_:1})]),le,re,ce,de])]),he]),e("div",{id:n(l).RebaseToken,class:"risk"},ye,8,ue),ke],8,ee),e("div",{id:n(l).Composability,class:"risk"},Be,8,be),e("div",{id:n(l).Governance,class:"risk"},Ie,8,Te),e("div",{id:n(l).FlashLoan,class:"risk"},Ue,8,Se),e("div",{id:n(l).Mutable,class:"risk"},Ce,8,Oe),e("div",{id:n(l).JoinExit,class:"risk"},ze,8,Ge),e("div",{id:n(l).ImpermanentLoss,class:"risk"},We,8,je),e("div",{id:n(l).UI,class:"risk"},Je,8,Ne),e("div",{id:n(l).Regulatory,class:"risk"},Ye,8,Xe),et,e("div",{id:n(l).PoolType,class:"risk"},it,8,tt),e("div",{id:n(l).Weighted,class:"risk"},ct,8,at),e("div",{id:n(l).Stable,class:"risk"},ut,8,dt),e("div",{id:n(l).ComposableStable,class:"risk"},[mt,ft,gt,vt,yt,e("div",{id:n(l).RateProvider,class:"!pb-0 risk"},[bt,_t,wt,e("div",{id:n(l).Oracle,class:"!pb-0 risk"},Lt,8,xt),e("div",{id:n(l).RateProviderBridge,class:"!pb-0 risk"},qt,8,It)],8,kt)],8,pt),e("div",{id:n(l).Boosted,class:"risk"},[Dt,Et,Ut,Ot,e("p",null,[o(" Since boosted pools deposit excess liquidity into lending protocols, like Aave, to generate yield, LPs must fully understand the risks of the underlying lending protocol since a portion of their funds will be exposed to the risks of that protocol. Some of the risks of the underlying lending protocol may include smart contract bugs, economic attack vulnerabilities and counterparty risk from the protocol’s borrowers. Lending platforms may also use "),i(s,{to:"risks#oracles"},{default:a(()=>[Ht]),_:1}),o(" which face additional risks (described above). ")]),Ct,Gt,Rt,e("p",null,[o(" Individual stablecoin tokens within Boosted Pools are subject to "),i(s,{to:"risks#stable-pools"},{default:a(()=>[zt]),_:1}),o(", as described above. ")])],8,Mt),jt,e("div",{id:n(l).Network,class:"risk"},Xt,8,Vt),e("div",{id:n(l).Arbitrum,class:"risk"},eo,8,Kt),e("div",{id:n(l).Optimism,class:"risk"},ao,8,to),e("div",{id:n(l).Polygon,class:"risk"},ho,8,no),e("div",{id:n(l).Gnosis,class:"risk"},go,8,uo),vo,yo])}}});const xo=g(ko,[["__scopeId","data-v-6c24757d"]]);export{xo as default};
//# sourceMappingURL=risks-44989d11.js.map
