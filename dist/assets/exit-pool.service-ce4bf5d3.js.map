{"version":3,"file":"exit-pool.service-ce4bf5d3.js","sources":["../../src/services/balancer/pools/exits/handlers/exit-pool.handler.ts","../../src/services/balancer/pools/exits/handlers/swap-exit.handler.ts","../../src/services/balancer/pools/exits/handlers/generalised-exit.handler.ts","../../src/services/balancer/pools/exits/handlers/exact-in-exit.handler.ts","../../src/services/balancer/pools/exits/handlers/exact-out-exit.handler.ts","../../src/services/balancer/pools/exits/handlers/recovery-exit.handler.ts","../../src/services/balancer/pools/exits/exit-pool.service.ts"],"sourcesContent":["import { Address, BalancerSDK } from '@feeless/sdk';\nimport { AmountOut } from '@/providers/local/exit-pool.provider';\nimport { Pool } from '@/services/pool/types';\nimport { TokenInfoMap } from '@/types/TokenList';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { Ref } from 'vue';\nimport { JsonRpcSigner } from '@ethersproject/providers';\nimport { TransactionActionInfo } from '@/types/transactions';\n\nexport type AmountsOut = Record<Address, string>;\n\nexport enum ExitType {\n  GivenIn, // When BPT in is specified.\n  GivenOut, // When an amount out is specified.\n}\n\nexport type ExitParams = {\n  exitType: ExitType;\n  bptIn: string;\n  amountsOut: AmountOut[];\n  tokenInfo: TokenInfoMap;\n  signer: JsonRpcSigner;\n  slippageBsp: number;\n  relayerSignature?: string;\n  bptInValid: boolean;\n  approvalActions: TransactionActionInfo[];\n  transactionDeadline: number;\n  toInternalBalance?: boolean;\n};\n\nexport type QueryOutput = {\n  priceImpact: number;\n  amountsOut: AmountsOut;\n  // Whether the transaction is ready to be sent.\n  // In some cases queries may require approvals first before they can generate\n  // the tx paylod. So in the UI we need a way to show a loading state until the tx is ready.\n  txReady: boolean;\n};\n\nexport abstract class ExitPoolHandler {\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  abstract exit(params: ExitParams): Promise<TransactionResponse>;\n\n  abstract queryExit(params: ExitParams): Promise<QueryOutput>;\n}\n","import { overflowProtected } from '@/components/_global/BalTextInput/helpers';\nimport { getTimestampSecondsFromNow } from '@/composables/useTime';\nimport { fetchPoolsForSor, hasFetchedPoolsForSor } from '@/lib/balancer.sdk';\nimport { bnum, formatAddressForSor, selectByAddress } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\nimport { BalancerSDK, SwapInfo, SwapType } from '@feeless/sdk';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { BigNumber, formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport { JsonRpcSigner } from '@ethersproject/providers';\nimport { Ref } from 'vue';\nimport {\n  ExitParams,\n  ExitPoolHandler,\n  ExitType,\n  QueryOutput,\n} from './exit-pool.handler';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\n\n/**\n * Handles exits for single asset flows where we need to use a BatchSwap to exit\n * the pool.\n */\nexport class SwapExitHandler implements ExitPoolHandler {\n  private lastSwapRoute?: SwapInfo;\n\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  async exit(params: ExitParams): Promise<TransactionResponse> {\n    const userAddress = await params.signer.getAddress();\n    await this.queryExit(params);\n\n    if (!this.lastSwapRoute)\n      throw new Error('Could not fetch swap route for join.');\n\n    const { to, data, value } = this.getSwapAttributes(\n      params.exitType,\n      this.lastSwapRoute,\n      params.slippageBsp,\n      userAddress\n    );\n\n    const txBuilder = new TransactionBuilder(params.signer);\n    return txBuilder.raw.sendTransaction({\n      to,\n      data,\n      value,\n    });\n  }\n\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\n    if (params.exitType === ExitType.GivenIn) {\n      return this.queryOutGivenIn(params);\n    } else {\n      return this.queryInGivenOut(params);\n    }\n  }\n\n  /**\n   * PRIVATE\n   */\n\n  /**\n   * Get swap given bptIn, this only used in exits when the user clicks to\n   * maximize their withdrawal, i.e. we have to send their full BPT balance.\n   */\n  private async queryOutGivenIn({\n    bptIn,\n    tokenInfo,\n    amountsOut,\n    signer,\n  }: ExitParams): Promise<QueryOutput> {\n    const amountIn = bptIn;\n    const tokenIn = selectByAddress(tokenInfo, this.pool.value.address);\n\n    const tokenOut = tokenInfo[amountsOut[0].address];\n\n    if (!tokenIn || !tokenOut)\n      throw new Error('Missing critical token metadata.');\n    if (!amountIn || bnum(amountIn).eq(0))\n      return {\n        amountsOut: { [tokenOut.address]: '0' },\n        priceImpact: 0,\n        txReady: true,\n      };\n\n    if (!hasFetchedPoolsForSor.value) await fetchPoolsForSor();\n\n    const safeAmountIn = overflowProtected(bptIn, tokenIn.decimals);\n    const bnumAmountIn = parseFixed(safeAmountIn, tokenIn.decimals);\n    const gasPrice = await this.getGasPrice(signer);\n\n    this.lastSwapRoute = await this.sdk.swaps.findRouteGivenIn({\n      tokenIn: tokenIn.address,\n      tokenOut: formatAddressForSor(tokenOut.address),\n      amount: bnumAmountIn,\n      gasPrice,\n      maxPools: 4,\n    });\n\n    const amountOut = formatFixed(\n      this.lastSwapRoute.returnAmount,\n      tokenOut.decimals\n    );\n    if (bnum(amountOut).eq(0)) throw new Error('Not enough liquidity.');\n\n    const priceImpact = this.calcPriceImpact(\n      amountIn,\n      amountOut,\n      this.lastSwapRoute.marketSp\n    );\n\n    return {\n      amountsOut: { [tokenOut.address]: amountOut },\n      priceImpact,\n      txReady: true,\n    };\n  }\n\n  /**\n   * Get swap given specified amount out.\n   */\n  private async queryInGivenOut({\n    tokenInfo,\n    amountsOut,\n    signer,\n  }: ExitParams): Promise<QueryOutput> {\n    const tokenIn = selectByAddress(tokenInfo, this.pool.value.address);\n    const tokenOut = selectByAddress(tokenInfo, amountsOut[0].address);\n    if (!tokenIn || !tokenOut)\n      throw new Error('Missing critical token metadata.');\n\n    const amountOut = amountsOut[0].value;\n    if (!amountOut || bnum(amountOut).eq(0))\n      return { amountsOut: {}, priceImpact: 0, txReady: true };\n\n    if (!hasFetchedPoolsForSor.value) await fetchPoolsForSor();\n\n    const safeAmountOut = overflowProtected(\n      amountsOut[0].value,\n      tokenOut.decimals\n    );\n    const bnumAmountOut = parseFixed(safeAmountOut, tokenOut.decimals);\n    const gasPrice = await this.getGasPrice(signer);\n\n    this.lastSwapRoute = await this.sdk.swaps.findRouteGivenOut({\n      tokenIn: tokenIn.address,\n      tokenOut: formatAddressForSor(tokenOut.address),\n      amount: bnumAmountOut,\n      gasPrice,\n      maxPools: 4,\n    });\n\n    const amountIn = formatFixed(\n      this.lastSwapRoute.returnAmount,\n      tokenIn.decimals\n    );\n    if (bnum(amountIn).eq(0)) throw new Error('Not enough liquidity.');\n\n    const priceImpact = this.calcPriceImpact(\n      amountIn,\n      amountOut,\n      this.lastSwapRoute.marketSp\n    );\n\n    return {\n      amountsOut: { [tokenOut.address]: amountOut },\n      priceImpact,\n      txReady: true,\n    };\n  }\n\n  private async getGasPrice(signer: JsonRpcSigner): Promise<BigNumber> {\n    const price = (await signer.getGasPrice()).toNumber();\n\n    if (!price) throw new Error('Failed to fetch gas price.');\n\n    return BigNumber.from(price);\n  }\n\n  private calcPriceImpact(\n    amountIn: string,\n    amountOut: string,\n    marketSp: string\n  ): number {\n    const effectivePrice = bnum(amountIn).div(amountOut);\n    const priceImpact = effectivePrice.div(marketSp).minus(1) || 1; // If fails to calculate return error value of 100%\n\n    // Don't return negative price impact\n    return Math.max(0, priceImpact.toNumber());\n  }\n\n  private getSwapAttributes(\n    exitType: ExitType,\n    swapInfo: SwapInfo,\n    maxSlippage: number,\n    userAddress: string\n  ) {\n    const deadline = getTimestampSecondsFromNow(60).toString(); // 60 seconds from now\n    const kind =\n      exitType === ExitType.GivenIn\n        ? SwapType.SwapExactIn\n        : SwapType.SwapExactOut;\n\n    return this.sdk.swaps.buildSwap({\n      userAddress,\n      swapInfo,\n      kind,\n      deadline,\n      maxSlippage,\n    });\n  }\n}\n","import { Pool } from '@/services/pool/types';\nimport { BalancerSDK, SimulationType } from '@feeless/sdk';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport {\n  ExitParams,\n  ExitPoolHandler,\n  QueryOutput,\n  AmountsOut,\n} from './exit-pool.handler';\nimport { getBalancerSDK } from '@/dependencies/balancer-sdk';\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport { bnum, isSameAddress } from '@/lib/utils';\nimport { flatTokenTree } from '@/composables/usePoolHelpers';\nimport { getAddress } from '@ethersproject/address';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\n\ntype BalancerSdkType = ReturnType<typeof getBalancerSDK>;\nexport type ExitResponse = Awaited<\n  ReturnType<BalancerSdkType['pools']['generalisedExit']>\n>;\nexport type ExitInfo = Awaited<\n  ReturnType<BalancerSdkType['pools']['getExitInfo']>\n>;\n\n/**\n * Handles exits using SDK's generalisedExit function.\n */\nexport class GeneralisedExitHandler implements ExitPoolHandler {\n  private exitTx?: ExitResponse;\n  private exitInfo?: ExitInfo;\n\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  async exit(params: ExitParams): Promise<TransactionResponse> {\n    await this.queryExit(params);\n\n    if (!this.exitTx) {\n      throw new Error('Could not query generalised exit');\n    }\n\n    const txBuilder = new TransactionBuilder(params.signer);\n    const { to, encodedCall } = this.exitTx;\n\n    return txBuilder.raw.sendTransaction({ to, data: encodedCall });\n  }\n\n  async queryExit({\n    bptIn,\n    signer,\n    slippageBsp,\n    relayerSignature,\n    approvalActions,\n    bptInValid,\n  }: ExitParams): Promise<QueryOutput> {\n    const evmAmountIn = parseFixed(\n      bptIn || '0',\n      this.pool.value.onchain?.decimals ?? 18\n    );\n    if (evmAmountIn.lte(0)) throw new Error('BPT in amount is 0.');\n\n    const signerAddress = await signer.getAddress();\n    const slippage = slippageBsp.toString();\n    const isRelayerApproved =\n      (bptInValid && approvalActions.length === 0) || !!relayerSignature;\n    const balancer = getBalancerSDK();\n\n    try {\n      if (this.exitInfo && isRelayerApproved) {\n        this.exitTx = await balancer.pools.generalisedExit(\n          this.pool.value.id,\n          evmAmountIn.toString(),\n          signerAddress,\n          slippage,\n          signer,\n          SimulationType.Static,\n          relayerSignature,\n          this.exitInfo.tokensToUnwrap\n        );\n      } else {\n        this.exitInfo = await balancer.pools.getExitInfo(\n          this.pool.value.id,\n          evmAmountIn.toString(),\n          signerAddress,\n          signer\n        );\n      }\n    } catch (error) {\n      console.error(error);\n      console.log('Failed here');\n      throw new Error('Failed to query exit.');\n    }\n\n    if (!this.exitInfo && !this.exitTx)\n      throw new Error('Failed to query exit.');\n\n    const priceImpact: number = bnum(\n      formatFixed(this.exitTx?.priceImpact || this.exitInfo.priceImpact, 18)\n    ).toNumber();\n\n    return {\n      priceImpact,\n      amountsOut: this.formatAmountsOut(\n        this.exitTx?.expectedAmountsOut || this.exitInfo.estimatedAmountsOut,\n        this.exitTx?.tokensOut || this.exitInfo.tokensOut\n      ),\n      txReady: !!this.exitTx,\n    };\n  }\n\n  /**\n   * PRIVATE METHODS\n   */\n  private formatAmountsOut(\n    expectedAmountsOut: string[],\n    tokensOut: string[]\n  ): AmountsOut {\n    const amountsOut: AmountsOut = {};\n    const allPoolTokens = flatTokenTree(this.pool.value);\n\n    expectedAmountsOut.forEach((amount, i) => {\n      const token = allPoolTokens.find(poolToken =>\n        isSameAddress(poolToken.address, tokensOut[i])\n      );\n\n      if (token) {\n        const realAddress = getAddress(token.address);\n        const scaledAmount = formatFixed(\n          amount,\n          token.decimals ?? 18\n        ).toString();\n        amountsOut[realAddress] = scaledAmount;\n      }\n    });\n\n    return amountsOut;\n  }\n}\n","import { getBalancerSDK } from '@/dependencies/balancer-sdk';\nimport { Pool } from '@/services/pool/types';\nimport { BalancerSDK, PoolWithMethods } from '@feeless/sdk';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { Ref } from 'vue';\nimport {\n  AmountsOut,\n  ExitParams,\n  ExitPoolHandler,\n  QueryOutput,\n} from './exit-pool.handler';\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport {\n  formatAddressForSor,\n  indexOfAddress,\n  isSameAddress,\n  removeAddress,\n  selectByAddress,\n} from '@/lib/utils';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { TokenInfo } from '@/types/TokenList';\nimport { flatTokenTree } from '@/composables/usePoolHelpers';\nimport { getAddress } from '@ethersproject/address';\nimport { NATIVE_ASSET_ADDRESS } from '@/constants/tokens';\n\nexport type ExitExactInResponse = ReturnType<\n  PoolWithMethods['buildExitExactBPTIn']\n>;\n\n/**\n * Handles cases where BPT in is set for the exit using SDK's\n * buildExitExactBPTIn function.\n */\nexport class ExactInExitHandler implements ExitPoolHandler {\n  private lastExitRes?: ExitExactInResponse;\n\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  async exit(params: ExitParams): Promise<TransactionResponse> {\n    await this.queryExit(params);\n\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\n\n    const txBuilder = new TransactionBuilder(params.signer);\n    const { to, data } = this.lastExitRes;\n\n    return txBuilder.raw.sendTransaction({ to, data });\n  }\n\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\n    const { signer, tokenInfo, bptIn, slippageBsp, amountsOut } = params;\n    const exiter = await signer.getAddress();\n    const slippage = slippageBsp.toString();\n    const sdkPool = await getBalancerSDK().pools.find(this.pool.value.id);\n    const tokenOut = selectByAddress(tokenInfo, amountsOut[0].address);\n\n    if (!sdkPool) throw new Error('Failed to find pool: ' + this.pool.value.id);\n    if (!tokenOut)\n      throw new Error(\n        'Could not find exit token in pool tokens list: ' +\n          amountsOut[0].address +\n          ' allTokens: ' +\n          JSON.stringify(Object.keys(tokenInfo))\n      );\n\n    const isSingleTokenExit = amountsOut.length === 1;\n    const evmBptIn = parseFixed(bptIn, 18).toString();\n    const tokenOutAddressForSor = formatAddressForSor(tokenOut.address);\n    const singleTokenMaxOutAddress = isSingleTokenExit\n      ? tokenOutAddressForSor\n      : undefined;\n    const shouldUnwrapNativeAsset = isSameAddress(\n      tokenOut.address,\n      NATIVE_ASSET_ADDRESS\n    );\n\n    this.lastExitRes = await sdkPool.buildExitExactBPTIn(\n      exiter,\n      evmBptIn,\n      slippage,\n      shouldUnwrapNativeAsset,\n      // TODO: singleTokenMaxOutAddress address format. SDK fix?\n      singleTokenMaxOutAddress?.toLowerCase()\n    );\n\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\n\n    const tokensOut = removeAddress(\n      this.pool.value.address,\n      this.lastExitRes.attributes.exitPoolRequest.assets\n    );\n    const expectedAmountsOut = this.lastExitRes.expectedAmountsOut;\n    // Because this is an exit we need to pass amountsOut as the amountsIn and\n    // bptIn as the minBptOut to this calcPriceImpact function.\n    const evmPriceImpact = await sdkPool.calcPriceImpact(\n      expectedAmountsOut,\n      evmBptIn,\n      false\n    );\n    const priceImpact = Number(formatFixed(evmPriceImpact, 18));\n\n    if (isSingleTokenExit) {\n      const tokenOutIndex = indexOfAddress(\n        // Use token list from the pool to ensure we get the correct index\n        tokensOut,\n        tokenOutAddressForSor\n      );\n      const amountsOut = this.getSingleAmountOut(\n        expectedAmountsOut,\n        tokenOutIndex,\n        tokenOut\n      );\n      return {\n        amountsOut,\n        priceImpact,\n        txReady: true,\n      };\n    } else {\n      const amountsOut = this.getAmountsOut(expectedAmountsOut, tokensOut);\n      return {\n        amountsOut,\n        priceImpact,\n        txReady: true,\n      };\n    }\n  }\n\n  private getSingleAmountOut(\n    amountsOut: string[],\n    tokenOutIndex: number,\n    tokenOut: TokenInfo\n  ): AmountsOut {\n    const amountOut = amountsOut[tokenOutIndex];\n    const normalizedAmountOut = formatFixed(\n      amountOut,\n      tokenOut.decimals\n    ).toString();\n    return {\n      [tokenOut.address]: normalizedAmountOut,\n    };\n  }\n\n  private getAmountsOut(\n    expectedAmountsOut: string[],\n    tokensOut: string[]\n  ): AmountsOut {\n    const amountsOut: AmountsOut = {};\n    const allPoolTokens = flatTokenTree(this.pool.value);\n\n    expectedAmountsOut.forEach((amount, i) => {\n      const token = allPoolTokens.find(poolToken =>\n        isSameAddress(poolToken.address, tokensOut[i])\n      );\n\n      if (token) {\n        const realAddress = getAddress(token.address);\n        const scaledAmount = formatFixed(\n          amount,\n          token.decimals ?? 18\n        ).toString();\n        amountsOut[realAddress] = scaledAmount;\n      }\n    });\n\n    return amountsOut;\n  }\n}\n","import { POOLS } from '@/constants/pools';\nimport { TOKENS } from '@/constants/tokens';\nimport {\n  formatAddressForSor,\n  indexOfAddress,\n  isSameAddress,\n  selectByAddress,\n} from '@/lib/utils';\nimport { getBalancerSDK } from '@/dependencies/balancer-sdk';\nimport { Pool } from '@/services/pool/types';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { BalancerSDK, PoolWithMethods } from '@feeless/sdk';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport { Ref } from 'vue';\nimport { ExitParams, ExitPoolHandler, QueryOutput } from './exit-pool.handler';\nimport { tokensListExclBpt } from '@/composables/usePoolHelpers';\n\nexport type ExitExactOutResponse = ReturnType<\n  PoolWithMethods['buildExitExactTokensOut']\n>;\n/**\n * Handles cases where tokens out are specified for the exit using SDK's\n * buildExitExactTokensOut function.\n */\nexport class ExactOutExitHandler implements ExitPoolHandler {\n  private lastExitRes?: ExitExactOutResponse;\n\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  async exit(params: ExitParams): Promise<TransactionResponse> {\n    await this.queryExit(params);\n\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\n\n    const txBuilder = new TransactionBuilder(params.signer);\n    const { to, data } = this.lastExitRes;\n\n    return txBuilder.raw.sendTransaction({ to, data });\n  }\n\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\n    const { signer, tokenInfo, slippageBsp, amountsOut } = params;\n    const exiter = await signer.getAddress();\n    const slippage = slippageBsp.toString();\n    const sdkPool = await getBalancerSDK().pools.find(this.pool.value.id);\n    const tokenOut = selectByAddress(tokenInfo, amountsOut[0].address);\n\n    if (!sdkPool) throw new Error('Failed to find pool: ' + this.pool.value.id);\n    if (!tokenOut)\n      throw new Error(\n        'Could not find exit token in pool tokens list: ' +\n          amountsOut[0].address +\n          ' allTokens: ' +\n          JSON.stringify(Object.keys(tokenInfo))\n      );\n\n    const tokenOutAddress = formatAddressForSor(tokenOut.address);\n    const nativeAssetExit = isSameAddress(tokenOutAddress, POOLS.ZeroAddress);\n\n    const poolTokensList = nativeAssetExit\n      ? this.replaceWethWithEth(this.pool.value.tokensList)\n      : tokensListExclBpt(this.pool.value);\n    const tokenOutIndex = indexOfAddress(poolTokensList, tokenOutAddress);\n\n    const amountOut = amountsOut[0].value;\n    const evmAmountOut = parseFixed(amountOut, tokenOut.decimals).toString();\n\n    const fullAmountsOut = this.getFullAmounts(\n      poolTokensList,\n      tokenOutIndex,\n      evmAmountOut\n    );\n\n    // Add native asset to the list of tokens to exit\n    this.lastExitRes = sdkPool.buildExitExactTokensOut(\n      exiter,\n      poolTokensList,\n      fullAmountsOut,\n      slippage\n    );\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\n\n    // Because this is an exit we need to pass amountsOut as the amountsIn and\n    // bptIn as the minBptOut to this calcPriceImpact function.\n    const evmPriceImpact = await sdkPool.calcPriceImpact(\n      fullAmountsOut,\n      this.lastExitRes.expectedBPTIn,\n      false\n    );\n\n    const priceImpact = Number(formatFixed(evmPriceImpact, 18));\n\n    return {\n      amountsOut: { [tokenOutAddress]: amountOut },\n      priceImpact,\n      txReady: true,\n    };\n  }\n\n  replaceWethWithEth(addresses: string[]): string[] {\n    return addresses.map(address => {\n      if (isSameAddress(address, TOKENS.Addresses.wNativeAsset)) {\n        return POOLS.ZeroAddress;\n      }\n      return address;\n    });\n  }\n\n  private getFullAmounts(\n    poolTokens: string[],\n    tokenOutIndex: number,\n    tokenOutAmount: string\n  ): string[] {\n    // Set token amounts to 0\n    const allPoolTokensAmounts = poolTokens.map(() => '0');\n    // Set the exit token amount to tokenOutAmount\n    allPoolTokensAmounts[tokenOutIndex] = tokenOutAmount || '0';\n    return allPoolTokensAmounts;\n  }\n}\n","import { Pool } from '@/services/pool/types';\nimport { BalancerSDK, PoolWithMethods } from '@feeless/sdk';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { Ref } from 'vue';\nimport {\n  AmountsOut,\n  ExitParams,\n  ExitPoolHandler,\n  QueryOutput,\n} from './exit-pool.handler';\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport { isSameAddress, removeAddress } from '@/lib/utils';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { flatTokenTree } from '@/composables/usePoolHelpers';\nimport { getAddress } from '@ethersproject/address';\n\nexport type RecoveryExitResponse = ReturnType<\n  PoolWithMethods['buildRecoveryExit']\n>;\n/**\n * Handles cases where the pool is in a recovery mode.\n */\nexport class RecoveryExitHandler implements ExitPoolHandler {\n  private lastExitRes?: RecoveryExitResponse;\n\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk: BalancerSDK\n  ) {}\n\n  async exit(params: ExitParams): Promise<TransactionResponse> {\n    await this.queryExit(params);\n\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\n\n    const txBuilder = new TransactionBuilder(params.signer);\n    const { to, data } = this.lastExitRes;\n\n    return txBuilder.raw.sendTransaction({ to, data });\n  }\n\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\n    const { signer, bptIn, slippageBsp, toInternalBalance } = params;\n    const exiter = await signer.getAddress();\n    const slippage = slippageBsp.toString();\n    const sdkPool = await this.sdk.pools.find(this.pool.value.id);\n\n    if (!sdkPool) throw new Error('Failed to find pool: ' + this.pool.value.id);\n\n    const freshPool = await this.sdk.data.poolsOnChain.refresh(sdkPool);\n\n    const evmBptIn = parseFixed(bptIn, 18).toString();\n\n    this.lastExitRes = await this.sdk.pools.buildRecoveryExit({\n      pool: freshPool,\n      userAddress: exiter,\n      bptAmount: evmBptIn,\n      slippage,\n      toInternalBalance,\n    });\n\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\n\n    const tokensOut = removeAddress(\n      this.pool.value.address,\n      this.lastExitRes.attributes.exitPoolRequest.assets\n    );\n\n    const expectedAmountsOut = this.lastExitRes.expectedAmountsOut;\n    // Because this is an exit we need to pass amountsOut as the amountsIn and\n    // bptIn as the minBptOut to this calcPriceImpact function.\n    const evmPriceImpact = await sdkPool.calcPriceImpact(\n      expectedAmountsOut,\n      evmBptIn,\n      false\n    );\n\n    const priceImpact = Number(formatFixed(evmPriceImpact, 18));\n\n    const amountsOut = this.getAmountsOut(expectedAmountsOut, tokensOut);\n\n    return {\n      amountsOut,\n      priceImpact,\n      txReady: true,\n    };\n  }\n\n  private getAmountsOut(\n    expectedAmountsOut: string[],\n    tokensOut: string[]\n  ): AmountsOut {\n    const amountsOut: AmountsOut = {};\n    const allPoolTokens = flatTokenTree(this.pool.value);\n\n    expectedAmountsOut.forEach((amount, i) => {\n      const token = allPoolTokens.find(poolToken =>\n        isSameAddress(poolToken.address, tokensOut[i])\n      );\n\n      if (token) {\n        const realAddress = getAddress(token.address);\n        const scaledAmount = formatFixed(\n          amount,\n          token.decimals ?? 18\n        ).toString();\n        amountsOut[realAddress] = scaledAmount;\n      }\n    });\n\n    return amountsOut;\n  }\n}\n","import { getBalancerSDK } from '@/dependencies/balancer-sdk';\nimport { Pool } from '@/services/pool/types';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { Ref } from 'vue';\nimport { SwapExitHandler } from './handlers/swap-exit.handler';\nimport { GeneralisedExitHandler } from './handlers/generalised-exit.handler';\nimport {\n  ExitParams,\n  ExitPoolHandler,\n  QueryOutput,\n} from './handlers/exit-pool.handler';\nimport { ExactInExitHandler } from './handlers/exact-in-exit.handler';\nimport { ExactOutExitHandler } from './handlers/exact-out-exit.handler';\nimport { RecoveryExitHandler } from './handlers/recovery-exit.handler';\n\nexport enum ExitHandler {\n  Swap = 'Swap',\n  Generalised = 'Generalised',\n  ExactOut = 'ExactOut',\n  ExactIn = 'ExactIn',\n  Recovery = 'Recovery',\n}\n\n/**\n * ExitPoolService acts as an adapter to underlying handlers based on the pool\n * type or other criteria. It wraps calls to the functions defined in the\n * ExitPoolHandler interface.\n */\nexport class ExitPoolService {\n  // The exit pool handler class to call exit pool interface functions.\n  public exitHandler: ExitPoolHandler;\n  public exitHandlerMap: Record<ExitHandler, ExitPoolHandler>;\n\n  /**\n   * Initialize the ExitPoolService\n   *\n   * @param {Pool} pool - The pool you want to exit.\n   * @param {BalancerSDK} sdk - Balancers SDK.\n   */\n  constructor(\n    public readonly pool: Ref<Pool>,\n    public readonly sdk = getBalancerSDK()\n  ) {\n    this.exitHandlerMap = {\n      [ExitHandler.Swap]: new SwapExitHandler(pool, sdk),\n      [ExitHandler.Generalised]: new GeneralisedExitHandler(pool, sdk),\n      [ExitHandler.ExactIn]: new ExactInExitHandler(pool, sdk),\n      [ExitHandler.ExactOut]: new ExactOutExitHandler(pool, sdk),\n      [ExitHandler.Recovery]: new RecoveryExitHandler(pool, sdk),\n    };\n    this.exitHandler = this.setExitHandler(ExitHandler.Generalised);\n  }\n\n  /**\n   * Sets ExitHandler class on instance.\n   *\n   * @param {ExitHandler} type - The type of exit handler to use.\n   * @returns {ExitPoolHandler} The ExitPoolHandler class to be used.\n   */\n  setExitHandler(type: ExitHandler): ExitPoolHandler {\n    return (this.exitHandler = this.exitHandlerMap[type]);\n  }\n\n  /**\n   * Executes an exit pool transaction.\n   *\n   * @param ...\n   * @returns {TransactionResponse} The ethers transaction response object.\n   */\n  async exit(params: ExitParams): Promise<TransactionResponse> {\n    return this.exitHandler.exit(params);\n  }\n\n  /**\n   * Performs a query join to fetch the expected output from a join transaction.\n   *\n   * @param ...\n   */\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\n    return this.exitHandler.queryExit(params);\n  }\n}\n"],"names":["ExitType","ExitType2","SwapExitHandler","pool","sdk","__publicField","params","userAddress","to","data","value","TransactionBuilder","bptIn","tokenInfo","amountsOut","signer","amountIn","tokenIn","selectByAddress","tokenOut","bnum","hasFetchedPoolsForSor","fetchPoolsForSor","safeAmountIn","overflowProtected","bnumAmountIn","parseFixed","gasPrice","formatAddressForSor","amountOut","formatFixed","priceImpact","safeAmountOut","bnumAmountOut","price","BigNumber","marketSp","exitType","swapInfo","maxSlippage","deadline","getTimestampSecondsFromNow","kind","SwapType","GeneralisedExitHandler","txBuilder","encodedCall","slippageBsp","relayerSignature","approvalActions","bptInValid","evmAmountIn","_a","signerAddress","slippage","isRelayerApproved","balancer","getBalancerSDK","SimulationType","error","_b","_c","_d","expectedAmountsOut","tokensOut","allPoolTokens","flatTokenTree","amount","i","token","isSameAddress","poolToken","realAddress","getAddress","scaledAmount","ExactInExitHandler","exiter","sdkPool","isSingleTokenExit","evmBptIn","tokenOutAddressForSor","singleTokenMaxOutAddress","shouldUnwrapNativeAsset","NATIVE_ASSET_ADDRESS","removeAddress","evmPriceImpact","tokenOutIndex","indexOfAddress","normalizedAmountOut","ExactOutExitHandler","tokenOutAddress","poolTokensList","POOLS","tokensListExclBpt","evmAmountOut","fullAmountsOut","addresses","address","TOKENS","poolTokens","tokenOutAmount","allPoolTokensAmounts","RecoveryExitHandler","toInternalBalance","freshPool","ExitHandler","ExitPoolService","type"],"mappings":"+ZAWY,IAAAA,GAAAA,IACVA,EAAAC,EAAA,QAAA,CAAA,EAAA,UACAD,EAAAC,EAAA,SAAA,CAAA,EAAA,WAFUD,IAAAA,GAAA,CAAA,CAAA,ECWL,MAAME,CAA2C,CAGtD,YACkBC,EACAC,EAChB,CALMC,EAAA,sBAGU,KAAA,KAAAF,EACA,KAAA,IAAAC,CACf,CAEH,MAAM,KAAKE,EAAkD,CAC3D,MAAMC,EAAc,MAAMD,EAAO,OAAO,WAAW,EAGnD,GAFM,MAAA,KAAK,UAAUA,CAAM,EAEvB,CAAC,KAAK,cACF,MAAA,IAAI,MAAM,sCAAsC,EAExD,KAAM,CAAE,GAAAE,EAAI,KAAAC,EAAM,MAAAC,GAAU,KAAK,kBAC/BJ,EAAO,SACP,KAAK,cACLA,EAAO,YACPC,CAAA,EAIK,OADW,IAAII,EAAmBL,EAAO,MAAM,EACrC,IAAI,gBAAgB,CACnC,GAAAE,EACA,KAAAC,EACA,MAAAC,CAAA,CACD,CACH,CAEA,MAAM,UAAUJ,EAA0C,CACpD,OAAAA,EAAO,WAAaN,EAAS,QACxB,KAAK,gBAAgBM,CAAM,EAE3B,KAAK,gBAAgBA,CAAM,CAEtC,CAUA,MAAc,gBAAgB,CAC5B,MAAAM,EACA,UAAAC,EACA,WAAAC,EACA,OAAAC,CAAA,EACmC,CACnC,MAAMC,EAAWJ,EACXK,EAAUC,EAAgBL,EAAW,KAAK,KAAK,MAAM,OAAO,EAE5DM,EAAWN,EAAUC,EAAW,CAAC,EAAE,OAAO,EAE5C,GAAA,CAACG,GAAW,CAACE,EACT,MAAA,IAAI,MAAM,kCAAkC,EACpD,GAAI,CAACH,GAAYI,EAAKJ,CAAQ,EAAE,GAAG,CAAC,EAC3B,MAAA,CACL,WAAY,CAAE,CAACG,EAAS,OAAO,EAAG,GAAI,EACtC,YAAa,EACb,QAAS,EAAA,EAGRE,EAAsB,OAAO,MAAMC,EAAiB,EAEzD,MAAMC,EAAeC,EAAkBZ,EAAOK,EAAQ,QAAQ,EACxDQ,EAAeC,EAAWH,EAAcN,EAAQ,QAAQ,EACxDU,EAAW,MAAM,KAAK,YAAYZ,CAAM,EAE9C,KAAK,cAAgB,MAAM,KAAK,IAAI,MAAM,iBAAiB,CACzD,QAASE,EAAQ,QACjB,SAAUW,EAAoBT,EAAS,OAAO,EAC9C,OAAQM,EACR,SAAAE,EACA,SAAU,CAAA,CACX,EAED,MAAME,EAAYC,EAChB,KAAK,cAAc,aACnBX,EAAS,QAAA,EAEX,GAAIC,EAAKS,CAAS,EAAE,GAAG,CAAC,EAAS,MAAA,IAAI,MAAM,uBAAuB,EAElE,MAAME,EAAc,KAAK,gBACvBf,EACAa,EACA,KAAK,cAAc,QAAA,EAGd,MAAA,CACL,WAAY,CAAE,CAACV,EAAS,OAAO,EAAGU,CAAU,EAC5C,YAAAE,EACA,QAAS,EAAA,CAEb,CAKA,MAAc,gBAAgB,CAC5B,UAAAlB,EACA,WAAAC,EACA,OAAAC,CAAA,EACmC,CACnC,MAAME,EAAUC,EAAgBL,EAAW,KAAK,KAAK,MAAM,OAAO,EAC5DM,EAAWD,EAAgBL,EAAWC,EAAW,CAAC,EAAE,OAAO,EAC7D,GAAA,CAACG,GAAW,CAACE,EACT,MAAA,IAAI,MAAM,kCAAkC,EAE9C,MAAAU,EAAYf,EAAW,CAAC,EAAE,MAChC,GAAI,CAACe,GAAaT,EAAKS,CAAS,EAAE,GAAG,CAAC,EACpC,MAAO,CAAE,WAAY,GAAI,YAAa,EAAG,QAAS,IAE/CR,EAAsB,OAAO,MAAMC,EAAiB,EAEzD,MAAMU,EAAgBR,EACpBV,EAAW,CAAC,EAAE,MACdK,EAAS,QAAA,EAELc,EAAgBP,EAAWM,EAAeb,EAAS,QAAQ,EAC3DQ,EAAW,MAAM,KAAK,YAAYZ,CAAM,EAE9C,KAAK,cAAgB,MAAM,KAAK,IAAI,MAAM,kBAAkB,CAC1D,QAASE,EAAQ,QACjB,SAAUW,EAAoBT,EAAS,OAAO,EAC9C,OAAQc,EACR,SAAAN,EACA,SAAU,CAAA,CACX,EAED,MAAMX,EAAWc,EACf,KAAK,cAAc,aACnBb,EAAQ,QAAA,EAEV,GAAIG,EAAKJ,CAAQ,EAAE,GAAG,CAAC,EAAS,MAAA,IAAI,MAAM,uBAAuB,EAEjE,MAAMe,EAAc,KAAK,gBACvBf,EACAa,EACA,KAAK,cAAc,QAAA,EAGd,MAAA,CACL,WAAY,CAAE,CAACV,EAAS,OAAO,EAAGU,CAAU,EAC5C,YAAAE,EACA,QAAS,EAAA,CAEb,CAEA,MAAc,YAAYhB,EAA2C,CACnE,MAAMmB,GAAS,MAAMnB,EAAO,eAAe,SAAS,EAEpD,GAAI,CAACmB,EAAa,MAAA,IAAI,MAAM,4BAA4B,EAEjD,OAAAC,EAAU,KAAKD,CAAK,CAC7B,CAEQ,gBACNlB,EACAa,EACAO,EACQ,CAER,MAAML,EADiBX,EAAKJ,CAAQ,EAAE,IAAIa,CAAS,EAChB,IAAIO,CAAQ,EAAE,MAAM,CAAC,GAAK,EAG7D,OAAO,KAAK,IAAI,EAAGL,EAAY,SAAU,CAAA,CAC3C,CAEQ,kBACNM,EACAC,EACAC,EACAhC,EACA,CACA,MAAMiC,EAAWC,EAA2B,EAAE,EAAE,SAAS,EACnDC,EACJL,IAAarC,EAAS,QAClB2C,EAAS,YACTA,EAAS,aAER,OAAA,KAAK,IAAI,MAAM,UAAU,CAC9B,YAAApC,EACA,SAAA+B,EACA,KAAAI,EACA,SAAAF,EACA,YAAAD,CAAA,CACD,CACH,CACF,CC3LO,MAAMK,CAAkD,CAI7D,YACkBzC,EACAC,EAChB,CANMC,EAAA,eACAA,EAAA,iBAGU,KAAA,KAAAF,EACA,KAAA,IAAAC,CACf,CAEH,MAAM,KAAKE,EAAkD,CAGvD,GAFE,MAAA,KAAK,UAAUA,CAAM,EAEvB,CAAC,KAAK,OACF,MAAA,IAAI,MAAM,kCAAkC,EAGpD,MAAMuC,EAAY,IAAIlC,EAAmBL,EAAO,MAAM,EAChD,CAAE,GAAAE,EAAI,YAAAsC,GAAgB,KAAK,OAEjC,OAAOD,EAAU,IAAI,gBAAgB,CAAE,GAAArC,EAAI,KAAMsC,EAAa,CAChE,CAEA,MAAM,UAAU,CACd,MAAAlC,EACA,OAAAG,EACA,YAAAgC,EACA,iBAAAC,EACA,gBAAAC,EACA,WAAAC,CAAA,EACmC,aACnC,MAAMC,EAAczB,EAClBd,GAAS,MACTwC,EAAA,KAAK,KAAK,MAAM,UAAhB,YAAAA,EAAyB,WAAY,EAAA,EAEnC,GAAAD,EAAY,IAAI,CAAC,EAAS,MAAA,IAAI,MAAM,qBAAqB,EAEvD,MAAAE,EAAgB,MAAMtC,EAAO,aAC7BuC,EAAWP,EAAY,WACvBQ,EACHL,GAAcD,EAAgB,SAAW,GAAM,CAAC,CAACD,EAC9CQ,EAAWC,IAEb,GAAA,CACE,KAAK,UAAYF,EACd,KAAA,OAAS,MAAMC,EAAS,MAAM,gBACjC,KAAK,KAAK,MAAM,GAChBL,EAAY,SAAS,EACrBE,EACAC,EACAvC,EACA2C,EAAe,OACfV,EACA,KAAK,SAAS,cAAA,EAGX,KAAA,SAAW,MAAMQ,EAAS,MAAM,YACnC,KAAK,KAAK,MAAM,GAChBL,EAAY,SAAS,EACrBE,EACAtC,CAAA,QAGG4C,EAAO,CACd,cAAQ,MAAMA,CAAK,EACnB,QAAQ,IAAI,aAAa,EACnB,IAAI,MAAM,uBAAuB,CACzC,CAEA,GAAI,CAAC,KAAK,UAAY,CAAC,KAAK,OACpB,MAAA,IAAI,MAAM,uBAAuB,EAMlC,MAAA,CACL,YAL0BvC,EAC1BU,IAAY8B,EAAA,KAAK,SAAL,YAAAA,EAAa,cAAe,KAAK,SAAS,YAAa,EAAE,GACrE,SAAS,EAIT,WAAY,KAAK,mBACfC,EAAA,KAAK,SAAL,YAAAA,EAAa,qBAAsB,KAAK,SAAS,sBACjDC,EAAA,KAAK,SAAL,YAAAA,EAAa,YAAa,KAAK,SAAS,SAC1C,EACA,QAAS,CAAC,CAAC,KAAK,MAAA,CAEpB,CAKQ,iBACNC,EACAC,EACY,CACZ,MAAMlD,EAAyB,CAAA,EACzBmD,EAAgBC,EAAc,KAAK,KAAK,KAAK,EAEhC,OAAAH,EAAA,QAAQ,CAACI,EAAQC,IAAM,CACxC,MAAMC,EAAQJ,EAAc,QAC1BK,EAAcC,EAAU,QAASP,EAAUI,CAAC,CAAC,CAAA,EAG/C,GAAIC,EAAO,CACH,MAAAG,EAAcC,EAAWJ,EAAM,OAAO,EACtCK,EAAe5C,EACnBqC,EACAE,EAAM,UAAY,IAClB,SAAS,EACXvD,EAAW0D,CAAW,EAAIE,CAC5B,CAAA,CACD,EAEM5D,CACT,CACF,CC1GO,MAAM6D,CAA8C,CAGzD,YACkBxE,EACAC,EAChB,CALMC,EAAA,oBAGU,KAAA,KAAAF,EACA,KAAA,IAAAC,CACf,CAEH,MAAM,KAAKE,EAAkD,CAG3D,GAFM,MAAA,KAAK,UAAUA,CAAM,EAEvB,CAAC,KAAK,YAAmB,MAAA,IAAI,MAAM,2BAA2B,EAElE,MAAMuC,EAAY,IAAIlC,EAAmBL,EAAO,MAAM,EAChD,CAAE,GAAAE,EAAI,KAAAC,GAAS,KAAK,YAE1B,OAAOoC,EAAU,IAAI,gBAAgB,CAAE,GAAArC,EAAI,KAAAC,EAAM,CACnD,CAEA,MAAM,UAAUH,EAA0C,CACxD,KAAM,CAAE,OAAAS,EAAQ,UAAAF,EAAW,MAAAD,EAAO,YAAAmC,EAAa,WAAAjC,CAAe,EAAAR,EACxDsE,EAAS,MAAM7D,EAAO,aACtBuC,EAAWP,EAAY,WACvB8B,EAAU,MAAMpB,EAAe,EAAE,MAAM,KAAK,KAAK,KAAK,MAAM,EAAE,EAC9DtC,EAAWD,EAAgBL,EAAWC,EAAW,CAAC,EAAE,OAAO,EAEjE,GAAI,CAAC+D,EAAS,MAAM,IAAI,MAAM,wBAA0B,KAAK,KAAK,MAAM,EAAE,EAC1E,GAAI,CAAC1D,EACH,MAAM,IAAI,MACR,kDACEL,EAAW,CAAC,EAAE,QACd,eACA,KAAK,UAAU,OAAO,KAAKD,CAAS,CAAC,CAAA,EAGrC,MAAAiE,EAAoBhE,EAAW,SAAW,EAC1CiE,EAAWrD,EAAWd,EAAO,EAAE,EAAE,SAAS,EAC1CoE,EAAwBpD,EAAoBT,EAAS,OAAO,EAC5D8D,EAA2BH,EAC7BE,EACA,OACEE,EAA0BZ,EAC9BnD,EAAS,QACTgE,CAAA,EAYF,GATK,KAAA,YAAc,MAAMN,EAAQ,oBAC/BD,EACAG,EACAzB,EACA4B,EAEAD,GAAA,YAAAA,EAA0B,aAAY,EAGpC,CAAC,KAAK,YAAmB,MAAA,IAAI,MAAM,2BAA2B,EAElE,MAAMjB,EAAYoB,EAChB,KAAK,KAAK,MAAM,QAChB,KAAK,YAAY,WAAW,gBAAgB,MAAA,EAExCrB,EAAqB,KAAK,YAAY,mBAGtCsB,EAAiB,MAAMR,EAAQ,gBACnCd,EACAgB,EACA,EAAA,EAEIhD,EAAc,OAAOD,EAAYuD,EAAgB,EAAE,CAAC,EAE1D,GAAIP,EAAmB,CACrB,MAAMQ,EAAgBC,EAEpBvB,EACAgB,CAAA,EAOK,MAAA,CACL,WANiB,KAAK,mBACtBjB,EACAuB,EACAnE,CAAA,EAIA,YAAAY,EACA,QAAS,EAAA,CACX,KAGO,OAAA,CACL,WAFiB,KAAK,cAAcgC,EAAoBC,CAAS,EAGjE,YAAAjC,EACA,QAAS,EAAA,CAGf,CAEQ,mBACNjB,EACAwE,EACAnE,EACY,CACN,MAAAU,EAAYf,EAAWwE,CAAa,EACpCE,EAAsB1D,EAC1BD,EACAV,EAAS,UACT,SAAS,EACJ,MAAA,CACL,CAACA,EAAS,OAAO,EAAGqE,CAAA,CAExB,CAEQ,cACNzB,EACAC,EACY,CACZ,MAAMlD,EAAyB,CAAA,EACzBmD,EAAgBC,EAAc,KAAK,KAAK,KAAK,EAEhC,OAAAH,EAAA,QAAQ,CAACI,EAAQC,IAAM,CACxC,MAAMC,EAAQJ,EAAc,QAC1BK,EAAcC,EAAU,QAASP,EAAUI,CAAC,CAAC,CAAA,EAG/C,GAAIC,EAAO,CACH,MAAAG,EAAcC,EAAWJ,EAAM,OAAO,EACtCK,EAAe5C,EACnBqC,EACAE,EAAM,UAAY,IAClB,SAAS,EACXvD,EAAW0D,CAAW,EAAIE,CAC5B,CAAA,CACD,EAEM5D,CACT,CACF,CChJO,MAAM2E,CAA+C,CAG1D,YACkBtF,EACAC,EAChB,CALMC,EAAA,oBAGU,KAAA,KAAAF,EACA,KAAA,IAAAC,CACf,CAEH,MAAM,KAAKE,EAAkD,CAG3D,GAFM,MAAA,KAAK,UAAUA,CAAM,EAEvB,CAAC,KAAK,YAAmB,MAAA,IAAI,MAAM,2BAA2B,EAElE,MAAMuC,EAAY,IAAIlC,EAAmBL,EAAO,MAAM,EAChD,CAAE,GAAAE,EAAI,KAAAC,GAAS,KAAK,YAE1B,OAAOoC,EAAU,IAAI,gBAAgB,CAAE,GAAArC,EAAI,KAAAC,EAAM,CACnD,CAEA,MAAM,UAAUH,EAA0C,CACxD,KAAM,CAAE,OAAAS,EAAQ,UAAAF,EAAW,YAAAkC,EAAa,WAAAjC,GAAeR,EACjDsE,EAAS,MAAM7D,EAAO,aACtBuC,EAAWP,EAAY,WACvB8B,EAAU,MAAMpB,EAAe,EAAE,MAAM,KAAK,KAAK,KAAK,MAAM,EAAE,EAC9DtC,EAAWD,EAAgBL,EAAWC,EAAW,CAAC,EAAE,OAAO,EAEjE,GAAI,CAAC+D,EAAS,MAAM,IAAI,MAAM,wBAA0B,KAAK,KAAK,MAAM,EAAE,EAC1E,GAAI,CAAC1D,EACH,MAAM,IAAI,MACR,kDACEL,EAAW,CAAC,EAAE,QACd,eACA,KAAK,UAAU,OAAO,KAAKD,CAAS,CAAC,CAAA,EAGrC,MAAA6E,EAAkB9D,EAAoBT,EAAS,OAAO,EAGtDwE,EAFkBrB,EAAcoB,EAAiBE,EAAM,WAAW,EAGpE,KAAK,mBAAmB,KAAK,KAAK,MAAM,UAAU,EAClDC,EAAkB,KAAK,KAAK,KAAK,EAC/BP,EAAgBC,EAAeI,EAAgBD,CAAe,EAE9D7D,EAAYf,EAAW,CAAC,EAAE,MAC1BgF,EAAepE,EAAWG,EAAWV,EAAS,QAAQ,EAAE,WAExD4E,EAAiB,KAAK,eAC1BJ,EACAL,EACAQ,CAAA,EAUF,GANA,KAAK,YAAcjB,EAAQ,wBACzBD,EACAe,EACAI,EACAzC,CAAA,EAEE,CAAC,KAAK,YAAmB,MAAA,IAAI,MAAM,2BAA2B,EAI5D,MAAA+B,EAAiB,MAAMR,EAAQ,gBACnCkB,EACA,KAAK,YAAY,cACjB,EAAA,EAGIhE,EAAc,OAAOD,EAAYuD,EAAgB,EAAE,CAAC,EAEnD,MAAA,CACL,WAAY,CAAE,CAACK,CAAe,EAAG7D,CAAU,EAC3C,YAAAE,EACA,QAAS,EAAA,CAEb,CAEA,mBAAmBiE,EAA+B,CACzC,OAAAA,EAAU,IAAeC,GAC1B3B,EAAc2B,EAASC,EAAO,UAAU,YAAY,EAC/CN,EAAM,YAERK,CACR,CACH,CAEQ,eACNE,EACAb,EACAc,EACU,CAEV,MAAMC,EAAuBF,EAAW,IAAI,IAAM,GAAG,EAEhC,OAAAE,EAAAf,CAAa,EAAIc,GAAkB,IACjDC,CACT,CACF,CCrGO,MAAMC,CAA+C,CAG1D,YACkBnG,EACAC,EAChB,CALMC,EAAA,oBAGU,KAAA,KAAAF,EACA,KAAA,IAAAC,CACf,CAEH,MAAM,KAAKE,EAAkD,CAG3D,GAFM,MAAA,KAAK,UAAUA,CAAM,EAEvB,CAAC,KAAK,YAAmB,MAAA,IAAI,MAAM,2BAA2B,EAElE,MAAMuC,EAAY,IAAIlC,EAAmBL,EAAO,MAAM,EAChD,CAAE,GAAAE,EAAI,KAAAC,GAAS,KAAK,YAE1B,OAAOoC,EAAU,IAAI,gBAAgB,CAAE,GAAArC,EAAI,KAAAC,EAAM,CACnD,CAEA,MAAM,UAAUH,EAA0C,CACxD,KAAM,CAAE,OAAAS,EAAQ,MAAAH,EAAO,YAAAmC,EAAa,kBAAAwD,GAAsBjG,EACpDsE,EAAS,MAAM7D,EAAO,aACtBuC,EAAWP,EAAY,WACvB8B,EAAU,MAAM,KAAK,IAAI,MAAM,KAAK,KAAK,KAAK,MAAM,EAAE,EAE5D,GAAI,CAACA,EAAS,MAAM,IAAI,MAAM,wBAA0B,KAAK,KAAK,MAAM,EAAE,EAE1E,MAAM2B,EAAY,MAAM,KAAK,IAAI,KAAK,aAAa,QAAQ3B,CAAO,EAE5DE,EAAWrD,EAAWd,EAAO,EAAE,EAAE,SAAS,EAUhD,GARA,KAAK,YAAc,MAAM,KAAK,IAAI,MAAM,kBAAkB,CACxD,KAAM4F,EACN,YAAa5B,EACb,UAAWG,EACX,SAAAzB,EACA,kBAAAiD,CAAA,CACD,EAEG,CAAC,KAAK,YAAmB,MAAA,IAAI,MAAM,2BAA2B,EAElE,MAAMvC,EAAYoB,EAChB,KAAK,KAAK,MAAM,QAChB,KAAK,YAAY,WAAW,gBAAgB,MAAA,EAGxCrB,EAAqB,KAAK,YAAY,mBAGtCsB,EAAiB,MAAMR,EAAQ,gBACnCd,EACAgB,EACA,EAAA,EAGIhD,EAAc,OAAOD,EAAYuD,EAAgB,EAAE,CAAC,EAInD,MAAA,CACL,WAHiB,KAAK,cAActB,EAAoBC,CAAS,EAIjE,YAAAjC,EACA,QAAS,EAAA,CAEb,CAEQ,cACNgC,EACAC,EACY,CACZ,MAAMlD,EAAyB,CAAA,EACzBmD,EAAgBC,EAAc,KAAK,KAAK,KAAK,EAEhC,OAAAH,EAAA,QAAQ,CAACI,EAAQC,IAAM,CACxC,MAAMC,EAAQJ,EAAc,QAC1BK,EAAcC,EAAU,QAASP,EAAUI,CAAC,CAAC,CAAA,EAG/C,GAAIC,EAAO,CACH,MAAAG,EAAcC,EAAWJ,EAAM,OAAO,EACtCK,EAAe5C,EACnBqC,EACAE,EAAM,UAAY,IAClB,SAAS,EACXvD,EAAW0D,CAAW,EAAIE,CAC5B,CAAA,CACD,EAEM5D,CACT,CACF,CCjGY,IAAA2F,GAAAA,IACVA,EAAA,KAAO,OACPA,EAAA,YAAc,cACdA,EAAA,SAAW,WACXA,EAAA,QAAU,UACVA,EAAA,SAAW,WALDA,IAAAA,GAAA,CAAA,CAAA,EAaL,MAAMC,EAAgB,CAW3B,YACkBvG,EACAC,EAAMqD,IACtB,CAZKpD,EAAA,oBACAA,EAAA,uBASW,KAAA,KAAAF,EACA,KAAA,IAAAC,EAEhB,KAAK,eAAiB,CACnB,KAAmB,IAAIF,EAAgBC,EAAMC,CAAG,EAChD,YAA0B,IAAIwC,EAAuBzC,EAAMC,CAAG,EAC9D,QAAsB,IAAIuE,EAAmBxE,EAAMC,CAAG,EACtD,SAAuB,IAAIqF,EAAoBtF,EAAMC,CAAG,EACxD,SAAuB,IAAIkG,EAAoBnG,EAAMC,CAAG,CAAA,EAEtD,KAAA,YAAc,KAAK,eAAe,aAAuB,CAChE,CAQA,eAAeuG,EAAoC,CACjD,OAAQ,KAAK,YAAc,KAAK,eAAeA,CAAI,CACrD,CAQA,MAAM,KAAKrG,EAAkD,CACpD,OAAA,KAAK,YAAY,KAAKA,CAAM,CACrC,CAOA,MAAM,UAAUA,EAA0C,CACjD,OAAA,KAAK,YAAY,UAAUA,CAAM,CAC1C,CACF"}