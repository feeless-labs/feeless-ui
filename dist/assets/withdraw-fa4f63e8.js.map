{"version":3,"file":"withdraw-fa4f63e8.js","sources":["../../src/providers/local/exit-pool.provider.ts","../../src/components/forms/pool_actions/WithdrawForm/components/ProportionalWithdrawalTokenInfo.vue","../../src/components/forms/pool_actions/WithdrawForm/components/ProportionalWithdrawalInput.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawTotals.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawPreviewModal/components/WithdrawSummary.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawPreviewModal/components/WithdrawActions.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawPreviewModal/WithdrawPreviewModal.vue","../../src/components/forms/pool_actions/WithdrawForm/WithdrawForm.vue","../../src/composables/pools/useWithdrawPageTabs.ts","../../src/components/contextual/pages/pool/withdraw/WithdrawPageTabs.vue","../../src/components/contextual/pages/pool/withdraw/WithdrawPage.vue","../../src/pages/pool/withdraw.vue"],"sourcesContent":["import { nextTick } from 'vue';\nimport useNumbers from '@/composables/useNumbers';\nimport {\n  fiatValueOf,\n  flatTokenTree,\n  isComposableStableV1,\n  isDeep,\n  isPreMintedBptType,\n  isRecoveryExitsOnly,\n  tokenTreeLeafs,\n  tokenTreeNodes,\n} from '@/composables/usePoolHelpers';\nimport useRelayerApproval, {\n  RelayerType,\n} from '@/composables/approvals/useRelayerApproval';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { useTxState } from '@/composables/useTxState';\nimport { useUserSettings } from '@/providers/user-settings.provider';\nimport {\n  HIGH_PRICE_IMPACT,\n  REKT_PRICE_IMPACT,\n} from '@/constants/poolLiquidity';\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport symbolKeys from '@/constants/symbol.keys';\nimport {\n  bnSum,\n  bnum,\n  includesAddress,\n  isSameAddress,\n  removeAddress,\n  selectByAddress,\n} from '@/lib/utils';\nimport {\n  ExitHandler,\n  ExitPoolService,\n} from '@/services/balancer/pools/exits/exit-pool.service';\nimport { ExitType } from '@/services/balancer/pools/exits/handlers/exit-pool.handler';\nimport { Pool, PoolToken } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TokenInfoMap } from '@/types/TokenList';\nimport { TransactionActionInfo } from '@/types/transactions';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { UseQueryReturnType, useQuery } from '@tanstack/vue-query';\nimport debounce from 'debounce-promise';\nimport { safeInject } from '../inject';\nimport { useApp } from '@/composables/useApp';\nimport { POOLS } from '@/constants/pools';\nimport { captureBalancerException } from '@/lib/utils/errors';\n\n/**\n * TYPES\n */\nexport type AmountOut = {\n  address: string;\n  value: string;\n  valid: boolean;\n  max: string;\n};\n\n/**\n * ExitPoolProvider\n *\n * Handles pool exiting state and transaction execution.\n */\nexport const exitPoolProvider = (\n  pool: Ref<Pool>,\n  debounceQueryExitMillis = 1000,\n  debounceGetSingleAssetMaxMillis = 1000\n) => {\n  /**\n   * STATE\n   */\n  const isMounted = ref(false);\n  const isSingleAssetExit = ref<boolean>(false);\n  const priceImpact = ref<number>(0);\n  const priceImpactValid = ref<boolean>(true);\n  const highPriceImpactAccepted = ref<boolean>(false);\n  const bptIn = ref<string>('0');\n  const bptInValid = ref<boolean>(true);\n  const txError = ref<string>('');\n  const singleAmountOut = reactive<AmountOut>({\n    address: '',\n    value: '',\n    max: '',\n    valid: true,\n  });\n  const propAmountsOut = ref<AmountOut[]>([]);\n  const isTxPayloadReady = ref<boolean>(false);\n\n  /**\n   * SERVICES\n   */\n  const exitPoolService = new ExitPoolService(pool);\n\n  /**\n   * COMPOSABLES\n   */\n  const { toFiat } = useNumbers();\n  const { injectTokens, getTokens, balanceFor } = useTokens();\n  const { txState, txInProgress } = useTxState();\n  const { transactionDeadline } = useApp();\n  const { slippageBsp } = useUserSettings();\n  const { account, getSigner } = useWeb3();\n  const { relayerSignature, relayerApprovalAction, relayerApprovalTx } =\n    useRelayerApproval(RelayerType.BATCH);\n\n  const debounceQueryExit = debounce(queryExit, debounceQueryExitMillis);\n  const debounceGetSingleAssetMax = debounce(\n    getSingleAssetMax,\n    debounceGetSingleAssetMaxMillis,\n    {\n      leading: true,\n    }\n  );\n\n  const queriesEnabled = computed(\n    (): boolean => isMounted.value && !txInProgress.value\n  );\n\n  // The user's BPT balance.\n  const bptBalance = computed((): string => balanceFor(pool.value.address));\n\n  const queryExitQuery = useQuery<\n    Awaited<ReturnType<typeof debounceQueryExit>>,\n    Error\n  >(\n    QUERY_KEYS.Pools.Exits.QueryExit(\n      account,\n      bptIn,\n      isSingleAssetExit,\n      singleAmountOut,\n      relayerSignature\n    ),\n    debounceQueryExit,\n    reactive({ enabled: queriesEnabled, refetchOnWindowFocus: false })\n  );\n\n  const singleAssetMaxQuery = useQuery<\n    Awaited<ReturnType<typeof debounceGetSingleAssetMax>>,\n    Error\n  >(\n    QUERY_KEYS.Pools.Exits.SingleAssetMax(\n      bptBalance,\n      isSingleAssetExit,\n      toRef(singleAmountOut, 'address')\n    ),\n    debounceGetSingleAssetMax,\n    reactive({ enabled: queriesEnabled, refetchOnWindowFocus: false })\n  );\n\n  /**\n   * COMPUTED\n   */\n  const isLoadingQuery = computed(\n    (): boolean => queryExitQuery.isFetching.value\n  );\n\n  const queryError = computed(\n    (): string | undefined => queryExitQuery.error.value?.message\n  );\n\n  const isLoadingMax = computed(\n    (): boolean => singleAssetMaxQuery.isFetching.value || !queriesEnabled.value\n  );\n\n  const maxError = computed(\n    (): string | undefined => singleAssetMaxQuery.error.value?.message\n  );\n\n  const isDeepPool = computed((): boolean => isDeep(pool.value));\n\n  const shouldSignRelayer = computed(\n    (): boolean =>\n      exitHandlerType.value === ExitHandler.Generalised &&\n      // Check if Batch Relayer is either approved, or signed\n      !(relayerApprovalTx.isUnlocked.value || relayerSignature.value)\n  );\n\n  const approvalActions = computed((): TransactionActionInfo[] =>\n    shouldSignRelayer.value ? [relayerApprovalAction.value] : []\n  );\n\n  const canSwapExit = computed(\n    (): boolean => isDeep(pool.value) && isPreMintedBptType(pool.value.poolType)\n  );\n\n  const shouldUseSwapExit = computed(\n    (): boolean =>\n      isSingleAssetExit.value &&\n      !includesAddress(pool.value.tokensList, singleAmountOut.address) &&\n      canSwapExit.value\n  );\n\n  const shouldUseGeneralisedExit = computed(\n    (): boolean =>\n      !isSingleAssetExit.value &&\n      (isDeep(pool.value) || isComposableStableV1(pool.value))\n  );\n\n  // Should exit via internal balance only in unique cases.\n  // e.g. exiting the Euler linear pools.\n  const shouldExitViaInternalBalance = computed(\n    (): boolean =>\n      !!POOLS.ExitViaInternalBalance &&\n      POOLS.ExitViaInternalBalance.includes(pool.value.id)\n  );\n\n  const shouldUseRecoveryExit = computed((): boolean =>\n    isRecoveryExitsOnly(pool.value)\n  );\n\n  const exitHandlerType = computed((): ExitHandler => {\n    if (shouldUseRecoveryExit.value) return ExitHandler.Recovery;\n    if (shouldUseSwapExit.value) return ExitHandler.Swap;\n    if (shouldUseGeneralisedExit.value) return ExitHandler.Generalised;\n    if (isSingleAssetExit.value) {\n      // If 'max' is clicked we want to pass in the full bpt balance.\n      if (singleAssetMaxed.value) return ExitHandler.ExactIn;\n      return ExitHandler.ExactOut;\n    }\n    return ExitHandler.ExactIn;\n  });\n\n  // All token addresses (excl. pre-minted BPT) in the pool token tree that can be used in exit functions.\n  const exitTokenAddresses = computed((): string[] => {\n    let addresses: string[] = [];\n\n    addresses = isDeep(pool.value)\n      ? tokenTreeNodes(pool.value.tokens)\n      : pool.value.tokensList;\n\n    return removeAddress(pool.value.address, addresses);\n  });\n\n  // Token meta data for all relevant exit tokens including pool BPT.\n  const exitTokenInfo = computed(\n    (): TokenInfoMap =>\n      getTokens([\n        ...exitTokenAddresses.value,\n        pool.value.address,\n        ...amountsOut.value.map(ao => ao.address),\n      ])\n  );\n\n  // All tokens extracted from the token tree, excl. pre-minted BPT.\n  const exitTokens = computed((): PoolToken[] => {\n    let tokens: PoolToken[] = [];\n\n    tokens = isDeep(pool.value) ? flatTokenTree(pool.value) : pool.value.tokens;\n\n    return tokens.filter(\n      token => !isSameAddress(token.address, pool.value.address)\n    );\n  });\n\n  // Amounts out to pass into exit functions\n  const amountsOut = computed((): AmountOut[] => {\n    if (isSingleAssetExit.value) return [singleAmountOut];\n    return propAmountsOut.value;\n  });\n\n  // Is the single asset out value equal to it's maximum?\n  const singleAssetMaxed = computed((): boolean => {\n    return bnum(singleAmountOut.value).eq(singleAmountOut.max);\n  });\n\n  // High price impact if value greater than 1%.\n  const highPriceImpact = computed((): boolean => {\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(HIGH_PRICE_IMPACT);\n  });\n\n  // rekt price impact if value greater than 20%.\n  const rektPriceImpact = computed((): boolean => {\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(REKT_PRICE_IMPACT);\n  });\n\n  // If price impact is high (> 1%), user has checked acceptance checkbox.\n  const hasAcceptedHighPriceImpact = computed((): boolean =>\n    highPriceImpact.value ? highPriceImpactAccepted.value : true\n  );\n\n  // The type of exit to perform, is the user specifying the bptIn or the amount\n  // of a token they want out?\n  const exitType = computed((): ExitType => {\n    if (isSingleAssetExit.value && !singleAssetMaxed.value)\n      // It's a single asset exit but the user has not maximized the withdrawal.\n      // So they are specifying an amount out.\n      return ExitType.GivenOut;\n\n    // It's either a single asset exit where the user has maxed their amount out\n    // so we should use their BPT balance or it's a proportional exit and they\n    // have specified bptIn via the slider.\n    return ExitType.GivenIn;\n  });\n\n  // Internal bptIn value, some cases require bptBalance to be used when they\n  // have maxed out the amountOut they want.\n  const _bptIn = computed((): string => {\n    if (isSingleAssetExit.value && singleAssetMaxed.value)\n      // The user has chosen to withdraw the maximum they can in a single token\n      // exit. To ensure no dust, use bptBalance.\n      return bptBalance.value;\n\n    return bptIn.value;\n  });\n\n  // User has a balance of BPT.\n  const hasBpt = computed(() => bnum(bptBalance.value).gt(0));\n\n  // Checks if amountsIn has any values > 0.\n  const hasAmountsOut = computed(() => {\n    return amountsOut.value.some(amountOut => bnum(amountOut.value).gt(0));\n  });\n\n  // Checks if BPT in is > 0\n  const hasBptIn = computed(() => bnum(bptIn.value).gt(0));\n\n  // Are amounts valid for transaction? That is bptIn and amountsOut.\n  const validAmounts = computed((): boolean => {\n    return isSingleAssetExit.value\n      ? amountsOut.value.every(ao => ao.valid && bnum(ao.value).gt(0))\n      : bptInValid.value && bnum(bptIn.value).gt(0);\n  });\n\n  // Map of amount out address to value as fiat amount.\n  const fiatAmountsOut = computed((): Record<string, string> => {\n    return Object.fromEntries(\n      amountsOut.value.map(({ address, value }) => [\n        address,\n        toFiat(value, address),\n      ])\n    );\n  });\n\n  // Sum of all amountsOut fiat values.\n  const fiatTotalOut = computed((): string => {\n    return bnSum(Object.values(fiatAmountsOut.value)).toString();\n  });\n\n  const fiatValueIn = computed(() => fiatValueOf(pool.value, bptIn.value));\n\n  /**\n   * METHODS\n   */\n\n  /**\n   * Simulate exit transaction to get expected output and calculate price impact.\n   */\n  async function queryExit() {\n    // This is so we can render - in UI instead of 0. If we set to 0 then it can be misleading.\n    priceImpactValid.value = false;\n\n    // Single asset exit, and token out amount is 0 or less\n    if (isSingleAssetExit.value && !validAmounts.value) return null;\n\n    // Proportional exit, and BPT in is 0 or less\n    if (!isSingleAssetExit.value && !hasBptIn.value) return null;\n\n    exitPoolService.setExitHandler(exitHandlerType.value);\n\n    console.log('exitHandler:', exitHandlerType.value);\n    try {\n      await nextTick();\n      const output = await exitPoolService.queryExit({\n        exitType: exitType.value,\n        bptIn: _bptIn.value,\n        amountsOut: amountsOut.value,\n        signer: getSigner(),\n        slippageBsp: slippageBsp.value,\n        tokenInfo: exitTokenInfo.value,\n        approvalActions: approvalActions.value,\n        bptInValid: bptInValid.value,\n        relayerSignature: relayerSignature.value,\n        transactionDeadline: transactionDeadline.value,\n        toInternalBalance: shouldExitViaInternalBalance.value,\n      });\n\n      priceImpact.value = output.priceImpact;\n      propAmountsOut.value = Object.keys(output.amountsOut).map(address => ({\n        address,\n        value: output.amountsOut[address],\n        max: '',\n        valid: true,\n      }));\n      isTxPayloadReady.value = output.txReady;\n\n      priceImpactValid.value = true;\n      return output;\n    } catch (error) {\n      logExitException(error as Error, queryExitQuery);\n      throw new Error('Failed to construct exit.', { cause: error });\n    }\n  }\n\n  /**\n   * Fetch maximum amount out given bptBalance as bptIn.\n   */\n  async function getSingleAssetMax() {\n    singleAmountOut.max = '0';\n    if (!isSingleAssetExit.value) return null;\n\n    // If the user has no BPT, there is no maximum amount out.\n    if (!hasBpt.value) return null;\n\n    const singleAssetMaxedExitHandler = shouldUseSwapExit.value\n      ? ExitHandler.Swap\n      : ExitHandler.ExactIn;\n\n    exitPoolService.setExitHandler(singleAssetMaxedExitHandler);\n\n    console.log('exitHandler:', exitHandlerType.value);\n    try {\n      await nextTick();\n      const output = await exitPoolService.queryExit({\n        exitType: ExitType.GivenIn,\n        bptIn: bptBalance.value,\n        amountsOut: [singleAmountOut],\n        signer: getSigner(),\n        slippageBsp: slippageBsp.value,\n        tokenInfo: exitTokenInfo.value,\n        approvalActions: approvalActions.value,\n        bptInValid: bptInValid.value,\n        relayerSignature: relayerSignature.value,\n        transactionDeadline: transactionDeadline.value,\n        toInternalBalance: shouldExitViaInternalBalance.value,\n      });\n      const newMax =\n        selectByAddress(output.amountsOut, singleAmountOut.address) || '0';\n      singleAmountOut.max = newMax;\n\n      return newMax;\n    } catch (error) {\n      logExitException(error as Error, singleAssetMaxQuery);\n      throw new Error('Failed to calculate max.', { cause: error });\n    }\n  }\n\n  /**\n   * Executes exit transaction.\n   */\n  async function exit(): Promise<TransactionResponse> {\n    try {\n      txError.value = '';\n      exitPoolService.setExitHandler(exitHandlerType.value);\n\n      console.log('exitHandler:', exitHandlerType.value);\n      return exitPoolService.exit({\n        exitType: exitType.value,\n        bptIn: _bptIn.value,\n        amountsOut: amountsOut.value,\n        signer: getSigner(),\n        slippageBsp: slippageBsp.value,\n        tokenInfo: exitTokenInfo.value,\n        approvalActions: approvalActions.value,\n        bptInValid: bptInValid.value,\n        relayerSignature: relayerSignature.value,\n        transactionDeadline: transactionDeadline.value,\n        toInternalBalance: shouldExitViaInternalBalance.value,\n      });\n    } catch (error) {\n      logExitException(error as Error);\n      txError.value = (error as Error).message;\n      throw error;\n    }\n  }\n\n  function setInitialPropAmountsOut() {\n    const leafNodes: string[] = isDeepPool.value\n      ? tokenTreeLeafs(pool.value.tokens)\n      : pool.value.tokensList.filter(\n          token => !isSameAddress(token, pool.value.address)\n        );\n\n    propAmountsOut.value = leafNodes.map(address => ({\n      address,\n      value: '0',\n      max: '',\n      valid: true,\n    }));\n  }\n\n  function setIsSingleAssetExit(value: boolean) {\n    isSingleAssetExit.value = value;\n  }\n\n  async function logExitException(\n    error: Error,\n    query?: UseQueryReturnType<any, any>\n  ) {\n    // Ignore error when queryExit fails once the tx has been confirmed\n    if (txState.confirmed && queryError.value) return;\n\n    const sender = await getSigner().getAddress();\n    captureBalancerException({\n      error,\n      action: 'withdraw',\n      query,\n      context: {\n        level: 'fatal',\n        extra: {\n          exitHandler: exitHandlerType.value,\n          params: JSON.stringify(\n            {\n              exitType: exitType.value,\n              bptIn: _bptIn.value,\n              amountsOut: amountsOut.value,\n              signer: sender,\n              slippageBsp: slippageBsp.value,\n              tokenInfo: exitTokenInfo.value,\n              approvalActions: approvalActions.value,\n              bptInValid: bptInValid.value,\n              relayerSignature: relayerSignature.value,\n              transactionDeadline: transactionDeadline.value,\n              toInternalBalance: shouldExitViaInternalBalance.value,\n            },\n            null,\n            2\n          ),\n        },\n      },\n    });\n  }\n\n  /**\n   * WATCHERS\n   */\n  watch(isSingleAssetExit, _isSingleAssetExit => {\n    bptIn.value = '';\n    exitPoolService.setExitHandler(exitHandlerType.value);\n    if (!_isSingleAssetExit) {\n      setInitialPropAmountsOut();\n    }\n  });\n\n  /**\n   * LIFECYCLE\n   */\n  onBeforeMount(() => {\n    // Ensure prices are fetched for token tree. When pool architecture is\n    // refactored probably won't be required.\n    injectTokens([...exitTokenAddresses.value, pool.value.address]);\n\n    exitPoolService.setExitHandler(exitHandlerType.value);\n\n    if (!isSingleAssetExit.value) {\n      setInitialPropAmountsOut();\n    }\n  });\n\n  onMounted(() => {\n    isMounted.value = true;\n  });\n\n  return {\n    // state\n    txState,\n    singleAmountOut,\n    highPriceImpactAccepted,\n    bptIn,\n    bptInValid,\n    pool,\n    isSingleAssetExit: readonly(isSingleAssetExit),\n    propAmountsOut: readonly(propAmountsOut),\n    priceImpact: readonly(priceImpact),\n    priceImpactValid: readonly(priceImpactValid),\n    exitPoolService,\n\n    // computed\n    exitTokenAddresses,\n    exitTokens,\n    isLoadingQuery,\n    isLoadingMax,\n    highPriceImpact,\n    rektPriceImpact,\n    hasAcceptedHighPriceImpact,\n    txInProgress,\n    queryError,\n    maxError,\n    amountsOut,\n    validAmounts,\n    hasAmountsOut,\n    bptBalance,\n    hasBpt,\n    fiatTotalOut,\n    fiatValueIn,\n    fiatAmountsOut,\n    exitTokenInfo,\n    queryExitQuery,\n    approvalActions,\n    transactionDeadline,\n    shouldExitViaInternalBalance,\n    isTxPayloadReady,\n    relayerSignature,\n    relayerApprovalTx,\n    shouldUseSwapExit,\n    canSwapExit,\n    shouldUseRecoveryExit,\n\n    // methods\n    setIsSingleAssetExit,\n    exit,\n  };\n};\n\nexport type ExitPoolProviderResponse = ReturnType<typeof exitPoolProvider>;\nexport const ExitPoolProviderSymbol: InjectionKey<ExitPoolProviderResponse> =\n  Symbol(symbolKeys.Providers.ExitPool);\n\nexport function provideExitPool(pool: Ref<Pool>) {\n  const exitPoolResponse = exitPoolProvider(pool);\n  provide(ExitPoolProviderSymbol, exitPoolResponse);\n  return exitPoolResponse;\n}\n\nexport function useExitPool(): ExitPoolProviderResponse {\n  return safeInject(ExitPoolProviderSymbol);\n}\n","<script setup lang=\"ts\">\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { isDeep, isLinear, isStableLike } from '@/composables/usePoolHelpers';\nimport { findByAddress } from '@/lib/utils';\nimport { Pool, PoolToken } from '@/services/pool/types';\nimport { TokenInfo } from '@/types/TokenList';\n\n/**\n * TYPES\n */\ntype Props = {\n  token: TokenInfo | undefined;\n  weight: string;\n  address: string;\n  fiatAmountOut: string | undefined;\n  loading: boolean;\n  pool: Pool;\n  value: string;\n};\n\n/**\n * Props\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\n\n/**\n * COMPUTED\n */\nconst poolToken = computed((): PoolToken | undefined => {\n  return findByAddress(props.pool.tokens, props.address);\n});\n</script>\n\n<template>\n  <div class=\"flex justify-between items-center p-4\">\n    <div class=\"flex items-center\">\n      <BalAsset :address=\"address\" class=\"mr-2\" />\n      <div class=\"flex flex-col leading-none\">\n        <div class=\"text-lg font-medium\">\n          {{ props.token?.symbol || poolToken?.symbol }}\n          <span\n            v-if=\"\n              !isStableLike(pool.poolType) &&\n              !isDeep(pool) &&\n              !isLinear(pool.poolType)\n            \"\n          >\n            {{\n              fNum(weight, {\n                style: 'percent',\n                maximumFractionDigits: 0,\n              })\n            }}\n          </span>\n        </div>\n        <div class=\"flex text-sm text-gray-600 dark:text-gray-400 max-w-52\">\n          <span class=\"truncate\">\n            {{ props.token?.name }}\n          </span>\n        </div>\n      </div>\n    </div>\n    <div class=\"flex flex-col items-end pl-2 text-right grow font-numeric\">\n      <BalLoadingBlock v-if=\"loading\" class=\"w-20 h-12\" />\n      <template v-else>\n        <span class=\"text-xl font-medium break-words\">\n          {{ fNum(value, FNumFormats.token) }}\n        </span>\n        <span class=\"text-sm text-gray-600 dark:text-gray-400\">\n          {{ fNum(fiatAmountOut || '0', FNumFormats.fiat) }}\n        </span>\n      </template>\n    </div>\n  </div>\n</template>\n\n\n","<script setup lang=\"ts\">\nimport BigNumber from 'bignumber.js';\nimport { computed, onBeforeMount, reactive } from 'vue';\nimport { bnum, isSameAddress, selectByAddress } from '@/lib/utils';\nimport { Pool, PoolToken } from '@/services/pool/types';\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\nimport { useI18n } from 'vue-i18n';\nimport ProportionalWithdrawalTokenInfo from './ProportionalWithdrawalTokenInfo.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * Props\n */\nconst props = defineProps<Props>();\n\n/**\n * STATE\n */\nconst slider = reactive({\n  val: 1000,\n  max: 1000,\n  min: 0,\n  interval: 1,\n});\n\n/**\n * COMPOSABLES\n */\nconst {\n  bptIn,\n  bptInValid,\n  bptBalance,\n  hasBpt,\n  isLoadingQuery,\n  exitTokens,\n  propAmountsOut,\n  exitTokenInfo,\n  fiatAmountsOut,\n  fiatTotalOut,\n} = useExitPool();\nconst { t } = useI18n();\n\n/**\n * COMPUTED\n */\nconst sliderProps = computed(() => {\n  return {\n    modelValue: slider.val,\n    max: slider.max,\n    interval: slider.interval,\n    min: slider.min,\n    tooltip: 'none',\n    disabled: !hasBpt.value,\n  };\n});\n\n/**\n * METHODS\n */\nfunction handleSliderChange(newVal: number): void {\n  const fractionBasisPoints = (newVal / slider.max) * 10000;\n  bptIn.value = bnum(bptBalance.value)\n    .times(fractionBasisPoints)\n    .div(10000)\n    .toFixed(props.pool.onchain?.decimals || 18);\n}\n\nfunction handleAmountChange(value: string): void {\n  const percentageOfBalance = bnum(value)\n    .div(bptBalance.value)\n    .times(100)\n    .integerValue(BigNumber.ROUND_CEIL);\n\n  const sliderRangeScaled: number = percentageOfBalance.times(10).toNumber();\n\n  if (sliderRangeScaled > slider.max) slider.val = slider.max;\n  else if (sliderRangeScaled < slider.min) slider.val = slider.min;\n  else slider.val = sliderRangeScaled;\n}\n\nfunction getPoolToken(address: string): PoolToken | undefined {\n  return exitTokens.value.find(token => isSameAddress(token.address, address));\n}\n\n/**\n * CALLBACKS\n */\nonBeforeMount(() => {\n  bptIn.value = bptBalance.value;\n});\n</script>\n\n<template>\n  <div>\n    <div class=\"label\">{{ t('youProvide') }}</div>\n    <TokenInput\n      v-model:amount=\"bptIn\"\n      v-model:isValid=\"bptInValid\"\n      :address=\"pool.address\"\n      :name=\"pool.address\"\n      class=\"mb-4\"\n      fixedToken\n      slider\n      :sliderProps=\"sliderProps\"\n      :tokenValue=\"fiatTotalOut\"\n      @update:amount=\"handleAmountChange\"\n      @update:slider=\"handleSliderChange\"\n    />\n    <div class=\"label\">{{ t('youReceive') }}</div>\n    <div class=\"token-amounts\">\n      <ProportionalWithdrawalTokenInfo\n        v-for=\"{ address, value } in propAmountsOut\"\n        :key=\"address\"\n        :token=\"selectByAddress(exitTokenInfo, address)\"\n        :weight=\"getPoolToken(address)?.weight || '0'\"\n        :address=\"address\"\n        :fiatAmountOut=\"selectByAddress(fiatAmountsOut, address)\"\n        :loading=\"isLoadingQuery\"\n        :pool=\"pool\"\n        :value=\"value\"\n        class=\"last:mb-0\"\n      />\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.label {\n  @apply mb-3 text-sm font-bold;\n}\n\n.token-amounts {\n  @apply rounded-lg;\n  @apply bg-gray-50 dark:bg-gray-800;\n  @apply border dark:border-gray-900 divide-y dark:divide-gray-900;\n}\n</style>\n","<script setup lang=\"ts\">\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\n\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\n\nconst { priceImpact, priceImpactValid, highPriceImpact, isLoadingQuery } =\n  useExitPool();\n\n/**\n * COMPUTED\n */\nconst priceImpactClasses = computed(() => ({\n  'bg-red-500 dark:bg-red-500 text-white divide-red-400 border-none':\n    highPriceImpact.value,\n}));\n</script>\n\n<template>\n  <div class=\"data-table\">\n    <div :class=\"['data-table-row', priceImpactClasses, 'dark:bg-gray-800']\">\n      <div class=\"p-2\">\n        {{ $t('priceImpact') }}\n      </div>\n      <div class=\"data-table-number-col\">\n        <div class=\"flex items-center\">\n          <BalLoadingBlock v-if=\"isLoadingQuery\" class=\"w-10 h-6\" />\n          <span v-else-if=\"!priceImpactValid\">-</span>\n          <span v-else>{{ fNum(priceImpact, FNumFormats.percent) }}</span>\n\n          <BalTooltip :text=\"$t('withdraw.tooltips.priceImpact')\">\n            <template #activator>\n              <BalIcon\n                v-if=\"highPriceImpact\"\n                name=\"alert-triangle\"\n                size=\"xs\"\n                class=\"-mb-px ml-1\"\n              />\n              <BalIcon\n                v-else\n                name=\"info\"\n                size=\"xs\"\n                class=\"-mb-px ml-1 text-gray-400\"\n              />\n            </template>\n          </BalTooltip>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.data-table {\n  @apply rounded-lg divide-y dark:divide-gray-700;\n}\n\n.data-table-row {\n  @apply flex;\n  @apply rounded-lg;\n  @apply divide-x dark:divide-gray-900 border dark:border-gray-900;\n}\n\n.data-table-number-col {\n  @apply p-2 flex flex-grow items-center justify-between;\n}\n\n.total-row {\n  @apply text-lg font-semibold;\n}\n</style>\n","<script setup lang=\"ts\">\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useUserSettings } from '@/providers/user-settings.provider';\nimport { Pool } from '@/services/pool/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  fiatTotal: string;\n  priceImpact: number;\n};\n\n/**\n * PROPS & EMITS\n */\ndefineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { currency } = useUserSettings();\n</script>\n\n<template>\n  <BalDataList :title=\"$t('summary')\">\n    <BalDataListRow :label=\"$t('total')\">\n      <template #value>\n        {{ fNum(fiatTotal, FNumFormats.fiat) }}\n        <BalTooltip\n          :text=\"$t('tooltips.withdraw.total', [currency.toUpperCase()])\"\n          iconSize=\"sm\"\n          class=\"ml-2\"\n        />\n      </template>\n    </BalDataListRow>\n    <BalDataListRow :label=\"$t('priceImpact')\">\n      <template #value>\n        {{ fNum(priceImpact, FNumFormats.percent) }}\n        <BalTooltip\n          :text=\"$t('tooltips.withdraw.priceImpact')\"\n          iconSize=\"sm\"\n          width=\"72\"\n          class=\"ml-2\"\n        />\n      </template>\n    </BalDataListRow>\n  </BalDataList>\n</template>\n","<script setup lang=\"ts\">\nimport {\n  TransactionReceipt,\n  TransactionResponse,\n} from '@ethersproject/abstract-provider';\nimport { ref, toRef, watch } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\nimport { usePoolHelpers } from '@/composables/usePoolHelpers';\nimport useNetwork from '@/composables/useNetwork';\nimport useTransactions from '@/composables/useTransactions';\n// Types\nimport { Pool } from '@/services/pool/types';\n// Composables\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TransactionActionInfo } from '@/types/transactions';\n\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\n\nimport FeedbackCard from '@/components/cards/FeedbackCard.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\nconst emit = defineEmits<{\n  (e: 'success', value: TransactionReceipt): void;\n  (e: 'error'): void;\n}>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { blockNumber, isMismatchedNetwork } = useWeb3();\nconst { addTransaction } = useTransactions();\nconst { poolWeightsLabel } = usePoolHelpers(toRef(props, 'pool'));\nconst { networkSlug } = useNetwork();\nconst { fNum } = useNumbers();\n\nconst {\n  txState,\n  txInProgress,\n  exit,\n  isLoadingQuery,\n  queryExitQuery,\n  fiatTotalOut,\n  approvalActions: exitPoolApprovalActions,\n  relayerApprovalTx,\n  shouldExitViaInternalBalance,\n  isTxPayloadReady,\n  relayerSignature,\n} = useExitPool();\n\nconst withdrawalAction: TransactionActionInfo = {\n  label: t('withdraw.label'),\n  loadingLabel: t('withdraw.preview.loadingLabel.withdraw'),\n  confirmingLabel: t('confirming'),\n  action: submit,\n  stepTooltip: t('withdraw.preview.tooltips.withdrawStep'),\n};\n\nconst actions = ref<TransactionActionInfo[]>([\n  ...exitPoolApprovalActions.value,\n  withdrawalAction,\n]);\n\n/**\n * COMPUTED\n */\nconst redirectLabel = computed<string>(() => {\n  if (shouldExitViaInternalBalance.value) return t('manageVaultBalances');\n  return t('returnToPool');\n});\n\nconst txSummary = computed<string>(() => {\n  if (shouldExitViaInternalBalance.value)\n    return t('transactionSummary.withdrawToBalance', [\n      fNum(fiatTotalOut.value, FNumFormats.fiat),\n    ]);\n\n  return t('transactionSummary.withdrawFromPool', [\n    fNum(fiatTotalOut.value, FNumFormats.fiat),\n    poolWeightsLabel(props.pool),\n  ]);\n});\n\n// Prevent the tx action with loading state if:\n// 1. If the exit provider has not yet generated a tx payload, and\n// 2. The user has signed the relayer or has already approved the relayer.\nconst isBuildingTx = computed((): boolean => {\n  return (\n    !isTxPayloadReady.value &&\n    (!!relayerSignature.value || relayerApprovalTx.isUnlocked.value)\n  );\n});\n\n/**\n * METHODS\n */\nasync function handleSuccess(\n  receipt: TransactionReceipt,\n  confirmedAt: string\n): Promise<void> {\n  txState.confirmed = true;\n  txState.confirming = false;\n  txState.receipt = receipt;\n  txState.confirmedAt = confirmedAt;\n  emit('success', receipt);\n}\n\nfunction handleFailed(): void {\n  txState.confirming = false;\n  emit('error');\n}\n\nasync function submit(): Promise<TransactionResponse> {\n  try {\n    const tx = await exit();\n\n    txState.confirming = true;\n\n    addTransaction({\n      id: tx.hash,\n      type: 'tx',\n      action: 'withdraw',\n      summary: txSummary.value,\n      details: {\n        total: fNum(fiatTotalOut.value, FNumFormats.fiat),\n        pool: props.pool,\n      },\n    });\n\n    return tx;\n  } catch (error) {\n    txState.confirming = false;\n    throw new Error('Failed to submit withdrawal transaction.', {\n      cause: error,\n    });\n  } finally {\n    txState.init = false;\n  }\n}\n\nconst returnRoute = computed(() => {\n  if (shouldExitViaInternalBalance.value) {\n    return { name: 'balances', params: { networkSlug } };\n  } else {\n    return { name: 'pool', params: { networkSlug, id: props.pool.id } };\n  }\n});\n\n/**\n * WATCHERS\n */\nwatch(blockNumber, () => {\n  if (!isLoadingQuery.value && !txInProgress.value) {\n    queryExitQuery.refetch();\n  }\n});\n</script>\n\n\n<template>\n  <div>\n    <transition>\n      <BalActionSteps\n        v-if=\"!txState.confirmed || !txState.receipt\"\n        :actions=\"actions\"\n        primaryActionType=\"withdraw\"\n        :disabled=\"isMismatchedNetwork\"\n        :isLoading=\"isBuildingTx\"\n        :loadingLabel=\"\n          isBuildingTx\n            ? $t('withdraw.preview.loadingLabel.building')\n            : undefined\n        \"\n        @success=\"handleSuccess\"\n        @failed=\"handleFailed\"\n      />\n      <div v-else>\n        <ConfirmationIndicator :txReceipt=\"txState.receipt\" />\n        <BalBtn\n          tag=\"router-link\"\n          :to=\"returnRoute\"\n          color=\"gray\"\n          outline\n          block\n          class=\"mt-2\"\n        >\n          {{ redirectLabel }}\n        </BalBtn>\n      </div>\n    </transition>\n    <transition name=\"pop\">\n      <FeedbackCard\n        v-if=\"txState.confirming || txState.confirmed\"\n        class=\"mt-3\"\n      />\n    </transition>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { Pool } from '@/services/pool/types';\nimport { TokenInfoMap } from '@/types/TokenList';\n\nimport WithdrawSummary from './components/WithdrawSummary.vue';\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\nimport WithdrawActions from './components/WithdrawActions.vue';\nimport TokenAmounts from '@/components/forms/pool_actions/shared/TokenAmounts.vue';\nimport useNetwork from '@/composables/useNetwork';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\ntype AmountMap = {\n  [address: string]: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {});\n\nconst emit = defineEmits<{\n  (e: 'close'): void;\n}>();\n\n/**\n * STATE\n */\nconst withdrawalConfirmed = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { getToken } = useTokens();\nconst { networkSlug } = useNetwork();\nconst router = useRouter();\n\nconst {\n  bptIn,\n  fiatValueIn,\n  fiatTotalOut,\n  amountsOut,\n  priceImpact,\n  fiatAmountsOut,\n  isSingleAssetExit,\n  shouldExitViaInternalBalance,\n  hasBpt,\n} = useExitPool();\n\n/**\n * COMPUTED\n */\nconst title = computed((): string =>\n  withdrawalConfirmed.value\n    ? t('withdraw.preview.titles.confirmed')\n    : t('withdraw.preview.titles.default')\n);\n\nconst showTokensIn = computed<boolean>(() => !isSingleAssetExit.value);\n\nconst amountInMap = computed((): AmountMap => {\n  const amountMap = {\n    [props.pool.address]: bptIn.value,\n  };\n  return amountMap;\n});\n\nconst tokenInMap = computed((): TokenInfoMap => {\n  const tokenMap = {\n    [props.pool.address]: getToken(props.pool.address),\n  };\n  return tokenMap;\n});\n\nconst fiatAmountInMap = computed((): AmountMap => {\n  const fiatAmountMap = {\n    [props.pool.address]: fiatValueIn.value,\n  };\n  return fiatAmountMap;\n});\n\nconst tokenOutMap = computed((): TokenInfoMap => {\n  const tokenMap = {};\n  amountsOut.value.forEach(item => {\n    tokenMap[item.address] = getToken(item.address);\n  });\n  return tokenMap;\n});\n\nconst amountsOutMap = computed((): AmountMap => {\n  const tokenMap = {};\n  amountsOut.value.forEach(item => {\n    tokenMap[item.address] = item.value;\n  });\n  return tokenMap;\n});\n\n/**\n * METHODS\n */\nfunction handleClose(): void {\n  // If user has withdrawn everything, send back to pool page. Else, close\n  // modal.\n  if (!hasBpt.value) {\n    router.push({ name: 'pool', params: { networkSlug, id: props.pool.id } });\n  } else {\n    emit('close');\n  }\n}\n</script>\n\n<template>\n  <BalModal show :fireworks=\"withdrawalConfirmed\" @close=\"handleClose\">\n    <template #header>\n      <div class=\"flex items-center\">\n        <BalCircle\n          v-if=\"withdrawalConfirmed\"\n          size=\"8\"\n          color=\"green\"\n          class=\"mr-2 text-white\"\n        >\n          <BalIcon name=\"check\" />\n        </BalCircle>\n        <h4>\n          {{ title }}\n        </h4>\n      </div>\n    </template>\n\n    <BalAlert\n      v-if=\"shouldExitViaInternalBalance\"\n      type=\"warning\"\n      :title=\"$t('alerts.withdrawToInternalBalance.title')\"\n      class=\"mb-4\"\n    >\n      {{ $t('alerts.withdrawToInternalBalance.description') }}\n      <router-link\n        class=\"underline\"\n        :to=\"{ name: 'balances', params: { networkSlug } }\"\n        target=\"_blank\"\n        >Vault balances page</router-link\n      >\n    </BalAlert>\n\n    <TokenAmounts\n      v-if=\"showTokensIn\"\n      :title=\"$t('investment.preview.titles.tokenIn')\"\n      :amountMap=\"amountInMap\"\n      :tokenMap=\"tokenInMap\"\n      :fiatAmountMap=\"fiatAmountInMap\"\n      :fiatTotal=\"fiatValueIn\"\n    />\n\n    <TokenAmounts\n      :title=\"$t('investment.preview.titles.tokenOut')\"\n      class=\"mt-4\"\n      :amountMap=\"amountsOutMap\"\n      :tokenMap=\"tokenOutMap\"\n      :fiatAmountMap=\"fiatAmountsOut\"\n      :fiatTotal=\"fiatTotalOut\"\n    />\n\n    <WithdrawSummary\n      :pool=\"pool\"\n      :fiatTotal=\"fiatTotalOut\"\n      :priceImpact=\"priceImpact\"\n      class=\"mt-4\"\n    />\n\n    <WithdrawActions\n      :pool=\"pool\"\n      class=\"mt-4\"\n      @error=\"$emit('close')\"\n      @success=\"withdrawalConfirmed = true\"\n    />\n  </BalModal>\n</template>\n","<script setup lang=\"ts\">\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\nimport { isLessThanOrEqualTo, isRequired } from '@/lib/utils/validations';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport ProportionalWithdrawalInput from './components/ProportionalWithdrawalInput.vue';\nimport WithdrawTotals from './components/WithdrawTotals.vue';\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\nimport useVeBal from '@/composables/useVeBAL';\nimport WithdrawPreviewModal from './components/WithdrawPreviewModal/WithdrawPreviewModal.vue';\nimport { useTokens } from '@/providers/tokens.provider';\nimport {\n  tokensListExclBpt,\n  usePoolHelpers,\n} from '@/composables/usePoolHelpers';\nimport { useI18n } from 'vue-i18n';\nimport { Pool } from '@/services/pool/types';\nimport useNetwork from '@/composables/useNetwork';\n\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\nconst pool = toRef(props, 'pool');\n\n/**\n * STATE\n */\nconst showPreview = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { veBalTokenInfo } = useVeBal();\nconst { wrappedNativeAsset, nativeAsset } = useTokens();\nconst router = useRouter();\nconst { networkSlug } = useNetwork();\nconst { isWalletReady, startConnectWithInjectedProvider, isMismatchedNetwork } =\n  useWeb3();\nconst {\n  isSingleAssetExit,\n  singleAmountOut,\n  isLoadingMax,\n  queryError,\n  maxError,\n  isLoadingQuery,\n  highPriceImpact,\n  highPriceImpactAccepted,\n  hasAcceptedHighPriceImpact,\n  hasAmountsOut,\n  validAmounts,\n  hasBpt,\n  shouldUseRecoveryExit,\n  canSwapExit,\n} = useExitPool();\n\nconst { isWrappedNativeAssetPool } = usePoolHelpers(pool);\n\n/**\n * COMPUTED\n */\nconst singleAssetRules = computed(() => [\n  isLessThanOrEqualTo(singleAmountOut.max, t('exceedsPoolBalance')),\n]);\n\nconst hasValidInputs = computed(\n  (): boolean => validAmounts.value && hasAcceptedHighPriceImpact.value\n);\n\nconst tokensList = computed(() => tokensListExclBpt(pool.value));\n\n// Limit token select modal to a subset.\nconst subsetTokens = computed((): string[] => {\n  // Returning an empty array means all tokens are presented in the modal.\n  if (!shouldUseRecoveryExit.value && canSwapExit.value) return [];\n\n  if (isWrappedNativeAssetPool.value)\n    return [nativeAsset.address, ...tokensList.value];\n\n  return tokensList.value;\n});\n\nconst excludedTokens = computed((): string[] => {\n  const tokens = [pool.value.address];\n  if (veBalTokenInfo.value) {\n    tokens.unshift(veBalTokenInfo.value.address);\n  }\n  return tokens;\n});\n\n/**\n * CALLBACKS\n */\nonBeforeMount(() => {\n  // If user has no BPT when mounting this component, redirect back to pool page\n  if (!hasBpt.value)\n    router.push({ name: 'pool', params: { networkSlug, id: props.pool.id } });\n\n  singleAmountOut.address =\n    subsetTokens.value.length === 0\n      ? wrappedNativeAsset.value.address\n      : tokensList.value[0];\n});\n</script>\n\n<template>\n  <div data-testid=\"withdraw-form\">\n    <ProportionalWithdrawalInput v-if=\"!isSingleAssetExit\" :pool=\"pool\" />\n    <template v-else>\n      <!-- Single asset exit input -->\n      <TokenInput\n        v-model:isValid=\"singleAmountOut.valid\"\n        v-model:address=\"singleAmountOut.address\"\n        v-model:amount=\"singleAmountOut.value\"\n        :name=\"singleAmountOut.address\"\n        :rules=\"singleAssetRules\"\n        :customBalance=\"singleAmountOut.max || '0'\"\n        :balanceLabel=\"$t('max')\"\n        :balanceLoading=\"isLoadingMax\"\n        disableNativeAssetBuffer\n        :excludedTokens=\"excludedTokens\"\n        :tokenSelectProps=\"{ ignoreBalances: true, subsetTokens }\"\n        ignoreWalletBalance\n      />\n    </template>\n\n    <WithdrawTotals class=\"mt-4\" />\n\n    <div\n      v-if=\"highPriceImpact\"\n      class=\"p-2 pb-2 mt-4 rounded-lg border dark:border-gray-700\"\n    >\n      <BalCheckbox\n        v-model=\"highPriceImpactAccepted\"\n        :rules=\"[isRequired($t('priceImpactCheckbox'))]\"\n        name=\"highPriceImpactAccepted\"\n        size=\"sm\"\n        :label=\"$t('priceImpactAccept', [$t('withdrawing')])\"\n      />\n    </div>\n\n    <BalAlert\n      v-if=\"queryError || maxError\"\n      type=\"error\"\n      :title=\"$t('thereWasAnError')\"\n      :description=\"queryError || maxError\"\n      class=\"mt-4\"\n      block\n    />\n\n    <div class=\"mt-4\">\n      <BalBtn\n        v-if=\"!isWalletReady\"\n        :label=\"$t('connectWallet')\"\n        color=\"gradient\"\n        block\n        @click=\"startConnectWithInjectedProvider\"\n      />\n      <BalBtn\n        v-else\n        :label=\"$t('preview')\"\n        color=\"gradient\"\n        :disabled=\"\n          !hasAmountsOut ||\n          !hasValidInputs ||\n          isMismatchedNetwork ||\n          isLoadingQuery ||\n          isLoadingMax\n        \"\n        block\n        @click=\"showPreview = true\"\n      />\n    </div>\n\n    <teleport to=\"#modal\">\n      <WithdrawPreviewModal\n        v-if=\"showPreview\"\n        :pool=\"pool\"\n        @close=\"showPreview = false\"\n      />\n    </teleport>\n  </div>\n</template>\n","import { ref } from 'vue';\nimport i18n from '@/plugins/i18n';\n\nexport enum Tab {\n  PoolTokens,\n  SingleToken,\n}\n\nexport const tabs = [\n  { value: Tab.PoolTokens, label: i18n.global.t('withdraw.tabs.poolTokens') },\n  {\n    value: Tab.SingleToken,\n    label: i18n.global.t('withdraw.tabs.singleToken'),\n  },\n];\n\nconst activeTab = ref(tabs[0].value);\n\nfunction resetTabs() {\n  activeTab.value = tabs[0].value;\n}\n\nexport default function useWithdrawPageTabs() {\n  return { activeTab, resetTabs };\n}\n","<script setup lang=\"ts\">\nimport useWithdrawPageTabs, {\n  tabs,\n  Tab,\n} from '@/composables/pools/useWithdrawPageTabs';\n\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\n\n/**\n * COMPOSABLES\n */\nconst { activeTab } = useWithdrawPageTabs();\nconst { setIsSingleAssetExit } = useExitPool();\n\nwatch(activeTab, value => {\n  setIsSingleAssetExit(value === Tab.SingleToken);\n});\n</script>\n\n<template>\n  <BalTabs\n    v-model=\"activeTab\"\n    :tabs=\"tabs\"\n    class=\"p-0 m-0 -mb-px whitespace-nowrap\"\n    noPad\n  />\n</template>\n","<script setup lang=\"ts\">\nimport WithdrawForm from '@/components/forms/pool_actions/WithdrawForm/WithdrawForm.vue';\nimport SwapSettingsPopover, {\n  SwapSettingsContext,\n} from '@/components/popovers/SwapSettingsPopover.vue';\nimport { configService } from '@/services/config/config.service';\nimport useWithdrawPageTabs from '@/composables/pools/useWithdrawPageTabs';\nimport WithdrawPageTabs from './WithdrawPageTabs.vue';\nimport { provideExitPool } from '@/providers/local/exit-pool.provider';\nimport { Pool } from '@/services/pool/types';\nimport { isRecoveryExitsOnly } from '@/composables/usePoolHelpers';\n\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\nconst pool = toRef(props, 'pool');\n\n/**\n * PROVIDERS\n */\nprovideExitPool(pool);\n\n/**\n * COMPOSABLES\n */\nconst { network } = configService;\nconst { resetTabs } = useWithdrawPageTabs();\n\nonMounted(() => resetTabs());\n</script>\n\n<template>\n  <BalCard shadow=\"xl\" exposeOverflow noBorder>\n    <template #header>\n      <div class=\"w-full\">\n        <div class=\"text-xs leading-none text-secondary\">\n          {{ network.chainName }}\n        </div>\n        <div class=\"flex justify-between items-center\">\n          <h4>{{ $t('withdrawFromPool') }}</h4>\n          <SwapSettingsPopover :context=\"SwapSettingsContext.invest\" />\n        </div>\n        <WithdrawPageTabs v-if=\"!isRecoveryExitsOnly(pool)\" />\n      </div>\n    </template>\n    <WithdrawForm :pool=\"pool\" />\n  </BalCard>\n</template>\n","<script setup lang=\"ts\">\nimport { oneSecondInMs } from '@/composables/useTime';\nimport { useIntervalFn } from '@vueuse/core';\nimport WithdrawPage from '@/components/contextual/pages/pool/withdraw/WithdrawPage.vue';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { usePool } from '@/providers/local/pool.provider';\n\n/**\n * COMPOSABLES\n */\nconst { pool, isLoadingPool, refetchOnchainPoolData } = usePool();\nconst { balanceQueryLoading } = useTokens();\n\n// Instead of refetching pool data on every block, we refetch every 20s to prevent\n// overfetching a request on short blocktime networks like Polygon.\nuseIntervalFn(refetchOnchainPoolData, oneSecondInMs * 20);\n\n/**\n * COMPUTED\n */\nconst isLoading = computed(\n  (): boolean => isLoadingPool.value || balanceQueryLoading.value\n);\n</script>\n\n<template>\n  <div class=\"px-4 sm:px-0 mx-auto max-w-md\">\n    <BalLoadingBlock v-if=\"isLoading || !pool\" class=\"h-96\" />\n    <WithdrawPage v-else :pool=\"pool\" />\n  </div>\n</template>\n"],"names":["exitPoolProvider","pool","debounceQueryExitMillis","debounceGetSingleAssetMaxMillis","isMounted","ref","isSingleAssetExit","priceImpact","priceImpactValid","highPriceImpactAccepted","bptIn","bptInValid","txError","singleAmountOut","reactive","propAmountsOut","isTxPayloadReady","exitPoolService","ExitPoolService","toFiat","useNumbers","injectTokens","getTokens","balanceFor","useTokens","txState","txInProgress","useTxState","transactionDeadline","useApp","slippageBsp","useUserSettings","account","getSigner","useWeb3","relayerSignature","relayerApprovalAction","relayerApprovalTx","useRelayerApproval","RelayerType","debounceQueryExit","debounce","queryExit","debounceGetSingleAssetMax","getSingleAssetMax","queriesEnabled","computed","bptBalance","queryExitQuery","useQuery","QUERY_KEYS","singleAssetMaxQuery","toRef","isLoadingQuery","queryError","_a","isLoadingMax","maxError","isDeepPool","isDeep","shouldSignRelayer","exitHandlerType","ExitHandler","approvalActions","canSwapExit","isPreMintedBptType","shouldUseSwapExit","includesAddress","shouldUseGeneralisedExit","isComposableStableV1","shouldExitViaInternalBalance","POOLS","shouldUseRecoveryExit","isRecoveryExitsOnly","singleAssetMaxed","exitTokenAddresses","addresses","tokenTreeNodes","removeAddress","exitTokenInfo","amountsOut","ao","exitTokens","tokens","flatTokenTree","token","isSameAddress","bnum","highPriceImpact","HIGH_PRICE_IMPACT","rektPriceImpact","REKT_PRICE_IMPACT","hasAcceptedHighPriceImpact","exitType","ExitType","_bptIn","hasBpt","hasAmountsOut","amountOut","hasBptIn","validAmounts","fiatAmountsOut","address","value","fiatTotalOut","bnSum","fiatValueIn","fiatValueOf","nextTick","output","error","logExitException","singleAssetMaxedExitHandler","newMax","selectByAddress","exit","setInitialPropAmountsOut","leafNodes","tokenTreeLeafs","setIsSingleAssetExit","query","sender","captureBalancerException","watch","_isSingleAssetExit","onBeforeMount","onMounted","readonly","ExitPoolProviderSymbol","symbolKeys","provideExitPool","exitPoolResponse","provide","useExitPool","safeInject","props","__props","fNum","poolToken","findByAddress","slider","t","useI18n","sliderProps","handleSliderChange","newVal","fractionBasisPoints","handleAmountChange","sliderRangeScaled","BigNumber","getPoolToken","priceImpactClasses","currency","emit","__emit","blockNumber","isMismatchedNetwork","addTransaction","useTransactions","poolWeightsLabel","usePoolHelpers","networkSlug","useNetwork","exitPoolApprovalActions","withdrawalAction","submit","actions","redirectLabel","txSummary","FNumFormats","isBuildingTx","handleSuccess","receipt","confirmedAt","handleFailed","tx","returnRoute","withdrawalConfirmed","getToken","router","useRouter","title","showTokensIn","amountInMap","tokenInMap","fiatAmountInMap","tokenOutMap","tokenMap","item","amountsOutMap","handleClose","showPreview","veBalTokenInfo","useVeBal","wrappedNativeAsset","nativeAsset","isWalletReady","startConnectWithInjectedProvider","isWrappedNativeAssetPool","singleAssetRules","isLessThanOrEqualTo","hasValidInputs","tokensList","tokensListExclBpt","subsetTokens","excludedTokens","Tab","Tab2","tabs","i18n","activeTab","resetTabs","useWithdrawPageTabs","network","configService","isLoadingPool","refetchOnchainPoolData","usePool","balanceQueryLoading","useIntervalFn","oneSecondInMs","isLoading"],"mappings":"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"}