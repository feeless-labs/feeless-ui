{"version":3,"file":"vebal-1eeed5de.js","sources":["../../src/composables/useVotingEscrowLocks.ts","../../src/composables/useVeBalLockInfo.ts","../../src/components/contextual/pages/vebal/LMVoting/GaugesFilters.vue","../../src/components/_global/BalLazy/BalLazy.vue","../../src/components/_global/icons/CompositionIcon.vue","../../src/components/_global/icons/NetworkIcon.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugeVoteInfo.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugesTableMyVotes.vue","../../src/components/icons/IconLimit.vue","../../src/components/contextual/pages/vebal/LMVoting/Ve8020Chip.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugesTable.vue","../../src/composables/useDebouncedRed.ts","../../src/components/contextual/pages/vebal/LMVoting/composables/useLMVotingFilters.ts","../../src/components/contextual/pages/vebal/LMVoting/LMVoting.vue","../../src/assets/images/icons/lock.svg","../../src/assets/images/icons/unlock.svg","../../src/components/contextual/pages/vebal/MyVeBAL/components/MyVeBalCards.vue","../../src/components/contextual/pages/vebal/MyVeBAL/MyVeBAL.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/SyncSelectNetwork.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/SyncNetworkAction.vue","../../src/assets/images/icons/success-check.svg","../../src/components/contextual/pages/vebal/cross-chain-boost/SyncFinalState.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/CrossChainSyncModal.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/CrossChainBoostCards.vue","../../src/assets/images/icons/rank.svg","../../src/assets/images/icons/share.svg","../../src/assets/images/icons/hourglass.svg","../../src/composables/queries/useHistoricalLocksQuery.ts","../../src/composables/queries/useLockRankQuery.ts","../../src/components/_global/BalImage/BalImage.vue","../../src/assets/images/coins/coins-1.png","../../src/assets/images/coins/coins-2.png","../../src/assets/images/coins/coins-3.png","../../src/components/contextual/pages/vebal/VeBALMarketingHeader.vue","../../src/components/contextual/pages/vebal/MyVebalInfo.vue","../../src/pages/vebal.vue"],"sourcesContent":["import { computed, reactive } from 'vue';\nimport useGraphQuery, { subgraphs } from '@/composables/queries/useGraphQuery';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useConfig from '@/composables/useConfig';\nimport { bnum, isSameAddress } from '@/lib/utils';\nimport useVeBalLockInfoQuery from '@/composables/queries/useVeBalLockInfoQuery';\nimport useVotingPools from '@/composables/useVotingPools';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport configs from '@/lib/config';\nimport { networkId } from '@/composables/useNetwork';\nimport useExpiredGaugesQuery from '@/composables/queries/useExpiredGaugesQuery';\nimport useVeBal, { isVotingTimeLocked } from '@/composables/useVeBAL';\nimport QUERY_KEYS from '@/constants/queryKeys';\n\n/**\n * TYPES\n */\nexport type VotingEscrowLock = {\n  votingEscrowID: {\n    id: string;\n  };\n  updatedAt: number;\n};\n\ntype VotingEscrowLockQueryResponse = {\n  votingEscrowLocks: VotingEscrowLock[];\n};\n\nexport default function useVotingEscrowLocks() {\n  /**\n   * COMPOSABLES\n   */\n  const { account } = useWeb3();\n  const { networkConfig } = useConfig();\n  const veBalLockInfoQuery = useVeBalLockInfoQuery();\n  const { votingPools: allVotingPools, votingGaugeAddresses } =\n    useVotingPools();\n  const { veBalBalance } = useVeBal();\n\n  const votingEscrowLocksQueryEnabled = computed(() => !!account.value);\n  const votingEscrowLocksQuery = useGraphQuery<VotingEscrowLockQueryResponse>(\n    subgraphs.gauge,\n    QUERY_KEYS.Gauges.VotingEscrowLocks(\n      veBalLockInfoQuery.data.value?.lockedAmount\n    ),\n    () => ({\n      __name: 'VeBalVotingEscrowLock',\n      votingEscrowLocks: {\n        __args: {\n          where: {\n            user: account.value.toLowerCase(),\n            votingEscrowID:\n              configs[networkId.value].addresses.veFls.toLocaleLowerCase(),\n          },\n        },\n        votingEscrowID: {\n          id: true,\n        },\n        updatedAt: true,\n      },\n    }),\n    reactive({ enabled: votingEscrowLocksQueryEnabled })\n  );\n\n  /**\n   * COMPUTED\n   */\n  const votingEscrowLocks = computed(\n    () => votingEscrowLocksQuery.data.value?.votingEscrowLocks\n  );\n\n  const { data: expiredGauges } = useExpiredGaugesQuery(votingGaugeAddresses);\n\n  //  If user has received more veBAL since they last voted, their voting power is under-utilized\n  const poolsUsingUnderUtilizedVotingPower = computed<VotingPool[]>(() =>\n    allVotingPools.value.filter(pool => {\n      return (\n        // Does the gauge have user votes\n        bnum(pool.userVotes).gt(0) &&\n        // Has user received veBAL since they last voted\n        pool.lastUserVoteTime < lastReceivedVebal.value &&\n        // Is voting currently not locked\n        !isVotingTimeLocked(pool.lastUserVoteTime) &&\n        // Is gauge not expired\n        !expiredGauges.value?.includes(pool.gauge.address)\n      );\n    })\n  );\n\n  const shouldResubmitVotes = computed<boolean>(\n    () =>\n      // Does user have any veBAL\n      bnum(veBalBalance.value).gt(0) &&\n      !!poolsUsingUnderUtilizedVotingPower.value.length\n  );\n\n  // Timestamp when user has last received veBAL\n  const lastReceivedVebal = computed(\n    () =>\n      votingEscrowLocks.value?.find(item =>\n        isSameAddress(item.votingEscrowID.id, networkConfig.addresses.veBAL)\n      )?.updatedAt || 0\n  );\n\n  return {\n    votingEscrowLocks,\n    lastReceivedVebal,\n    poolsUsingUnderUtilizedVotingPower,\n    shouldResubmitVotes,\n  };\n}\n","import useVeBalLockInfoQuery from '@/composables/queries/useVeBalLockInfoQuery';\n\nconst MINIMUM_LOCK_TIME = 86_400_000 * 7;\n\nexport function useVeBalLockInfo() {\n  const veBalLockInfoQuery = useVeBalLockInfoQuery();\n\n  const isLoading = computed(() => veBalLockInfoQuery.isLoading);\n\n  const veBalLockInfo = computed(() => veBalLockInfoQuery.data.value);\n\n  const veBalExpired = computed(() => veBalLockInfo.value?.isExpired);\n\n  const hasLock = computed(\n    (): boolean =>\n      !!veBalLockInfo.value?.hasExistingLock && !veBalLockInfo.value?.isExpired\n  );\n\n  const hasExpiredLock = computed(\n    (): boolean =>\n      !!veBalLockInfo.value?.hasExistingLock && veBalLockInfo.value?.isExpired\n  );\n\n  const veBalLockTooShort = computed((): boolean => {\n    if (\n      veBalLockInfo.value?.hasExistingLock &&\n      !veBalLockInfo.value?.isExpired\n    ) {\n      const lockEndDate = veBalLockInfo.value?.lockedEndDate;\n      return lockEndDate < Date.now() + MINIMUM_LOCK_TIME;\n    }\n\n    return false;\n  });\n\n  return {\n    isLoading,\n    hasLock,\n    hasExpiredLock,\n    veBalLockTooShort,\n    veBalExpired,\n  };\n}\n","<script setup lang=\"ts\">\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  networkFilters: Network[];\n  showExpiredGauges: boolean;\n  activeNetworkFilters: number[];\n};\n\nconst emit = defineEmits<{\n  (e: 'choose-network', value: number): void;\n  (e: 'update:showExpiredGauges', value: boolean): void;\n  (e: 'update:activeNetworkFilters', value: number[]): void;\n}>();\n\n/**\n * PROPS\n */\nconst props = defineProps<Props>();\n\n/**\n * STATE\n */\nconst networkFiltersArr = ref([...props.activeNetworkFilters]);\n\n/**\n * isExpiredFilterActive and activeNetworksArr are created to handle activeFiltersNum computed\n * otherwise activeFiltersNum would change only after 500ms debounce which lead to poor UX\n */\nconst isExpiredFilterActive = ref(false);\nconst activeNetworksArr = ref<number[]>(props.activeNetworkFilters);\n\n/**\n * COMPUTED\n */\nconst activeFiltersNum = computed(() => {\n  return activeNetworksArr.value.length + Number(isExpiredFilterActive.value);\n});\n\n/**\n * METHODS\n */\nfunction handleExpInput(e) {\n  const { checked } = e.target;\n  isExpiredFilterActive.value = checked;\n  emit('update:showExpiredGauges', checked);\n}\n\nfunction updateNetwork(network: number) {\n  const index = networkFiltersArr.value.indexOf(network);\n\n  index === -1\n    ? networkFiltersArr.value.push(network)\n    : networkFiltersArr.value.splice(index, 1);\n\n  const arr = [...networkFiltersArr.value];\n  emit('update:activeNetworkFilters', arr);\n  activeNetworksArr.value = arr;\n}\n</script>\n\n<template>\n  <BalPopover noPad class=\"flex-0\">\n    <template #activator>\n      <BalBtn class=\"flex-1 h-full\" color=\"white\" size=\"sm\">\n        <BalIcon\n          name=\"filter\"\n          size=\"lg\"\n          class=\"mr-3 text-gray-600 dark:text-gray-100\"\n        />\n        <div class=\"flex text-gray-600 dark:text-gray-100\">\n          {{ $t('gaugeFilter.moreFilters') }}\n        </div>\n        <div v-if=\"activeFiltersNum > 0\" class=\"px-2\">\n          <div\n            class=\"flex justify-center items-center p-2 w-5 h-5 text-xs text-center text-white bg-blue-600 rounded-full\"\n          >\n            {{ activeFiltersNum }}\n          </div>\n        </div>\n      </BalBtn>\n    </template>\n    <div class=\"flex overflow-hidden flex-col py-4 px-3 w-64 rounded-lg\">\n      <div class=\"text-xl font-bold whitespace-nowrap\">\n        {{ $t('network') }}\n      </div>\n      <div\n        v-for=\"network in networkFilters\"\n        :key=\"network\"\n        class=\"flex py-1 text-base text-gray-600 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-850 cursor-pointer\"\n      >\n        <BalCheckbox\n          :modelValue=\"networkFiltersArr.includes(Number(network))\"\n          name=\"networkFilter\"\n          :label=\"configs[network].chainName\"\n          noMargin\n          alignCheckbox=\"items-center\"\n          @input=\"updateNetwork(Number(network))\"\n        />\n      </div>\n\n      <div class=\"py-2 text-xl font-bold\">\n        {{ $t('gaugeFilter.gaugeDisplay') }}\n      </div>\n\n      <BalCheckbox\n        class=\"flex py-1 text-base text-gray-600 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-850 cursor-pointer\"\n        name=\"expiredGaugesFilter\"\n        :label=\"$t('gaugeFilter.showExpired')\"\n        noMargin\n        alignCheckbox=\"items-center\"\n        :modelValue=\"showExpiredGauges\"\n        @input=\"handleExpInput\"\n      />\n    </div>\n  </BalPopover>\n</template>\n","<script setup lang=\"ts\">\nconst shouldRender = ref(false);\nnextTick(() => {\n  shouldRender.value = true;\n});\n</script>\n\n<template>\n  <slot v-if=\"shouldRender\" />\n</template>","<script lang=\"ts\" setup>\nimport useDarkMode from '@/composables/useDarkMode';\nimport useTailwind from '@/composables/useTailwind';\n\nconst { theme } = useTailwind();\nconst { darkMode } = useDarkMode();\n\nconst color = computed(() =>\n  darkMode.value ? theme.colors.white : theme.colors.black\n);\n</script>\n\n<template>\n  <svg\n    width=\"24\"\n    height=\"15\"\n    viewBox=\"0 0 24 15\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle cx=\"7.5\" cy=\"7.5\" r=\"7\" :stroke=\"color\" />\n    <circle cx=\"16.5\" cy=\"7.5\" r=\"7\" :stroke=\"color\" />\n  </svg>\n</template>\n","<script lang=\"ts\" setup>\nimport useDarkMode from '@/composables/useDarkMode';\nimport useTailwind from '@/composables/useTailwind';\n\nconst { theme } = useTailwind();\nconst { darkMode } = useDarkMode();\n\nconst color = computed(() =>\n  darkMode.value ? theme.colors.white : theme.colors.black\n);\n</script>\n\n<template>\n  <svg\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.99984 18.3333C14.6022 18.3333 18.3332 14.6023 18.3332 9.99996C18.3332 5.39759 14.6022 1.66663 9.99984 1.66663C5.39746 1.66663 1.6665 5.39759 1.6665 9.99996C1.6665 14.6023 5.39746 18.3333 9.99984 18.3333Z\"\n      :stroke=\"color\"\n      stroke-width=\"1.25\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M1.6665 10H18.3332\"\n      :stroke=\"color\"\n      stroke-width=\"1.25\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M9.99984 1.66663C12.0842 3.94859 13.2688 6.90999 13.3332 9.99996C13.2688 13.0899 12.0842 16.0513 9.99984 18.3333C7.91544 16.0513 6.73088 13.0899 6.6665 9.99996C6.73088 6.90999 7.91544 3.94859 9.99984 1.66663V1.66663Z\"\n      :stroke=\"color\"\n      stroke-width=\"1.25\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n","<script setup lang=\"ts\">\nimport useNumbers from '@/composables/useNumbers';\nimport { bnum, scale } from '@/lib/utils';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: VotingPool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {});\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\n\n/**\n * COMPUTED\n */\n\nconst votesThisPeriod = computed<string>(() =>\n  formatVotesAsPercent(props.pool.votes)\n);\n\nconst votesNextPeriod = computed<string>(() =>\n  formatVotesAsPercent(props.pool.votesNextPeriod)\n);\n\nconst voteDifference = computed<number>(() => {\n  return Number(props.pool.votesNextPeriod) - Number(props.pool.votes);\n});\n\nconst voteDifferenceText = computed<string>(() => {\n  const text = formatVotesAsPercent(voteDifference.value.toString());\n  const prefix = voteDifference.value > 0 ? '+' : '';\n  return `${prefix}${text}`;\n});\n\nconst voteTextClass = computed(() => {\n  return {\n    'text-green-600': voteDifference.value > 0,\n    'text-red-600': voteDifference.value < 0,\n  };\n});\n\n/**\n * METHODS\n */\nfunction formatVotesAsPercent(votes: string): string {\n  const normalizedVotes = scale(bnum(votes), -18);\n  return fNum(normalizedVotes.toString(), {\n    style: 'percent',\n    maximumFractionDigits: 2,\n    fixedFormat: true,\n  });\n}\n</script>\n\n<template>\n  <BalTooltip textAlign=\"left\">\n    <template #activator>\n      <span :class=\"voteTextClass\">{{ votesNextPeriod }}</span>\n    </template>\n    <div>\n      <div class=\"mb-2 text-sm font-semibold\">\n        {{ $t('veBAL.liquidityMining.votesTooltip.title') }}\n      </div>\n      <div class=\"text-xs font-normal\">\n        <div class=\"mb-2\">\n          {{\n            $t('veBAL.liquidityMining.votesTooltip.thisPeriod', [\n              votesThisPeriod,\n            ])\n          }}\n        </div>\n        <div class=\"mb-2\">\n          {{\n            $t('veBAL.liquidityMining.votesTooltip.nextPeriod', [\n              votesNextPeriod,\n            ])\n          }}\n          <span :class=\"voteTextClass\">{{ voteDifferenceText }}</span>\n        </div>\n      </div>\n    </div>\n  </BalTooltip>\n</template>\n","\n<script setup lang=\"ts\">\nimport { isSameAddress, scale } from '@/lib/utils';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport BigNumber from 'bignumber.js';\nimport useNumbers from '@/composables/useNumbers';\nimport useVotingEscrowLocks from '@/composables/useVotingEscrowLocks';\nimport { useI18n } from 'vue-i18n';\nimport { isVotingTimeLocked } from '@/composables/useVeBAL';\nimport BalTooltip from '@/components/_global/BalTooltip/BalTooltip.vue';\nimport TimeLockedVote from '../MultiVoting/TimeLockedVote.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: VotingPool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { fNum } = useNumbers();\nconst { poolsUsingUnderUtilizedVotingPower } = useVotingEscrowLocks();\n\nconst myVotes = computed(() => {\n  const normalizedVotes = scale(new BigNumber(props.pool.userVotes), -4);\n  return fNum(normalizedVotes.toString(), {\n    style: 'percent',\n    maximumFractionDigits: 2,\n  });\n});\n\nconst poolHasUnderUtilizedVotingPower = computed<boolean>(\n  () =>\n    !!poolsUsingUnderUtilizedVotingPower.value.find(pool =>\n      isSameAddress(pool.address, props.pool.address)\n    )\n);\n</script>\n\n<template>\n  <div\n    :class=\"{\n      'flex justify-end items-center': true,\n      'text-red-600': poolHasUnderUtilizedVotingPower,\n    }\"\n  >\n    {{ myVotes }}\n    <TimeLockedVote\n      v-if=\"isVotingTimeLocked(pool.lastUserVoteTime)\"\n      :pool=\"pool\"\n    />\n    <BalTooltip\n      v-else-if=\"poolHasUnderUtilizedVotingPower\"\n      template\n      textAlign=\"left\"\n      width=\"60\"\n    >\n      <template #activator>\n        <BalIcon class=\"ml-1\" name=\"alert-triangle\" size=\"sm\" />\n      </template>\n      <div class=\"flex flex-col gap-1\">\n        <span class=\"font-semibold\"\n          >{{ t('veBAL.liquidityMining.resubmit.hint.title') }}\n        </span>\n        <span>\n          {{ t('veBAL.liquidityMining.resubmit.hint.description') }}\n        </span>\n      </div>\n    </BalTooltip>\n  </div>\n</template>\n\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  amount?: string;\n  tooltip?: string;\n  size?: 'sm' | 'md' | 'lg';\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  amount: '1',\n  tooltip: `Limit amount`,\n  size: 'md',\n});\n\n/**\n * COMPUTED\n */\nconst sizeClass = computed(() => {\n  switch (props.size) {\n    case 'sm':\n      return 'text-xxs p-0 w-5 h-5 leading-4';\n    case 'lg':\n      return 'text-md p-2 w-11 h-11';\n    default:\n      return 'text-sm p-1 w-8 h-8';\n  }\n});\n</script>\n\n<template>\n  <BalTooltip textAlign=\"left\">\n    <template #activator>\n      <div\n        :class=\"sizeClass\"\n        class=\"inline-block font-medium text-center rounded-full border-2 border-red-600\"\n      >\n        {{ amount }}\n      </div>\n    </template>\n    <div>\n      <div class=\"text-xs font-normal\">\n        {{ tooltip }}\n      </div>\n    </div>\n  </BalTooltip>\n</template>\n\n<style scoped>\n.text-xxs {\n  font-size: 0.6rem;\n  line-height: 1rem;\n}\n</style>\n","<template>\n  <div\n    class=\"flex relative items-center py-1 pr-1.5 pl-2 mr-1 max-h-10 text-white bg-gradient-to-tr rounded from-[#977622] to-[#f0cb6d]\"\n  >\n    <span class=\"text-xs font-semibold\">ve8020</span>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { useRouter } from 'vue-router';\nimport { useI18n } from 'vue-i18n';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport BalChipNew from '@/components/chips/BalChipNew.vue';\nimport BalChipExpired from '@/components/chips/BalChipExpired.vue';\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport { getNetworkSlug } from '@/composables/useNetwork';\nimport {\n  isGyro,\n  isStableLike,\n  isUnknownType,\n  isVeBalPool,\n  poolURLFor,\n} from '@/composables/usePoolHelpers';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport GaugeVoteInfo from './GaugeVoteInfo.vue';\nimport GaugesTableMyVotes from './GaugesTableMyVotes.vue';\nimport BalAssetSet from '@/components/_global/BalAsset/BalAssetSet.vue';\nimport {\n  orderedTokenURIs,\n  orderedGaugeTokens,\n  isVe8020Pool,\n} from '@/composables/useVotingPools';\nimport IconLimit from '@/components/icons/IconLimit.vue';\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\nimport { poolMetadata } from '@/lib/config/metadata';\nimport Ve8020Chip from './Ve8020Chip.vue';\nimport PoolFeatureChip from '@/components/chips/PoolFeatureChip.vue';\nimport { PoolFeature } from '@/types/pools';\nimport { Protocol } from '@/composables/useProtocols';\nimport { isVotingTimeLocked } from '@/composables/useVeBAL';\nimport { useVoting } from '@/components/contextual/pages/vebal/providers/voting.provider';\nimport {\n  hasUserVotes,\n  isGaugeNew,\n} from '@/components/contextual/pages/vebal/voting-utils';\n\n/**\n * TYPES\n */\ntype Props = {\n  data?: VotingPool[];\n  isLoading?: boolean;\n  noPoolsLabel?: string;\n  isPaginated?: boolean;\n  filterText?: string;\n  renderedRowsIdx: number;\n  selectVotesDisabled: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  showPoolShares: false,\n  noPoolsLabel: 'No pools',\n  filterText: '',\n  isPaginated: false,\n  data: () => [],\n});\n\n/**\n * COMPOSABLES\n */\nconst router = useRouter();\nconst { t } = useI18n();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { isWalletReady } = useWeb3();\nconst { getIsGaugeExpired, toggleSelection, isSelected } = useVoting();\n\n/**\n * DATA\n */\nconst columns = computed((): ColumnDefinition<VotingPool>[] => [\n  {\n    name: t('veBAL.liquidityMining.table.chain'),\n    id: 'chain',\n    accessor: '',\n    Header: 'chainColumnHeader',\n    Cell: 'networkColumnCell',\n    width: 50,\n    noGrow: true,\n  },\n  {\n    name: t('veBAL.liquidityMining.table.assets'),\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 100,\n    noGrow: true,\n  },\n  {\n    name: t('veBAL.liquidityMining.table.composition'),\n    id: 'poolComposition',\n    accessor: 'id',\n    Cell: 'poolCompositionCell',\n    width: 350,\n  },\n  {\n    name: t('veBAL.liquidityMining.table.nextPeriodVotes'),\n    accessor: 'id',\n    align: 'right',\n    id: 'nextPeriodVotes',\n    Cell: 'nextPeriodVotesCell',\n    sortKey: pool => Number(pool.votesNextPeriod),\n    width: 160,\n    cellClassName: 'font-numeric',\n  },\n  {\n    name: t('veBAL.liquidityMining.table.myVotes'),\n    accessor: 'myVotes',\n    align: 'right',\n    id: 'myVotes',\n    sortKey: pool => Number(pool.userVotes),\n    width: 100,\n    Cell: 'myVotesCell',\n    cellClassName: 'font-numeric',\n    hidden: !isWalletReady.value,\n  },\n  {\n    name: t('veBAL.liquidityMining.table.voteSelect'),\n    id: 'vote',\n    accessor: 'id',\n    align: 'right',\n    Cell: 'voteSelectColumnCell',\n    sortKey: pool => isSelected(pool),\n    width: 100,\n    hidden: !isWalletReady.value,\n    isCheckbox: true,\n  },\n]);\n\n/**\n * METHODS\n */\nfunction isInternalUrl(url: string): boolean {\n  return url.includes('balancer.fi') || url.includes('localhost');\n}\n\nfunction redirectToPool(pool: VotingPool, inNewTab) {\n  const redirectUrl = poolURLFor(pool, pool.network);\n  if (!isInternalUrl(redirectUrl)) {\n    window.location.href = redirectUrl;\n  } else {\n    const route = router.resolve({\n      name: 'pool',\n      params: { id: pool.id, networkSlug: getNetworkSlug(pool.network) },\n    });\n    inNewTab ? window.open(route.href) : router.push(route);\n  }\n}\n\nfunction getPoolExternalUrl(pool: VotingPool) {\n  const poolUrl = poolURLFor(pool, pool.network);\n  return isInternalUrl(poolUrl) ? null : poolUrl;\n}\n\nfunction getHasUserVotes(userVotes: string): boolean {\n  return !!Number(userVotes);\n}\n\nfunction getTableRowClass(pool: VotingPool): string {\n  return getHasUserVotes(pool.userVotes) &&\n    getIsGaugeExpired(pool.gauge.address)\n    ? 'expired-gauge-row'\n    : '';\n}\n\nfunction getSelectedTokens(tokens: VotingPool['tokens']) {\n  return tokens\n    .filter(\n      token => token.symbol?.toLowerCase() === props.filterText?.toLowerCase()\n    )\n    .map(item => item.address);\n}\n\nfunction getPickedTokens(tokens: VotingPool['tokens']) {\n  return tokens\n    .filter(\n      token =>\n        props.filterText &&\n        token.symbol?.toLowerCase().includes(props.filterText?.toLowerCase())\n    )\n    .map(item => item.address);\n}\n</script>\n\n<template>\n  <BalCard\n    shadow=\"lg\"\n    class=\"mt-4\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <BalTable\n      :columns=\"columns\"\n      :data=\"data\"\n      :rowKey=\"(dataItem: VotingPool) => dataItem.gauge.address\"\n      :isLoading=\"isLoading\"\n      skeletonClass=\"h-64\"\n      sticky=\"both\"\n      :square=\"upToLargeBreakpoint\"\n      :isPaginated=\"isPaginated\"\n      :href=\"{ getHref: gauge => getPoolExternalUrl(gauge) }\"\n      :onRowClick=\"redirectToPool\"\n      :getTableRowClass=\"getTableRowClass\"\n      :initialState=\"{\n        sortColumn: 'nextPeriodVotes',\n        sortDirection: 'desc',\n      }\"\n      :pin=\"{\n        pinOn: 'address',\n        pinnedData: [],\n      }\"\n      :renderedRowsIdx=\"renderedRowsIdx\"\n    >\n      <template #chainColumnHeader>\n        <div class=\"flex items-center\">\n          <NetworkIcon />\n        </div>\n      </template>\n      <template #networkColumnCell=\"{ network }\">\n        <div v-if=\"!isLoading\" class=\"py-4 px-6\">\n          <div\n            class=\"flex justify-center items-center w-8 h-8 bg-gray-50 dark:bg-gray-800 rounded shadow-sm\"\n          >\n            <img\n              :src=\"buildNetworkIconURL(getNetworkSlug(network))\"\n              :alt=\"network\"\n              class=\"w-6 h-6\"\n            />\n          </div>\n        </div>\n      </template>\n      <template #iconColumnHeader>\n        <div class=\"flex items-center\">\n          <CompositionIcon />\n        </div>\n      </template>\n      <template #iconColumnCell=\"pool: VotingPool\">\n        <div v-if=\"!isLoading\" class=\"py-4 px-6\">\n          <BalAssetSet :logoURIs=\"orderedTokenURIs(pool)\" :width=\"100\" />\n        </div>\n      </template>\n      <template #poolCompositionCell=\"pool: VotingPool\">\n        <div v-if=\"!isLoading\" class=\"flex items-center py-4 px-6\">\n          <div v-if=\"poolMetadata(pool.id)\" class=\"text-left\">\n            {{ poolMetadata(pool.id)?.name }}\n          </div>\n          <TokenPills\n            v-else\n            :tokens=\"orderedGaugeTokens(pool)\"\n            :isStablePool=\"\n              isStableLike(pool.poolType) || isUnknownType(pool.poolType)\n            \"\n            :selectedTokens=\"getSelectedTokens(pool.tokens)\"\n            :pickedTokens=\"getPickedTokens(pool.tokens)\"\n          />\n          <Ve8020Chip v-if=\"isVe8020Pool(pool)\" />\n          <BalTooltip v-if=\"isGyro(pool)\" :text=\"$t('clpTooltip')\" width=\"56\">\n            <template #activator>\n              <PoolFeatureChip\n                :feature=\"PoolFeature.CLP\"\n                :protocols=\"[Protocol.Gyro]\"\n                class=\"ml-1\"\n              />\n            </template>\n          </BalTooltip>\n          <BalChipNew v-if=\"isGaugeNew(pool)\" class=\"ml-2\" />\n          <BalChipExpired\n            v-if=\"getIsGaugeExpired(pool.gauge.address)\"\n            class=\"ml-2\"\n          />\n        </div>\n      </template>\n      <template #nextPeriodVotesCell=\"pool: VotingPool\">\n        <!-- Put to BalLazy the most expensive to render component -->\n        <BalLazy>\n          <div v-if=\"!isLoading\" class=\"flex justify-end py-4 px-6\">\n            <GaugeVoteInfo :pool=\"pool\" />\n            <div class=\"flex justify-end w-6\">\n              <IconLimit\n                v-if=\"isVeBalPool(pool.id)\"\n                size=\"sm\"\n                amount=\"10\"\n                :tooltip=\"\n                  $t(\n                    'veBAL.liquidityMining.limitsTooltip.distributionsCappedVeBAL'\n                  )\n                \"\n              />\n              <IconLimit\n                v-else-if=\"\n                  pool.gauge?.relativeWeightCap &&\n                  pool.gauge.relativeWeightCap !== '1.0'\n                \"\n                size=\"sm\"\n                :amount=\"(Number(pool.gauge.relativeWeightCap) * 100).toFixed()\"\n                :tooltip=\"\n                  $t(\n                    'veBAL.liquidityMining.limitsTooltip.distributionsCappedAt',\n                    [(Number(pool.gauge.relativeWeightCap) * 100).toFixed()]\n                  )\n                \"\n              />\n            </div>\n          </div>\n        </BalLazy>\n      </template>\n      <template #myVotesCell=\"pool: VotingPool\">\n        <div v-if=\"!isLoading\" class=\"py-4 px-6 text-right\">\n          <GaugesTableMyVotes :pool=\"pool\"></GaugesTableMyVotes>\n        </div>\n      </template>\n      <template #voteSelectColumnCell=\"pool: VotingPool\">\n        <BalCheckbox\n          v-if=\"isWalletReady\"\n          class=\"flex -top-2 justify-center ml-8 cursor-pointer\"\n          name=\"expiredGaugesFilter\"\n          noMargin\n          :modelValue=\"isSelected(pool)\"\n          :disabled=\"\n            hasUserVotes(pool) ||\n            isVotingTimeLocked(pool.lastUserVoteTime) ||\n            selectVotesDisabled\n          \"\n          @click.stop\n          @input=\"toggleSelection(pool)\"\n        />\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n\n<style>\ntr.expired-gauge-row {\n  @apply bg-red-50  hover:bg-red-100 dark:border-red-600 dark:border;\n}\n</style>\n","import { customRef, Ref } from 'vue';\n\n// Taken from https://vuejs.org/api/reactivity-advanced.html#customref\nexport default function useDebouncedRef<T>(value: T, delay = 200): Ref<T> {\n  let timeout: NodeJS.Timeout;\n  return customRef((track, trigger) => {\n    return {\n      get() {\n        track();\n        return value;\n      },\n      set(newValue) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n          value = newValue;\n          trigger();\n        }, delay);\n      },\n    };\n  });\n}\n","import { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport useDebouncedRef from '@/composables/useDebouncedRed';\nimport { isGaugeExpired } from '../../voting-utils';\nimport { Network } from '@/lib/config/types';\nimport configs from '@/lib/config';\n\nexport function useLMVotingFilters(\n  votingPools: ComputedRef<VotingPool[]>,\n  expiredGauges: Ref<readonly string[] | undefined>\n) {\n  const router = useRouter();\n\n  const showExpiredGauges = useDebouncedRef<boolean>(false, 500);\n  const tokenFilter = useDebouncedRef<string>('', 500);\n  const activeNetworkFilters = useDebouncedRef<Network[]>(\n    getDefaultActiveNetworkFilter(),\n    500\n  );\n\n  const poolsFilteredByExpiring = computed(() => {\n    if (showExpiredGauges.value) {\n      return votingPools.value;\n    }\n\n    return votingPools.value.filter(pool => {\n      if (Number(pool.userVotes) > 0) {\n        return true;\n      }\n      return !isGaugeExpired(expiredGauges.value, pool.gauge.address);\n    });\n  });\n\n  function getDefaultActiveNetworkFilter() {\n    const param = router.currentRoute.value.query.chain;\n\n    if (!param || typeof param !== 'string') {\n      return [];\n    }\n\n    const networkToFilter = Network[param.toUpperCase()];\n    if (!networkToFilter) {\n      return [];\n    }\n\n    return [networkToFilter];\n  }\n\n  const filteredVotingPools = computed(() => {\n    // put filter by expiring in separate computed to maintain readability\n    return poolsFilteredByExpiring.value.filter(pool => {\n      let showByNetwork = true;\n      if (\n        activeNetworkFilters.value.length > 0 &&\n        !activeNetworkFilters.value.includes(pool.network)\n      ) {\n        showByNetwork = false;\n      }\n\n      return (\n        showByNetwork &&\n        pool.tokens.some(token => {\n          return token.symbol\n            ?.toLowerCase()\n            .includes(tokenFilter.value.toLowerCase());\n        })\n      );\n    });\n  });\n\n  const networkFilters: Network[] = Object.entries(configs)\n    .filter(details => {\n      const config = details[1];\n      return (\n        !config.testNetwork && config.pools.Stakable.VotingGaugePools.length > 0\n      );\n    })\n    .map(details => Number(details[0]) as Network);\n  return {\n    showExpiredGauges,\n    activeNetworkFilters,\n    filteredVotingPools,\n    tokenFilter,\n    networkFilters,\n  };\n}\n","<script lang=\"ts\" setup>\nimport useVotingEscrowLocks from '@/composables/useVotingEscrowLocks';\nimport useVotingPools from '@/composables/useVotingPools';\n\nimport useNetwork from '@/composables/useNetwork';\nimport useNumbers from '@/composables/useNumbers';\nimport useVeBal from '@/composables/useVeBAL';\nimport { useVeBalLockInfo } from '@/composables/useVeBalLockInfo';\n\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { isVotingCompleted, useVoting } from '../providers/voting.provider';\nimport { bpsToPercentage } from '../voting-utils';\nimport GaugesFilters from './GaugesFilters.vue';\nimport GaugesTable from './GaugesTable.vue';\nimport VotingAlert from './VotingAlert.vue';\nimport { useLMVotingFilters } from './composables/useLMVotingFilters';\n\n/**\n * DATA\n */\n\n/**\n * COMPOSABLES\n */\nconst { account } = useWeb3();\nconst {\n  votingPools,\n  unallocatedVotes,\n  votingPeriodEnd,\n  votingPeriodLastHour,\n  isRefetchingVotingPools,\n  resetVotingPools,\n} = useVotingPools();\nconst { veBalLockTooShort, veBalExpired, hasLock, hasExpiredLock } =\n  useVeBalLockInfo();\n\nconst { shouldResubmitVotes } = useVotingEscrowLocks();\nconst { networkSlug } = useNetwork();\nconst { isWalletReady, isMismatchedNetwork } = useWeb3();\n\nconst { hasVeBalBalance, noVeBalBalance } = useVeBal();\nconst { fNum } = useNumbers();\nconst {\n  isLoading,\n  isLoadingVotingPools,\n  expiredGauges,\n  unlockedSelectedPools,\n  hasSubmittedVotes,\n  hasAllVotingPowerTimeLocked,\n  loadRequestWithExistingVotes,\n  isVotingRequestLoaded,\n} = useVoting();\n\nconst {\n  showExpiredGauges,\n  activeNetworkFilters,\n  filteredVotingPools,\n  tokenFilter,\n  networkFilters,\n} = useLMVotingFilters(votingPools, expiredGauges);\n\n/**\n * COMPUTED\n */\nconst unallocatedVotesFormatted = computed<string>(() =>\n  bpsToPercentage(unallocatedVotes.value, fNum)\n);\n\nconst selectVotesDisabled = computed(\n  (): boolean =>\n    isLoading.value ||\n    !hasVeBalBalance.value ||\n    hasAllVotingPowerTimeLocked.value\n);\n\nconst votingDisabled = computed(\n  () =>\n    selectVotesDisabled.value ||\n    unlockedSelectedPools.value.length === 0 ||\n    isMismatchedNetwork.value\n);\n\n/**\n * METHODS\n */\nconst intersectionSentinel = ref<HTMLDivElement | null>(null);\nconst renderedRowsIdx = ref(40);\nlet observer: IntersectionObserver | undefined;\nfunction addIntersectionObserver(): void {\n  if (\n    !('IntersectionObserver' in window) ||\n    !('IntersectionObserverEntry' in window) ||\n    !intersectionSentinel.value\n  ) {\n    renderedRowsIdx.value = votingPools.value.length;\n    return;\n  }\n  const options = {\n    rootMargin: '0% 0% 50% 0%',\n  };\n  const callback = (entries: IntersectionObserverEntry[]): void => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        renderedRowsIdx.value += 40;\n      }\n    });\n  };\n  observer = new IntersectionObserver(callback, options);\n  observer.observe(intersectionSentinel.value);\n}\n\nonMounted(() => {\n  addIntersectionObserver();\n});\nonBeforeUnmount(() => {\n  observer?.disconnect();\n});\nwatch(\n  () => [showExpiredGauges.value, activeNetworkFilters.value],\n  () => {\n    renderedRowsIdx.value = votingPools.value.length;\n  },\n  { deep: true }\n);\n\nwatch(isLoading, async newValue => {\n  // Load votingRequest once the voting list and the expired gauges were loaded\n  if (!newValue) {\n    loadRequestWithExistingVotes(votingPools.value);\n  }\n});\n\nwatch(isRefetchingVotingPools, async () => {\n  // Reload votingRequest if refetching after coming back from a successful voting\n  if (isVotingCompleted.value || !isVotingRequestLoaded) {\n    loadRequestWithExistingVotes(votingPools.value);\n  }\n});\nwatch(account, (_, prevAccount) => {\n  if (prevAccount) {\n    // Clear voting request on account change\n    isVotingRequestLoaded.value = false;\n    resetVotingPools();\n  }\n});\n</script>\n\n<template>\n  <div class=\"flex flex-col\">\n    <div\n      class=\"flex flex-col lg:flex-row gap-4 lg:justify-between lg:items-end\"\n    >\n      <div class=\"px-4 xl:px-0 pb-2 max-w-3xl\">\n        <h3 class=\"mb-2\">\n          {{ $t('veBAL.liquidityMining.title') }}\n          <BalTooltip\n            :text=\"$t('veBAL.liquidityMining.description')\"\n            iconSize=\"sm\"\n            iconClass=\"text-gray-400 dark:text-gray-600\"\n            width=\"72\"\n            class=\"mt-1\"\n          />\n        </h3>\n      </div>\n    </div>\n\n    <VotingAlert v-if=\"veBalLockTooShort\" title=\"veBAL not locked for 7 days\">\n      You must have veBAL locked for more than 7 days to vote on gauges.\n    </VotingAlert>\n\n    <VotingAlert\n      v-if=\"shouldResubmitVotes\"\n      title=\"Resubmit your votes to utilize your full voting power\"\n    >\n      Votes on pools are set at the time of the vote. Since you’ve added new\n      veBAL since your original vote, you have additional voting power which is\n      not being used. Use the 'Edit votes' button to resubmit your votes.\n    </VotingAlert>\n\n    <VotingAlert\n      v-if=\"noVeBalBalance && !isLoading\"\n      title=\"You need some veBAL to vote on gauges\"\n    >\n      Get veBAL by locking up LP tokens from the 80% BAL / 20% WETH pool.\n    </VotingAlert>\n\n    <VotingAlert\n      v-if=\"veBalExpired\"\n      title=\"You can't vote because your veBAL has expired\"\n    >\n      You need some veBAL to vote on gauges. Unlock and relock your\n      B-80BAL-20-WETH to get some veBAL.\n    </VotingAlert>\n\n    <VotingAlert\n      v-if=\"hasAllVotingPowerTimeLocked\"\n      title=\"100% of your votes are locked\"\n    >\n      You won't be able to make any edits until some of them are unlocked.\n    </VotingAlert>\n\n    <div class=\"flex flex-wrap justify-between items-end px-4 lg:px-0\">\n      <div class=\"flex gap-2 xs:gap-3 mb-3 lg:mb-0\">\n        <BalCard shadow=\"none\" class=\"p-0 md:w-48 min-w-max\">\n          <div class=\"flex items-center\">\n            <p class=\"inline mr-1 text-sm text-secondary\">\n              My unallocated votes\n            </p>\n            <BalTooltip\n              :text=\"$t('veBAL.liquidityMining.myUnallocatedVotesTooltip')\"\n              iconClass=\"text-gray-400 dark:text-gray-600\"\n              iconSize=\"sm\"\n              width=\"72\"\n              class=\"mt-1\"\n            />\n          </div>\n          <p\n            class=\"inline mr-1 text-lg font-semibold\"\n            :class=\"{ 'text-red-500': hasExpiredLock }\"\n          >\n            <span v-if=\"hasLock\">\n              {{ unallocatedVotesFormatted }}\n            </span>\n            <span v-else class=\"mr-1\">—</span>\n          </p>\n          <BalTooltip\n            v-if=\"hasExpiredLock\"\n            :text=\"$t('veBAL.liquidityMining.votingPowerExpiredTooltip')\"\n            iconSize=\"sm\"\n            :iconName=\"'alert-triangle'\"\n            :iconClass=\"'text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors'\"\n            width=\"72\"\n            class=\"relative top-0.5\"\n          />\n        </BalCard>\n        <BalCard shadow=\"none\" class=\"md:w-48 min-w-max\">\n          <div class=\"flex items-center\">\n            <p\n              :class=\"{ 'text-orange-500 font-medium': votingPeriodLastHour }\"\n              class=\"inline mr-1 text-sm text-secondary\"\n            >\n              Voting period ends\n            </p>\n            <BalTooltip\n              :text=\"$t('veBAL.liquidityMining.votingPeriodTooltip')\"\n              iconSize=\"sm\"\n              iconClass=\"text-gray-400 dark:text-gray-600\"\n              width=\"72\"\n              class=\"mt-1\"\n            />\n          </div>\n          <p class=\"text-lg font-semibold tabular-nums\">\n            <span\n              v-if=\"votingPeriodEnd.length\"\n              :class=\"{ 'text-orange-500': votingPeriodLastHour }\"\n            >\n              {{\n                $t(\n                  'veBAL.liquidityMining.votingPeriodCountdown',\n                  votingPeriodEnd\n                )\n              }}\n            </span>\n          </p>\n        </BalCard>\n      </div>\n      <div class=\"flex mb-3 lg:mb-0\">\n        <BalTextInput\n          v-model=\"tokenFilter\"\n          class=\"mr-5 b-5\"\n          name=\"tokenSearch\"\n          type=\"text\"\n          :placeholder=\"$t('filterByToken')\"\n          size=\"sm\"\n        >\n          <template #prepend>\n            <div class=\"flex items-center h-full\">\n              <BalIcon name=\"search\" size=\"md\" class=\"px-2 text-gray-600\" />\n            </div>\n          </template>\n        </BalTextInput>\n        <GaugesFilters\n          :networkFilters=\"networkFilters\"\n          :showExpiredGauges=\"showExpiredGauges\"\n          :activeNetworkFilters=\"activeNetworkFilters\"\n          @update:show-expired-gauges=\"showExpiredGauges = $event\"\n          @update:active-network-filters=\"activeNetworkFilters = $event\"\n        />\n        <div v-if=\"isWalletReady\" class=\"flex-0 ml-5 w-32 h-8\">\n          <BalBtn\n            :tag=\"votingDisabled ? 'div' : 'router-link'\"\n            :to=\"{ name: 'vebal-voting', params: { networkSlug } }\"\n            :label=\"hasSubmittedVotes ? 'Edit votes' : 'Vote'\"\n            color=\"gradient\"\n            :disabled=\"votingDisabled\"\n            block\n          />\n        </div>\n      </div>\n    </div>\n\n    <GaugesTable\n      :renderedRowsIdx=\"renderedRowsIdx\"\n      :isLoading=\"isLoadingVotingPools\"\n      :data=\"filteredVotingPools\"\n      :noPoolsLabel=\"$t('noInvestments')\"\n      :filterText=\"tokenFilter\"\n      :selectVotesDisabled=\"selectVotesDisabled\"\n    />\n    <div ref=\"intersectionSentinel\" />\n  </div>\n</template>\n","export default \"__VITE_ASSET__d96f65dd__\"","export default \"__VITE_ASSET__0e88f03d__\"","<script setup lang=\"ts\">\nimport { computed, ref } from 'vue';\nimport lock from '@/assets/images/icons/lock.svg';\nimport unlock from '@/assets/images/icons/unlock.svg';\n\nimport UnlockPreviewModal from '@/components/forms/lock_actions/UnlockForm/components/UnlockPreviewModal/UnlockPreviewModal.vue';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport useVeBal from '@/composables/useVeBAL';\nimport useNetwork from '@/composables/useNetwork';\nimport { bnum } from '@/lib/utils';\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TokenInfo } from '@/types/TokenList';\n\n/**\n * TYPES\n */\ntype Props = {\n  lockablePool: Pool;\n  lockablePoolTokenInfo: TokenInfo;\n  veBalLockInfo?: VeBalLockInfo | null;\n  totalLockedValue: string;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  veBalLockInfo: null,\n});\n\n/**\n * STATE\n */\nconst showUnlockPreviewModal = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { balanceFor } = useTokens();\nconst { fNum } = useNumbers();\nconst { lockablePoolId } = useVeBal();\nconst { isWalletReady } = useWeb3();\nconst { networkSlug } = useNetwork();\n\n/**\n * COMPUTED\n */\nconst poolShares = computed(() =>\n  bnum(props.lockablePool.totalLiquidity).div(props.lockablePool.totalShares)\n);\n\nconst bptBalance = computed(() => balanceFor(props.lockablePool.address));\n\nconst fiatTotal = computed(() =>\n  poolShares.value.times(bptBalance.value).toString()\n);\n\nconst totalExpiredLpTokens = computed(() =>\n  props.veBalLockInfo?.isExpired ? props.veBalLockInfo.lockedAmount : '0'\n);\n\nconst fiatTotalExpiredLpTokens = computed(() =>\n  bnum(props.lockablePool.totalLiquidity)\n    .div(props.lockablePool.totalShares)\n    .times(totalExpiredLpTokens.value)\n    .toString()\n);\n\nconst cards = computed(() => {\n  return [\n    {\n      id: 'unlockedVeBAL',\n      label: 'Unlocked ve8020 BAL/WETH',\n      icon: unlock,\n      iconBgColor: 'bg-yellow-100',\n      value: fNum(bptBalance.value, FNumFormats.token),\n      secondaryText: fNum(fiatTotal.value, FNumFormats.fiat),\n    },\n    {\n      id: 'lockedVeBAL',\n      label: 'Locked ve8020 BAL/WETH',\n      icon: lock,\n      iconBgColor: 'bg-green-50',\n      value: fNum(props.veBalLockInfo?.lockedAmount ?? '0', FNumFormats.token),\n      secondaryText: fNum(props.totalLockedValue, FNumFormats.fiat),\n      showUnlockIcon: Boolean(props.veBalLockInfo?.isExpired),\n    },\n  ];\n});\n</script>\n\n<template>\n  <BalCard v-for=\"card in cards\" :key=\"card.id\">\n    <div class=\"flex justify-between items-center\">\n      <div class=\"font-bold label\">\n        {{ card.label }}\n      </div>\n      <div\n        :class=\"[\n          card.iconBgColor,\n          'flex items-center p-3 rounded-full justifty center bg-red',\n        ]\"\n      >\n        <img :src=\"card.icon\" alt=\"card.label\" />\n      </div>\n    </div>\n    <div class=\"value\" :class=\"card.id\">\n      <div v-if=\"card.id === 'lockedVeBAL'\">\n        <span\n          :class=\"{ 'text-red-500': bnum(totalExpiredLpTokens).gt(0) }\"\n          class=\"mr-1 font-semibold truncate\"\n          >{{ card.value }}</span\n        >\n        <BalTooltip\n          v-if=\"bnum(totalExpiredLpTokens).gt(0)\"\n          :text=\"$t('veBAL.myVeBAL.cards.myExpiredLockTooltip')\"\n          iconSize=\"sm\"\n          iconName=\"alert-triangle\"\n          :iconClass=\"'text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors'\"\n          width=\"72\"\n          class=\"relative top-0.5\"\n        />\n      </div>\n      <div v-else>\n        <span class=\"text-xl font-bold truncate\">{{ card.value }}</span>\n      </div>\n    </div>\n    <div class=\"mb-3 secondary-value text-secondary\">\n      {{ card.secondaryText }}\n    </div>\n\n    <div class=\"flex\">\n      <template v-if=\"card.id === 'unlockedVeBAL'\">\n        <BalBtn\n          color=\"blue\"\n          outline\n          class=\"mr-3\"\n          @click=\"\n            $router.push({\n              name: 'add-liquidity',\n              params: { id: lockablePoolId, networkSlug },\n              query: { returnRoute: 'vebal' },\n            })\n          \"\n        >\n          {{ $t('addLiquidity') }}\n        </BalBtn>\n        <BalBtn\n          color=\"blue\"\n          outline\n          :disabled=\"Number(bptBalance) === 0\"\n          @click=\"\n            $router.push({ name: 'get-vebal', query: { returnRoute: 'vebal' } })\n          \"\n        >\n          Lock for veBAL\n        </BalBtn>\n      </template>\n\n      <template v-if=\"card.id === 'lockedVeBAL'\">\n        <BalBtn\n          v-if=\"bnum(totalExpiredLpTokens).gt(0)\"\n          :disabled=\"!isWalletReady\"\n          color=\"blue\"\n          outline\n          @click=\"showUnlockPreviewModal = true\"\n        >\n          Unlock\n        </BalBtn>\n        <BalBtn\n          v-else\n          :disabled=\"!isWalletReady\"\n          color=\"blue\"\n          outline\n          class=\"mr-3\"\n          @click=\"\n            $router.push({ name: 'get-vebal', query: { returnRoute: 'vebal' } })\n          \"\n        >\n          Extend lock\n        </BalBtn>\n      </template>\n    </div>\n  </BalCard>\n  <teleport to=\"#modal\">\n    <UnlockPreviewModal\n      v-if=\"showUnlockPreviewModal && veBalLockInfo\"\n      :lockablePool=\"lockablePool\"\n      :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\n      :veBalLockInfo=\"veBalLockInfo\"\n      :totalLpTokens=\"totalExpiredLpTokens\"\n      :fiatTotalLpTokens=\"fiatTotalExpiredLpTokens\"\n      @close=\"showUnlockPreviewModal = false\"\n    />\n  </teleport>\n</template>\n\n<style scoped>\n.label {\n  @apply text-sm mb-2;\n}\n\n.value {\n  @apply text-xl font-medium flex flex-wrap items-center justify-between mb-0.5;\n}\n\n.secondary-value {\n  @apply text-sm;\n}\n\n.plus-circle:hover,\n.plus-circle:focus,\n.plus-circle:hover :deep(svg.feather-plus-circle),\n.plus-circle:focus :deep(svg.feather-plus-circle) {\n  @apply transition-all text-white;\n\n  fill: theme('colors.blue.600');\n}\n\n.plus-circle:hover :deep(svg.feather-plus-circle circle),\n.plus-circle:focus :deep(svg.feather-plus-circle circle) {\n  fill: theme('colors.blue.600');\n}\n\n.minus-circle,\n.minus-circle:hover :deep(svg.feather-minus-circle circle) {\n  fill: theme('colors.red.500');\n}\n\n.minus-circle:hover,\n.minus-circle:focus {\n  transform: scale(1.25);\n}\n\n.minus-circle:hover :deep(svg.feather-minus-circle),\n.minus-circle:focus :deep(svg.feather-minus-circle) {\n  @apply transition-all text-white;\n\n  fill: theme('colors.red.500');\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\n\nimport { useLock } from '@/composables/useLock';\n\nimport MyVeBalCards from './components/MyVeBalCards.vue';\n\n/**\n * COMPOSABLES\n */\nconst {\n  isLoadingLockPool,\n  isLoadingLockInfo,\n  lockPool,\n  lockPoolToken,\n  lock,\n  totalLockedValue,\n} = useLock();\n\n/**\n * COMPUTED\n */\n\nconst isLoading = computed(\n  () => isLoadingLockPool.value || isLoadingLockInfo.value\n);\n</script>\n\n<template>\n  <h3 class=\"mb-4 font-bold text-center\">\n    {{ $t('veBAL.myVeBAL.title') }}\n  </h3>\n  <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-2 gap-4\">\n    <template v-if=\"isLoading && !(lockPool && lockPoolToken)\">\n      <BalLoadingBlock v-for=\"n in 2\" :key=\"n\" class=\"h-24\" />\n    </template>\n    <MyVeBalCards\n      v-else-if=\"lockPool && lockPoolToken\"\n      :veBalLockInfo=\"lock\"\n      :lockablePool=\"lockPool\"\n      :lockablePoolTokenInfo=\"lockPoolToken\"\n      :totalLockedValue=\"totalLockedValue\"\n    />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport {\n  veBalSyncSupportedNetworks,\n  useCrossChainSync,\n} from '@/providers/cross-chain-sync.provider';\nimport useWeb3 from '@/services/web3/useWeb3';\n\ntype Props = {\n  chosenNetworks: Set<Network>;\n  veBalBalance: string;\n  activeTabIdx: number;\n};\n\nconst { account } = useWeb3();\nconst { networksBySyncState, l2VeBalBalances, tempSyncingNetworks } =\n  useCrossChainSync();\n\nconst props = defineProps<Props>();\nconst emit = defineEmits(['update:activeTabIdx', 'toggleNetwork']);\n\nconst toggleNetwork = (network: Network) => {\n  emit('toggleNetwork', network);\n};\n\nasync function syncNetworks() {\n  if (!props.chosenNetworks.size) return;\n  emit('update:activeTabIdx', 1);\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col\">\n    <div class=\"mb-1.5 text-lg font-bold\">\n      {{ $t('crossChainBoost.selectNetworkModal.title') }}\n    </div>\n\n    <div class=\"mb-5 text-sm text-secondary\">\n      {{ $t('crossChainBoost.selectNetworkModal.description') }}\n    </div>\n\n    <div\n      class=\"flex justify-between p-4 -mb-0.5 rounded-t-lg border-2 border-gray-200 dark:border-gray-800 bg-slate-100 dark:bg-slate-800\"\n    >\n      <span class=\"font-semibold\">Ethereum</span>\n      <div class=\"font-semibold\">{{ veBalBalance }} veBAL</div>\n    </div>\n\n    <div\n      class=\"mb-5 rounded-b-lg border-2 border-gray-200 dark:border-gray-800\"\n    >\n      <div\n        v-for=\"network in veBalSyncSupportedNetworks\"\n        :key=\"network\"\n        aria-disabled=\"true\"\n        class=\"border-b-2 last:border-b-0 dark:border-gray-800\"\n      >\n        {{ tempSyncingNetworks.value }}\n        <div\n          class=\"flex justify-between items-center p-4\"\n          :class=\"{\n            'grayscale pointer-events-none opacity-40':\n              networksBySyncState.synced.includes(network) ||\n              tempSyncingNetworks?.[account]?.networks.includes(network),\n          }\"\n        >\n          <BalCheckbox\n            noMargin\n            alignCheckbox=\"items-center\"\n            :name=\"network.toString()\"\n            :modelValue=\"chosenNetworks.has(network)\"\n            :label=\"configs[network].chainName\"\n            class=\"font-medium\"\n            @input=\"toggleNetwork(network)\"\n          />\n          <div class=\"font-medium\">\n            {{ l2VeBalBalances?.[network] || '0.0000' }} veBAL\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <BalBtn\n      block\n      color=\"gradient\"\n      size=\"md\"\n      :disabled=\"chosenNetworks.size === 0\"\n      @click=\"syncNetworks\"\n    >\n      {{ $t('next') }}\n    </BalBtn>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\nimport { TransactionActionInfo } from '@/types/transactions';\nimport { useI18n } from 'vue-i18n';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { useCrossChainSync } from '@/providers/cross-chain-sync.provider';\nimport useTransactions from '@/composables/useTransactions';\nimport useEthers from '@/composables/useEthers';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * TYPES\n */\ntype Props = {\n  chosenNetworks: Set<Network>;\n  activeTabIdx: number;\n  veBalBalance: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\nconst emit = defineEmits(['update:activeTabIdx']);\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { addTransaction } = useTransactions();\nconst { txListener } = useEthers();\nconst {\n  l2VeBalBalances,\n  sync,\n  setTempSyncingNetworks,\n  tempSyncingNetworks,\n  setSyncTxHashes,\n} = useCrossChainSync();\nconst { isMismatchedNetwork } = useWeb3();\n\n/**\n * STATE\n */\nconst currentActionIndex = ref(0);\n\n/**\n * METHODS\n */\nasync function handleTransaction(\n  tx: TransactionResponse,\n  network: Network\n): Promise<void> {\n  addTransaction({\n    id: tx.hash,\n    type: 'tx',\n    action: 'sync',\n    summary: `Sync veBAL to ${configs[network].chainName} network`,\n  });\n\n  txListener(tx, {\n    onTxConfirmed: async () => {\n      setSyncTxHashes(network, tx.hash);\n    },\n    onTxFailed: () => {\n      //\n    },\n  });\n}\n\nasync function handleAction(network: Network) {\n  try {\n    const tx = await sync(network);\n\n    handleTransaction(tx, network);\n\n    setTempSyncingNetworks(Array.from(props.chosenNetworks));\n    localStorage.setItem(\n      'tempSyncingNetworks',\n      JSON.stringify(tempSyncingNetworks.value)\n    );\n\n    setSyncTxHashes(network, tx.hash);\n\n    return tx;\n  } catch (error) {\n    console.error(error);\n    return Promise.reject(error);\n  }\n}\n\nfunction handleSuccess() {\n  emit('update:activeTabIdx', 2);\n}\n\n/**\n * COMPUTED\n */\nconst networkSyncSteps = computed(() => {\n  const actions: TransactionActionInfo[] = [];\n  props.chosenNetworks.forEach(network => {\n    actions.push({\n      label: t('crossChainBoost.syncToNetwork', {\n        network: configs[network].chainName,\n      }),\n      loadingLabel: t('crossChainBoost.syncingToNetwork', {\n        network: configs[network].chainName,\n      }),\n      confirmingLabel: t('crossChainBoost.syncingToNetwork', {\n        network: configs[network].chainName,\n      }),\n      action: async () => {\n        return handleAction(network);\n      },\n      stepTooltip: t('crossChainBoost.syncToNetwork', {\n        network: configs[network].chainName,\n      }),\n    });\n  });\n\n  return actions;\n});\n</script>\n\n<template>\n  <div class=\"flex flex-col\">\n    <div class=\"mb-2 text-lg font-bold\">Sync veBAL</div>\n    <div class=\"mb-5 text-sm text-secondary\">\n      {{ $t('crossChainBoost.syncNetworkAction.title') }}\n    </div>\n\n    <div\n      v-for=\"network in chosenNetworks.values()\"\n      :key=\"network\"\n      class=\"mb-4 rounded-lg border-2 border-gray-200 dark:border-gray-800\"\n    >\n      <div\n        class=\"flex items-center py-1 px-3 border-b-2 border-gray-200 dark:border-gray-800 bg-slate-100 dark:bg-slate-800\"\n      >\n        <img\n          :src=\"buildNetworkIconURL(network)\"\n          alt=\"\"\n          class=\"p-0.5 mr-2 w-8 h-8 rounded-full cursor-pointer\"\n        />\n        <div class=\"font-semibold\">{{ configs[network].chainName }}</div>\n      </div>\n\n      <div>\n        <div class=\"flex border-b-2 last:border-b-0 dark:border-gray-800\">\n          <div class=\"p-4 w-6/12 text-gray-600 border-r-2 dark:border-gray-800\">\n            <div class=\"text-sm font-medium text-secondary\">\n              {{ $t('crossChainBoost.currentBalance') }}\n            </div>\n            <div class=\"text-lg font-semibold text-black dark:text-white\">\n              {{ l2VeBalBalances?.[network] || '0.0000' }} veBAL\n            </div>\n          </div>\n          <div class=\"p-4 w-6/12 text-secondary\">\n            <div class=\"text-sm font-medium text-secondary\">\n              {{ $t('crossChainBoost.postSyncBalance') }}\n            </div>\n            <div class=\"text-lg font-semibold text-black dark:text-white\">\n              {{ veBalBalance || '0.0000' }} veBAL\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"grow\"></div>\n\n    <BalActionSteps\n      :actions=\"networkSyncSteps\"\n      primaryActionType=\"sync\"\n      :spacerWidth=\"10\"\n      :disabled=\"isMismatchedNetwork\"\n      @success=\"handleSuccess\"\n      @set-current-action-index=\"currentActionIndex = $event\"\n    />\n  </div>\n</template>\n","export default \"__VITE_ASSET__c5e2ca6b__\"","<script setup lang=\"ts\">\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport { useCrossChainSync } from '@/providers/cross-chain-sync.provider';\n\ntype Props = {\n  chosenNetworks: Set<Network>;\n  veBalBalance: string;\n};\n\nconst { syncLayerZeroTxLinks } = useCrossChainSync();\n\ndefineProps<Props>();\ndefineEmits(['close']);\n</script>\n\n<template>\n  <div>\n    <div class=\"flex items-center mb-3 text-xl font-bold\">\n      <img\n        src=\"/src/assets/images/icons/success-check.svg\"\n        alt=\"\"\n        class=\"mr-2\"\n      />\n      {{ $t('crossChainBoost.syncInitiatedModal.title') }}\n    </div>\n    <div class=\"mb-6 text-sm text-gray-600 dark:text-gray-300\">\n      {{ $t('crossChainBoost.syncInitiatedModal.description') }}\n    </div>\n    <div\n      class=\"overflow-hidden mb-5 rounded-lg border-2 border-gray-200 dark:border-gray-800\"\n    >\n      <div\n        class=\"flex border-b-2 last:border-b-0 border-gray-200 dark:border-gray-800 bg-slate-100 dark:bg-slate-800\"\n      >\n        <div\n          class=\"p-4 w-6/12 font-semibold text-black dark:text-gray-300 grow\"\n        >\n          Ethereum Mainnet\n        </div>\n        <div class=\"p-4 text-sm font-medium text-black dark:text-gray-300\">\n          {{ veBalBalance }} veBAL\n        </div>\n      </div>\n      <div\n        v-for=\"network in chosenNetworks.values()\"\n        :key=\"network\"\n        class=\"flex border-b-2 last:border-b-0 dark:border-gray-800\"\n      >\n        <div class=\"p-4 font-semibold text-black dark:text-gray-300 grow\">\n          {{ configs[network].chainName }}\n        </div>\n        <div\n          class=\"p-4 text-sm font-medium text-gray-600\"\n          :class=\"{ 'pr-0': syncLayerZeroTxLinks[network] }\"\n        >\n          {{ veBalBalance }} veBAL\n        </div>\n\n        <div\n          v-if=\"syncLayerZeroTxLinks[network]\"\n          class=\"flex pr-2 pl-1 align-center\"\n        >\n          <BalLink\n            :href=\"syncLayerZeroTxLinks[network]\"\n            external\n            noStyle\n            class=\"group flex items-center\"\n          >\n            <BalIcon\n              name=\"arrow-up-right\"\n              size=\"sm\"\n              class=\"mb-1 ml-px group-hover:text-pink-500 transition-colors text-dark-grey\"\n            />\n          </BalLink>\n        </div>\n      </div>\n    </div>\n\n    <BalAlert\n      type=\"tip\"\n      :title=\"$t('crossChainBoost.syncInitiatedModal.warningTitle')\"\n      class=\"mb-8\"\n    >\n      <div>\n        {{ $t('crossChainBoost.syncInitiatedModal.warningDescription') }}\n      </div>\n    </BalAlert>\n\n    <BalBtn color=\"gray\" outline block @click=\"$emit('close')\">\n      {{ $t('close') }}\n    </BalBtn>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { Network } from '@/lib/config/types';\nimport SyncSelectNetwork from '@/components/contextual/pages/vebal/cross-chain-boost/SyncSelectNetwork.vue';\nimport SyncNetworkAction from '@/components/contextual/pages/vebal/cross-chain-boost/SyncNetworkAction.vue';\nimport SyncFinalState from '@/components/contextual/pages/vebal/cross-chain-boost/SyncFinalState.vue';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport {\n  L2VeBalBalances,\n  NetworksBySyncState,\n  TempSyncingNetworks,\n} from '@/providers/cross-chain-sync.provider';\n\ntype Props = {\n  isVisible: boolean;\n  networksBySyncState: NetworksBySyncState;\n  veBalBalance: string;\n  l2VeBalBalances: L2VeBalBalances;\n  sync(network: Network): Promise<TransactionResponse>;\n  setTempSyncingNetworks(\n    syncingNetworks: Network[]\n  ): Record<string, TempSyncingNetworks>;\n};\n\nwithDefaults(defineProps<Props>(), {\n  isVisible: false,\n});\n\nconst emit = defineEmits(['closeModal']);\n\nconst chosenNetworks = ref<Set<Network>>(new Set());\n\nconst syncTabs = [SyncSelectNetwork, SyncNetworkAction, SyncFinalState];\n\nconst tabActiveIdx = ref(0);\n\nconst isSyncedSuccessfull = ref(false);\n\nconst closeModal = () => {\n  emit(\n    'closeModal',\n    isSyncedSuccessfull.value ? Array.from(chosenNetworks.value) : null\n  );\n\n  tabActiveIdx.value = 0;\n  chosenNetworks.value = new Set();\n};\n\nfunction toggleNetwork(network: number) {\n  if (chosenNetworks.value.has(network)) {\n    chosenNetworks.value.delete(network);\n    return;\n  }\n  chosenNetworks.value.add(network);\n}\n</script>\n\n<template>\n  <BalModal :show=\"isVisible\" @close=\"closeModal\">\n    <Transition name=\"fade\" mode=\"out-in\">\n      <component\n        :is=\"syncTabs[tabActiveIdx]\"\n        v-model:activeTabIdx=\"tabActiveIdx\"\n        :veBalBalance=\"veBalBalance\"\n        style=\"min-height: 470px\"\n        :chosenNetworks=\"chosenNetworks\"\n        @toggle-network=\"toggleNetwork\"\n        @set-successful-synced=\"isSyncedSuccessfull = true\"\n        @close=\"closeModal\"\n      />\n    </Transition>\n  </BalModal>\n</template>\n\n<style scoped>\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.2s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\nimport IconLoaderWrapper from './IconLoaderWrapper.vue';\nimport CrossChainSyncModal from './CrossChainSyncModal.vue';\n\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport useVeBal from '@/composables/useVeBAL';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport {\n  useCrossChainSync,\n  NetworkSyncState,\n} from '@/providers/cross-chain-sync.provider';\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\n\n/**\n * COMPOSABLES\n */\nconst { dynamicDataLoading } = useTokens();\nconst { account, isWalletReady } = useWeb3();\nconst {\n  networksSyncState,\n  networksBySyncState,\n  l2VeBalBalances,\n  isLoading,\n  sync,\n  tempSyncingNetworks,\n  setTempSyncingNetworks,\n  warningMessage,\n  infoMessage,\n  hasError,\n  showingUnsyncedNetworks,\n  syncLayerZeroTxLinks,\n} = useCrossChainSync();\nconst { fNum } = useNumbers();\nconst { veBalBalance } = useVeBal();\n\n/**\n * STATE\n */\nconst isSyncModalOpen = ref(false);\n/**\n * COMPUTED\n */\nconst isVebalBalanceZero = computed(() => {\n  return bnum(veBalBalance.value).isEqualTo(0);\n});\n\n/**\n * METHODS\n */\n\nfunction getLoadingTooltipText(networkId: Network) {\n  const time = networkId === Network.POLYGON ? 30 : 5;\n\n  return `Syncing on ${configs[networkId].chainName} usually takes around ${time} mins. \n  Wait until it completes before restaking or triggering a gauge update on your\n  ${configs[networkId].chainName} pools to get your maximum veBAL boost.`;\n}\n\nfunction checkIfNetworkSyncing(network: Network) {\n  return (\n    networksSyncState.value?.[network] === NetworkSyncState.Syncing ||\n    tempSyncingNetworks.value[account.value]?.networks.includes(network)\n  );\n}\nfunction onCloseModal() {\n  isSyncModalOpen.value = false;\n}\n</script>\n\n<template>\n  <div class=\"py-5 px-4\">\n    <h4 class=\"mb-4 font-bold text-center\">\n      {{ $t('crossChainBoost.title') }}\n      <BalTooltip :text=\"$t('crossChainBoost.infoDescription')\">\n        <template #activator>\n          <BalIcon name=\"info\" size=\"sm\" class=\"text-gray-400\" />\n        </template>\n      </BalTooltip>\n    </h4>\n\n    <BalAlert v-if=\"hasError\" title=\"Error\" type=\"error\" class=\"mb-4\">\n      <div>\n        Error has occured while fetching syncing states of some networks. Please\n        refresh the page.\n      </div>\n    </BalAlert>\n\n    <template v-if=\"!(isLoading || dynamicDataLoading)\">\n      <BalAlert\n        v-if=\"warningMessage\"\n        :title=\"warningMessage.title\"\n        type=\"warning\"\n        class=\"mb-4\"\n      >\n        {{ warningMessage.text }}\n      </BalAlert>\n      <BalAlert\n        v-else-if=\"infoMessage\"\n        :title=\"infoMessage.title\"\n        type=\"tip\"\n        class=\"mb-4\"\n      >\n        {{ infoMessage.text }}\n      </BalAlert>\n\n      <div\n        v-if=\"!isWalletReady || isVebalBalanceZero\"\n        class=\"flex justify-center text-sm text-secondary\"\n      >\n        {{ $t('crossChainBoost.emptyState') }}\n      </div>\n    </template>\n    <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-2 gap-4\">\n      <template v-if=\"isLoading || dynamicDataLoading\">\n        <BalLoadingBlock v-for=\"n in 2\" :key=\"n\" class=\"h-48\" />\n      </template>\n      <template v-else-if=\"isWalletReady && !isVebalBalanceZero\">\n        <BalCard>\n          <div class=\"flex justify-between items-center mb-3 font-bold label\">\n            {{ $t('crossChainBoost.unsyncedNetworks') }}\n          </div>\n          <div class=\"flex mb-3\">\n            <span\n              v-if=\"showingUnsyncedNetworks.length === 0\"\n              class=\"text-sm text-secondary\"\n            >\n              {{ hasError ? '—' : $t('crossChainBoost.syncedAllDescription') }}\n            </span>\n            <div v-else class=\"flex\">\n              <div\n                v-for=\"network in showingUnsyncedNetworks\"\n                :key=\"network\"\n                class=\"mr-2\"\n              >\n                <BalTooltip width=\"44\" textAlign=\"center\">\n                  <template #activator>\n                    <BalLink\n                      :href=\"syncLayerZeroTxLinks[network]\"\n                      :disabled=\"\n                        !checkIfNetworkSyncing(network) ||\n                        !syncLayerZeroTxLinks[network]\n                      \"\n                      external\n                      noStyle\n                      class=\"group flex items-center\"\n                    >\n                      <IconLoaderWrapper\n                        :isLoading=\"checkIfNetworkSyncing(network)\"\n                      >\n                        <img\n                          :src=\"buildNetworkIconURL(network)\"\n                          alt=\"\"\n                          class=\"p-0.5 rounded-full w-[32px]\"\n                        />\n                      </IconLoaderWrapper>\n                    </BalLink>\n                  </template>\n\n                  <div\n                    v-if=\"checkIfNetworkSyncing(network)\"\n                    class=\"flex flex-col\"\n                  >\n                    <span class=\"mb-1\">\n                      {{ getLoadingTooltipText(network) }}\n                    </span>\n\n                    <span\n                      v-if=\"syncLayerZeroTxLinks[network]\"\n                      class=\"font-bold\"\n                    >\n                      Click this icon to view Layerzero transaction\n                    </span>\n                  </div>\n                  <div v-else>\n                    <div class=\"flex mb-2\">\n                      <div class=\"flex justify-center p-1 mr-1 align-center\">\n                        <div class=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                      </div>\n                      <div>\n                        <div class=\"text-sm text-secondary\">Ethereum veBAL</div>\n                        <div class=\"text-lg font-bold\">\n                          {{ Number(veBalBalance).toFixed(4) }}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div class=\"flex\">\n                      <div class=\"flex justify-center p-1 mr-1 align-center\">\n                        <div class=\"w-2 h-2 rounded-full bg-rose-500\"></div>\n                      </div>\n                      <div>\n                        <div class=\"text-sm text-secondary\">\n                          {{ configs[network].chainName }} veBAL\n                        </div>\n                        <div class=\"text-lg font-bold\">\n                          {{ l2VeBalBalances?.[network] }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </BalTooltip>\n              </div>\n            </div>\n          </div>\n\n          <BalBtn\n            v-if=\"networksBySyncState.unsynced.length > 0\"\n            color=\"blue\"\n            size=\"sm\"\n            outline\n            @click=\"isSyncModalOpen = true\"\n          >\n            {{ $t('crossChainBoost.sync') }}\n          </BalBtn>\n        </BalCard>\n\n        <BalCard>\n          <div class=\"flex justify-between items-center mb-3 font-bold label\">\n            {{ $t('crossChainBoost.syncedNetworks') }}\n          </div>\n          <span\n            v-if=\"networksBySyncState.synced.length === 0\"\n            class=\"text-sm text-secondary\"\n          >\n            {{ hasError ? '—' : $t('crossChainBoost.unsyncedAllDescription') }}\n          </span>\n\n          <div v-else class=\"flex\">\n            <div v-for=\"network in networksBySyncState.synced\" :key=\"network\">\n              <IconLoaderWrapper :isLoading=\"false\">\n                <img\n                  :src=\"buildNetworkIconURL(network)\"\n                  alt=\"\"\n                  class=\"mr-2 w-8 h-8 rounded-full\"\n                />\n              </IconLoaderWrapper>\n            </div>\n          </div>\n        </BalCard>\n      </template>\n    </div>\n\n    <CrossChainSyncModal\n      :isVisible=\"isSyncModalOpen\"\n      :networksBySyncState=\"networksBySyncState\"\n      :sync=\"sync\"\n      :setTempSyncingNetworks=\"setTempSyncingNetworks\"\n      :veBalBalance=\"fNum(veBalBalance, FNumFormats.token)\"\n      :l2VeBalBalances=\"l2VeBalBalances\"\n      @close-modal=\"onCloseModal\"\n    />\n  </div>\n</template>\n","export default \"__VITE_ASSET__3c7c83b2__\"","export default \"__VITE_ASSET__5cc493df__\"","export default \"__VITE_ASSET__ffe05ff5__\"","import QUERY_KEYS from '@/constants/queryKeys';\nimport useGraphQuery from './useGraphQuery';\nimport useNetwork from '../useNetwork';\nimport { configService } from '@/services/config/config.service';\n\nconst attrs = {\n  id: true,\n  bias: true,\n  slope: true,\n  timestamp: true,\n};\n\nexport interface LockSnapshot {\n  id: string;\n  bias: string;\n  slope: string;\n  timestamp: number;\n}\n\nexport interface HistoricalLocksQueryResponse {\n  lockSnapshots: LockSnapshot[];\n}\n\nexport function useHistoricalLocksQuery(account: ComputedRef<string>) {\n  const { networkId } = useNetwork();\n\n  const useHistoricalLocksQueryEnabled = computed(() => !!account.value);\n\n  /**\n   * QUERY INPUTS\n   */\n  const queryKey = QUERY_KEYS.Locks.Historical(networkId, account);\n\n  return useGraphQuery<HistoricalLocksQueryResponse>(\n    configService.network.subgraphs.gauge,\n    queryKey,\n    () => ({\n      __name: 'HistoricalLocks',\n      lockSnapshots: {\n        __args: {\n          where: {\n            user_: {\n              id: account.value?.toLowerCase(),\n            },\n          },\n        },\n        ...attrs,\n      },\n    }),\n    reactive({\n      enabled: useHistoricalLocksQueryEnabled,\n      refetchOnWindowFocus: false,\n    })\n  );\n}\n","import QUERY_KEYS from '@/constants/queryKeys';\nimport useGraphQuery from './useGraphQuery';\nimport useNetwork from '../useNetwork';\nimport { FETCH_ONCE_OPTIONS } from '@/constants/vue-query';\n\nconst attrs = {\n  balance: true,\n  rank: true,\n};\n\nexport interface LockRankQueryResponse {\n  veBalGetUser: { balance: string; rank: string };\n}\n\nexport function useLockRankQuery(account: ComputedRef<string>) {\n  const { networkId } = useNetwork();\n\n  /**\n   * QUERY INPUTS\n   */\n  const queryKey = QUERY_KEYS.Locks.UserRank(networkId, account);\n\n  return useGraphQuery<LockRankQueryResponse>(\n    'https://test-api-v3.balancer.fi/',\n    queryKey,\n    () => ({\n      veBalGetUser: {\n        ...attrs,\n      },\n    }),\n    reactive({\n      enabled: computed(() => !!account.value),\n      ...FETCH_ONCE_OPTIONS,\n    }),\n    false,\n    { accountAddress: account.value }\n  );\n}\n","<script lang=\"ts\" setup>\n/**\n * TYPES\n */\ntype Props = {\n  noFade?: boolean;\n  width?: string;\n  height?: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  noFade: false,\n  width: 'auto',\n  height: 'auto',\n});\n\n/**\n * STATE\n */\nconst loaded = ref(props.noFade);\n\n/**\n * COMPUTED\n */\nconst wrapperStyles = computed(() => ({\n  width: props.width,\n  height: props.height,\n}));\n\n/**\n * METHODS\n */\nfunction onLoaded() {\n  loaded.value = true;\n}\n</script>\n\n<template>\n  <div class=\"bal-image-wrapper\" :style=\"wrapperStyles\">\n    <Transition name=\"bal-image-fade\">\n      <img\n        v-show=\"loaded\"\n        :width=\"props.width\"\n        :height=\"props.height\"\n        v-bind=\"$attrs\"\n        @load=\"onLoaded\"\n      />\n    </Transition>\n  </div>\n</template>\n\n<style scoped>\n/* Image fade animation */\n.bal-image-fade-enter-active,\n.bal-image-fade-leave-active {\n  transition: all 0.5s ease-in-out 0.1s;\n  transform: scale(1) translateY(0);\n}\n\n.bal-image-fade-enter-from,\n.bal-image-fade-leave-to {\n  opacity: 0;\n  transform: scale(0.97) translateY(10px);\n}\n</style>\n","export default \"__VITE_ASSET__e57e2511__\"","export default \"__VITE_ASSET__8e0a1859__\"","export default \"__VITE_ASSET__946d7730__\"","<script setup lang=\"ts\">\nimport coin1 from '@/assets/images/coins/coins-1.png';\nimport coin2 from '@/assets/images/coins/coins-2.png';\nimport coin3 from '@/assets/images/coins/coins-3.png';\nimport { useI18n } from 'vue-i18n';\nimport { useRouter } from 'vue-router';\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst router = useRouter();\n\n/**\n * COMPUTED\n */\nconst benefits = computed(() => [\n  t('veBAL.hero.benefits.boost'),\n  t('veBAL.hero.benefits.vote'),\n  t('veBAL.hero.benefits.earn'),\n]);\n\n/**\n * METHODS\n */\nfunction navigateToGetVeBAL() {\n  router.push({\n    name: 'get-vebal',\n    query: {\n      returnRoute: 'vebal',\n    },\n  });\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col md:flex-row\">\n    <div class=\"py-8 lg:py-4 px-4 lg:px-8 2xl:px-0 xl:pt-0 max-w-md hero-text\">\n      <p class=\"font-medium eyebrow\">veBAL</p>\n      <h1 class=\"mb-5 text-white title\">\n        {{ $t('veBAL.hero.title') }}\n      </h1>\n      <ul>\n        <li\n          v-for=\"(benefit, i) in benefits\"\n          :key=\"i\"\n          class=\"flex items-center mb-2 text-white\"\n        >\n          – {{ benefit }}\n        </li>\n      </ul>\n      <div class=\"flex mt-6\">\n        <BalBtn class=\"mr-3 hero-btn btn-gold\" @click=\"navigateToGetVeBAL\">\n          {{ $t('veBAL.hero.buttons.getVeBAL') }}\n        </BalBtn>\n        <BalBtn\n          tag=\"a\"\n          href=\"https://docs.balancer.fi/concepts/governance/veBAL/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          color=\"white\"\n          class=\"hero-btn\"\n          outline\n        >\n          {{ $t('veBAL.hero.buttons.learnMore') }}\n          <BalIcon\n            name=\"arrow-up-right\"\n            size=\"sm\"\n            class=\"ml-px group-hover:text-pink-500 transition-colors\"\n          />\n        </BalBtn>\n      </div>\n    </div>\n    <div class=\"coins\">\n      <div class=\"group coin\">\n        <div class=\"w-full coin-wrapper\">\n          <BalImage\n            class=\"graphic\"\n            width=\"330\"\n            height=\"377\"\n            :src=\"coin1\"\n            alt=\"BAL and WETH tokens\"\n          />\n        </div>\n        <div class=\"font-semibold caption\">\n          <p\n            class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\n          >\n            {{ $t('veBAL.hero.tokens.balWETH') }}\n          </p>\n          <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1 font-medium\">\n            {{ $t('veBAL.hero.tokenInfo.balWETH') }}\n          </BalTooltip>\n        </div>\n      </div>\n      <div class=\"group coin\">\n        <div class=\"coin-wrapper\">\n          <BalImage\n            class=\"graphic\"\n            width=\"330\"\n            height=\"377\"\n            :src=\"coin2\"\n            alt=\"B-80BAL-20WETH LP token\"\n          />\n        </div>\n        <div class=\"font-semibold caption\">\n          <p\n            class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\n          >\n            {{ $t('veBAL.hero.tokens.lpToken') }}\n          </p>\n          <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1\">\n            {{ $t('veBAL.hero.tokenInfo.lpToken') }}\n          </BalTooltip>\n        </div>\n      </div>\n      <div class=\"group coin\">\n        <div class=\"coin-wrapper\">\n          <BalImage\n            class=\"graphic\"\n            width=\"330\"\n            height=\"377\"\n            :src=\"coin3\"\n            alt=\"veBAL token\"\n          />\n        </div>\n        <div class=\"font-semibold caption\">\n          <p\n            class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\n          >\n            {{ $t('veBAL.hero.tokens.veBAL') }}\n          </p>\n          <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1\">\n            {{ $t('veBAL.hero.tokenInfo.veBAL') }}\n          </BalTooltip>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.eyebrow {\n  @apply mb-4;\n\n  color: #ccb373;\n  background: linear-gradient(#ccb373, #977622);\n  background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n.hero-text {\n  @apply opacity-0;\n\n  animation: fadeIn 1s ease-out 0.1s both;\n}\n\n.title {\n  @apply max-w-sm;\n}\n\n.hero-btn {\n  min-width: 140px;\n}\n\n.btn-gold {\n  background: linear-gradient(45deg, #977622, #ccb373);\n  transition: 0.5s all ease-in-out;\n}\n\n.btn-gold:hover {\n  background: linear-gradient(-45deg, #ae8d39, #684e09);\n}\n\n.graphic {\n  @apply transition-transform duration-300 relative;\n}\n\n.coin:hover .graphic {\n  transform: translateY(-8px);\n}\n\n.caption {\n  @apply text-sm md:text-base text-gray-400 transition-colors text-center group-hover:text-white;\n\n  animation: fadeInMoveUp 0.5s ease-out 0.15s both;\n}\n\n@media (min-width: 768px) {\n  .hero-text {\n    min-width: 400px;\n  }\n}\n\n.caption .bal-icon {\n  animation: fadeInMoveUp 0.5s ease-out 0.15s both;\n}\n\n.coins {\n  @apply flex lg:gap-8 px-1 lg:px-0;\n\n  flex-grow: 1;\n}\n\n.coin-wrapper {\n  aspect-ratio: 7 / 8;\n}\n\n.coin {\n  @apply w-full flex flex-col items-center justify-end relative;\n}\n</style>","<script setup lang=\"ts\">\nimport { useLock } from '@/composables/useLock';\nimport { bnum } from '@/lib/utils';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { differenceInDays, format } from 'date-fns';\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\nimport rank from '@/assets/images/icons/rank.svg';\nimport share from '@/assets/images/icons/share.svg';\nimport hourglass from '@/assets/images/icons/hourglass.svg';\nimport { useRouter } from 'vue-router';\nimport * as echarts from 'echarts/core';\nimport useVeBal from '@/composables/useVeBAL';\nimport { useI18n } from 'vue-i18n';\nimport {\n  LockSnapshot,\n  useHistoricalLocksQuery,\n} from '@/composables/queries/useHistoricalLocksQuery';\nimport { useLockRankQuery } from '@/composables/queries/useLockRankQuery';\nimport VeBALMarketingHeader from './VeBALMarketingHeader.vue';\nimport BigNumber from 'bignumber.js';\n\ntype ChartValueAcc = (readonly [string, number])[];\n\n/**\n * COMPOSABLES\n */\nconst { account, isWalletReady, isWalletDisconnected } = useWeb3();\n\nconst { isLoadingLockPool, isLoadingLockInfo, lock } = useLock();\nconst { fNum } = useNumbers();\nconst router = useRouter();\n\nconst { veBalBalance, isLoading: isLoadingVebalBalance } = useVeBal();\nconst { t } = useI18n();\nconst { isLoading, data: userHistoricalLocks } =\n  useHistoricalLocksQuery(account);\nconst { isLoading: isLoadingLockBoard, data: userRankData } =\n  useLockRankQuery(account);\n\n/**\n * COMPUTED\n */\nconst showVebalInfo = computed(() => {\n  if (isWalletDisconnected.value) return false;\n\n  const hasVebalBalance = bnum(veBalBalance.value).isGreaterThan(0);\n  const hasHistoricalLocks = userHistoricalLocks.value?.lockSnapshots.length;\n\n  return (\n    (isWalletReady.value && (hasVebalBalance || hasHistoricalLocks)) ||\n    isLoadingData.value\n  );\n});\n\nconst isLoadingData = computed(() => {\n  return (\n    isLoadingLockBoard.value ||\n    isLoading.value ||\n    isLoadingLockInfo.value ||\n    isLoadingLockPool.value ||\n    isLoadingVebalBalance.value\n  );\n});\n\nconst lockedUntil = computed(() => {\n  if (lock.value?.hasExistingLock && !lock.value.isExpired) {\n    return format(lock.value.lockedEndDate, PRETTY_DATE_FORMAT);\n  }\n\n  return '—';\n});\n\n// calculate point 2 values\nfunction calculatePoint2Balance(\n  snapshot: LockSnapshot,\n  slope: BigNumber,\n  now: BigNumber\n) {\n  const point2V = bnum(snapshot.bias).minus(\n    slope.times(now.minus(snapshot.timestamp))\n  );\n  const point2Balance = point2V.isLessThan(0)\n    ? bnum(0).toNumber()\n    : point2V.toNumber();\n  return point2Balance;\n}\n\n// format dates\nfunction formatDate(timestamp: number) {\n  return format(timestamp * 1000, 'yyyy/MM/dd');\n}\n\n// process lock snapshots\nfunction processLockSnapshots(lockSnapshots: LockSnapshot[]) {\n  const currentDate = (Date.now() / 1000).toFixed(0);\n\n  return lockSnapshots.reduce((acc: ChartValueAcc, snapshot, i) => {\n    const slope = bnum(snapshot.slope);\n    const now = lockSnapshots[i + 1]\n      ? bnum(lockSnapshots[i + 1].timestamp)\n      : bnum(currentDate);\n\n    // point 1\n    const point1Balance = bnum(snapshot.bias).toNumber();\n    const point1Date = formatDate(snapshot.timestamp);\n\n    // point 2\n    const point2Balance = calculatePoint2Balance(snapshot, slope, now);\n    const point2Date = formatDate(now.toNumber());\n\n    acc.push(Object.freeze([point1Date, point1Balance]));\n\n    // filter out point 2 if it's the same as point 1\n    if (point1Balance.toFixed(2) !== point2Balance.toFixed(2)) {\n      acc.push(Object.freeze([point2Date, point2Balance]));\n    }\n\n    return acc;\n  }, []);\n}\n\n// group values by dates\nfunction groupValuesByDates(chartValues: ChartValueAcc) {\n  return chartValues.reduce((acc, item) => {\n    const [date, value] = item;\n    if (acc[date]) {\n      acc[date].push(value);\n    } else {\n      acc[date] = [value];\n    }\n    return acc;\n  }, {});\n}\n\n// filter and flatten values\nfunction filterAndFlattenValues(valuesByDates) {\n  return Object.keys(valuesByDates).reduce((acc: ChartValueAcc, item) => {\n    const values = valuesByDates[item];\n\n    let filteredValues =\n      values.length > 2 ? [Math.min(...values), Math.max(...values)] : values;\n\n    filteredValues.forEach((val: number) => {\n      acc.push(Object.freeze([item, val]));\n    });\n    return acc;\n  }, []);\n}\n\nconst chartValues = computed(() => {\n  if (!userHistoricalLocks.value) return [];\n\n  const processedValues = processLockSnapshots(\n    userHistoricalLocks.value.lockSnapshots\n  );\n\n  const valuesByDates = groupValuesByDates(processedValues);\n  const filteredArr = filterAndFlattenValues(valuesByDates);\n\n  return filteredArr;\n});\n\nconst userRank = computed(() => {\n  if (!userRankData.value) return '';\n  return userRankData.value.veBalGetUser.rank;\n});\n\nconst vebalInfo = computed(() => {\n  const arr: { icon: any; value: string }[] = [];\n  const hasVebalBalance = bnum(veBalBalance.value).isGreaterThan(0);\n  if (hasVebalBalance) {\n    arr.push({\n      icon: share,\n      value: t('veBAL.myVeBAL.cards.myVeBAL.secondaryText', [\n        fNum(\n          bnum(veBalBalance.value)\n            .div(lock.value?.totalSupply || 0)\n            .toString(),\n          {\n            style: 'percent',\n            maximumFractionDigits: 4,\n          }\n        ),\n      ]),\n    });\n  }\n\n  if (hasVebalBalance && userRank.value) {\n    arr.unshift({\n      icon: rank,\n      value: `Rank ${userRank.value}`,\n    });\n  }\n\n  if (lock.value?.hasExistingLock && !lock.value.isExpired) {\n    arr.push({\n      icon: hourglass,\n      value: `Expires ${lockedUntil.value} (${differenceInDays(\n        new Date(lockedUntil.value),\n        new Date()\n      )} days)`,\n    });\n  }\n  return arr;\n});\n\nconst futureLockChartData = computed(() => {\n  if (lock.value?.hasExistingLock && !lock.value.isExpired) {\n    return {\n      name: '',\n      values: [\n        chartValues.value[chartValues.value.length - 1],\n        Object.freeze<[string, number]>([\n          format(new Date(lockedUntil.value).getTime(), 'yyyy/MM/dd'),\n          0,\n        ]),\n      ],\n      hoverBorderColor: 'black',\n      hoverColor: 'white',\n    };\n  }\n  return { name: '', values: [] };\n});\n\nconst chartData = computed(() => {\n  return {\n    color: ['#BCA25D', '#BCA25D'],\n    hoverBorderColor: 'black',\n    hoverColor: '#BCA25D',\n    areaStyle: {\n      color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n        {\n          offset: 0,\n          color: 'rgba(14, 165, 233, 0.08)',\n        },\n        {\n          offset: 1,\n          color: 'rgba(68, 9, 236, 0)',\n        },\n      ]),\n    },\n    chartType: 'line',\n    data: [\n      {\n        name: '',\n        values: chartValues.value,\n      },\n      futureLockChartData.value,\n    ],\n    lineStyles: [{}, { type: 'dashed' }],\n    symbolSize: 10,\n  };\n});\n\n/**\n * METHODS\n */\nfunction navigateToGetVeBAL() {\n  router.push({\n    name: 'get-vebal',\n    query: {\n      returnRoute: 'vebal',\n    },\n  });\n}\n</script>\n\n<template>\n  <div class=\"hero-container\">\n    <div class=\"hero-content\">\n      <div\n        v-if=\"showVebalInfo\"\n        class=\"flex flex-col xl:flex-row flex-grow gap-6 justify-between xl:items-center px-10 h-full text-white\"\n      >\n        <BalLoadingBlock v-if=\"isLoadingData\" darker class=\"w-full h-full\" />\n        <div v-else class=\"flex flex-col flex-1\">\n          <div class=\"mb-2 text-xl font-bold\">My veBAL</div>\n          <div class=\"mb-10 text-5xl font-black\">\n            {{ fNum(veBalBalance, FNumFormats.token) }}\n          </div>\n\n          <div class=\"flex flex-col gap-2 mb-8\">\n            <div v-for=\"item in vebalInfo\" :key=\"item.value\" class=\"flex\">\n              <img class=\"mr-2 w-6 h-6\" :src=\"item.icon\" />\n              <span class=\"font-semibold\">{{ item.value }} </span>\n            </div>\n          </div>\n\n          <div>\n            <BalBtn class=\"mr-3 btn-gold\" @click=\"navigateToGetVeBAL\">\n              {{ $t('veBAL.hero.buttons.getVeBAL') }}\n            </BalBtn>\n\n            <BalBtn\n              color=\"transparent\"\n              class=\"mr-3 btn-extend\"\n              @click=\"navigateToGetVeBAL\"\n            >\n              Extend lock\n            </BalBtn>\n          </div>\n        </div>\n        <BalLoadingBlock v-if=\"isLoadingData\" darker class=\"w-full h-full\" />\n\n        <div\n          v-else-if=\"chartData.data[0].values.length > 0\"\n          class=\"p-5 w-full rounded-2xl flex-[1.5] chart-wrapper\"\n        >\n          <BalChart\n            :isLoading=\"isLoadingData\"\n            height=\"96\"\n            :data=\"chartData.data\"\n            :axisLabelFormatter=\"{\n              yAxis: {\n                maximumFractionDigits: 2,\n                fixedFormat: false,\n                abbreviate: false,\n              },\n            }\"\n            :areaStyle=\"chartData.areaStyle\"\n            :color=\"chartData.color\"\n            :hoverColor=\"chartData.hoverColor\"\n            :hoverBorderColor=\"chartData.hoverBorderColor\"\n            :xAxisMinInterval=\"3600 * 1000 * 24 * 30\"\n            :showLegend=\"false\"\n            :chartType=\"chartData.chartType\"\n            showTooltipLayer\n            :lineStyles=\"chartData.lineStyles\"\n            :symbolSize=\"chartData.symbolSize\"\n            :customGrid=\"{\n              left: '2.5%',\n              right: '2.5%',\n              top: '10%',\n              bottom: '5%',\n              containLabel: true,\n            }\"\n            reverseParams\n            paramsLabel=\"veBAL\"\n            showTooltip\n          />\n        </div>\n        <BalBlankSlate v-else class=\"w-full h-96 flex-[1.5]\" align=\"center\">\n          <BalIcon name=\"bar-chart\" />\n          {{ $t('insufficientData') }}\n        </BalBlankSlate>\n      </div>\n\n      <VeBALMarketingHeader v-else />\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.btn-gold {\n  background: linear-gradient(45deg, #977622, #ccb373);\n  transition: 0.5s all ease-in-out;\n}\n\n.btn-gold:hover {\n  background: linear-gradient(-45deg, #ae8d39, #684e09);\n}\n\n.btn-extend {\n  color: rgb(188 162 93 / 100%);\n  border: 1px solid rgb(188 162 93 / 100%);\n}\n\n.chart-wrapper {\n  background-color: rgb(0 0 0 / 80%);\n  backdrop-filter: drop-shadow(40px 40px 80px rgb(0 0 0 / 50%));\n}\n\n.hero-container {\n  @apply flex content-center relative w-full;\n\n  min-height: 440px;\n  z-index: 0;\n  background-color: #0b0f19;\n}\n\n.dark .hero-container {\n  background-color: #0e1420;\n}\n\n.hero-container::before {\n  content: ' ';\n  background-image: url('/images/patterns/fish-scale.png');\n  background-repeat: repeat;\n\n  @apply block absolute left-0 top-0 w-full h-full opacity-10 z-0;\n}\n\n.dark .hero-container::before {\n  opacity: 0.07;\n}\n\n.hero-container::after {\n  content: ' ';\n  background: linear-gradient(45deg, rgb(0 0 0 / 100%), rgb(0 0 0 / 50%)),\n    url('/images/backgrounds/vebal-hero-noise.svg');\n\n  @apply block absolute left-0 top-0 w-full h-full bg-no-repeat bg-cover opacity-20 z-0;\n\n  min-height: 440px;\n}\n\n.hero-content {\n  @apply flex flex-col md:flex-row md:items-center max-w-screen-2xl mx-auto md:gap-4 lg:gap-8 py-4 md:py-8\n    xl:pl-4 w-full z-10;\n}\n</style>\n","<script setup lang=\"ts\">\n/**\n * veBAL page\n */\nimport LMVoting from '@/components/contextual/pages/vebal/LMVoting/LMVoting.vue';\nimport MyVeBAL from '@/components/contextual/pages/vebal/MyVeBAL/MyVeBAL.vue';\nimport CrossChainBoostCards from '@/components/contextual/pages/vebal/cross-chain-boost/CrossChainBoostCards.vue';\nimport { isVeBalSupported } from '@/composables/useVeBAL';\n\nimport { provideUserStaking } from '@/providers/local/user-staking.provider';\nimport { providerUserPools } from '@/providers/local/user-pools.provider';\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\nimport MyVebalInfo from '@/components/contextual/pages/vebal/MyVebalInfo.vue';\nimport { provideVoting } from '@/components/contextual/pages/vebal/providers/voting.provider';\n\nconst userStaking = provideUserStaking();\nproviderUserPools(userStaking);\nprovidePoolStaking();\nprovideVoting();\n</script>\n\n<template>\n  <div>\n    <MyVebalInfo v-if=\"isVeBalSupported\" v-once />\n\n    <div\n      class=\"xl:container py-16 xl:py-20 lg:mx-auto bg-gray-50 dark:bg-gray-850/50\"\n    >\n      <div v-if=\"isVeBalSupported\" class=\"lg:mx-auto max-w-5xl\">\n        <div class=\"px-4 mb-8\">\n          <MyVeBAL />\n        </div>\n        <div>\n          <CrossChainBoostCards />\n        </div>\n      </div>\n    </div>\n    <div\n      v-if=\"isVeBalSupported\"\n      class=\"xl:container lg:px-4 xl:px-0 pt-16 xl:pt-20 xl:mx-auto\"\n    >\n      <div class=\"xl:px-0 mb-16\">\n        <LMVoting />\n      </div>\n    </div>\n    <div v-else class=\"text-center\">\n      <div class=\"text-lg font-semibold\">\n        {{ $t('veBAL.notSupported.title') }}\n      </div>\n      <div>{{ $t('veBAL.notSupported.description') }}</div>\n    </div>\n  </div>\n</template>\n"],"names":["useVotingEscrowLocks","account","useWeb3","networkConfig","useConfig","veBalLockInfoQuery","useVeBalLockInfoQuery","allVotingPools","votingGaugeAddresses","useVotingPools","veBalBalance","useVeBal","votingEscrowLocksQueryEnabled","computed","votingEscrowLocksQuery","useGraphQuery","subgraphs","QUERY_KEYS","_a","configs","networkId","reactive","votingEscrowLocks","expiredGauges","useExpiredGaugesQuery","poolsUsingUnderUtilizedVotingPower","pool","bnum","lastReceivedVebal","isVotingTimeLocked","shouldResubmitVotes","_b","isSameAddress","item","MINIMUM_LOCK_TIME","useVeBalLockInfo","isLoading","veBalLockInfo","veBalExpired","hasLock","hasExpiredLock","veBalLockTooShort","_c","emit","__emit","props","__props","networkFiltersArr","ref","isExpiredFilterActive","activeNetworksArr","activeFiltersNum","handleExpInput","e","checked","updateNetwork","network","index","arr","shouldRender","nextTick","theme","useTailwind","darkMode","useDarkMode","color","fNum","useNumbers","votesThisPeriod","formatVotesAsPercent","votesNextPeriod","voteDifference","voteDifferenceText","text","voteTextClass","votes","normalizedVotes","scale","t","useI18n","myVotes","BigNumber","poolHasUnderUtilizedVotingPower","sizeClass","_hoisted_1","router","useRouter","upToLargeBreakpoint","useBreakpoints","isWalletReady","getIsGaugeExpired","toggleSelection","isSelected","useVoting","columns","isInternalUrl","url","redirectToPool","inNewTab","redirectUrl","poolURLFor","route","getNetworkSlug","getPoolExternalUrl","poolUrl","getHasUserVotes","userVotes","getTableRowClass","getSelectedTokens","tokens","token","getPickedTokens","useDebouncedRef","value","delay","timeout","customRef","track","trigger","newValue","useLMVotingFilters","votingPools","showExpiredGauges","tokenFilter","activeNetworkFilters","getDefaultActiveNetworkFilter","poolsFilteredByExpiring","isGaugeExpired","param","networkToFilter","Network","filteredVotingPools","showByNetwork","networkFilters","details","config","unallocatedVotes","votingPeriodEnd","votingPeriodLastHour","isRefetchingVotingPools","resetVotingPools","networkSlug","useNetwork","isMismatchedNetwork","hasVeBalBalance","noVeBalBalance","isLoadingVotingPools","unlockedSelectedPools","hasSubmittedVotes","hasAllVotingPowerTimeLocked","loadRequestWithExistingVotes","isVotingRequestLoaded","unallocatedVotesFormatted","bpsToPercentage","selectVotesDisabled","votingDisabled","intersectionSentinel","renderedRowsIdx","observer","addIntersectionObserver","options","callback","entries","entry","onMounted","onBeforeUnmount","watch","isVotingCompleted","_","prevAccount","lock","unlock","showUnlockPreviewModal","balanceFor","useTokens","lockablePoolId","poolShares","bptBalance","fiatTotal","totalExpiredLpTokens","fiatTotalExpiredLpTokens","cards","FNumFormats","isLoadingLockPool","isLoadingLockInfo","lockPool","lockPoolToken","totalLockedValue","useLock","networksBySyncState","l2VeBalBalances","tempSyncingNetworks","useCrossChainSync","toggleNetwork","syncNetworks","addTransaction","useTransactions","txListener","useEthers","sync","setTempSyncingNetworks","setSyncTxHashes","currentActionIndex","handleTransaction","tx","handleAction","error","handleSuccess","networkSyncSteps","actions","_imports_0","syncLayerZeroTxLinks","chosenNetworks","syncTabs","SyncSelectNetwork","SyncNetworkAction","SyncFinalState","tabActiveIdx","isSyncedSuccessfull","closeModal","dynamicDataLoading","networksSyncState","warningMessage","infoMessage","hasError","showingUnsyncedNetworks","isSyncModalOpen","isVebalBalanceZero","getLoadingTooltipText","time","checkIfNetworkSyncing","NetworkSyncState","onCloseModal","rank","share","hourglass","attrs","useHistoricalLocksQuery","useHistoricalLocksQueryEnabled","queryKey","configService","useLockRankQuery","FETCH_ONCE_OPTIONS","loaded","wrapperStyles","onLoaded","coin1","coin2","coin3","benefits","navigateToGetVeBAL","isWalletDisconnected","isLoadingVebalBalance","userHistoricalLocks","isLoadingLockBoard","userRankData","showVebalInfo","hasVebalBalance","hasHistoricalLocks","isLoadingData","lockedUntil","format","PRETTY_DATE_FORMAT","calculatePoint2Balance","snapshot","slope","now","point2V","formatDate","timestamp","processLockSnapshots","lockSnapshots","currentDate","acc","i","point1Balance","point1Date","point2Balance","point2Date","groupValuesByDates","chartValues2","date","filterAndFlattenValues","valuesByDates","values","val","chartValues","processedValues","userRank","vebalInfo","differenceInDays","futureLockChartData","chartData","echarts.graphic.LinearGradient","userStaking","provideUserStaking","providerUserPools","providePoolStaking","provideVoting"],"mappings":"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"}