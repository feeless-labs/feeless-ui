{"version":3,"file":"usePoolQuery-da6fa219.js","sources":["../../src/services/pool/pool.repository.ts","../../src/composables/queries/usePoolQuery.ts"],"sourcesContent":["import { ComputedRef } from 'vue';\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\nimport { PoolDecorator } from '@/services/pool/decorators/pool.decorator';\nimport {\n  GraphQLArgs,\n  PoolRepository as SDKPoolRepository,\n} from '@feeless/sdk';\nimport { balancerAPIService } from '@/services/balancer/api/balancer-api.service';\nimport { Pool } from '@/services/pool/types';\nimport { TokenInfoMap } from '@/types/TokenList';\nimport { isBalancerApiDefined } from '@/lib/utils/balancer/api';\nimport {\n  getPoolsFallbackRepository,\n  PoolsFallBackFactoryConstructor,\n} from '@/dependencies/PoolsFallbackRepository';\n\nexport default class PoolRepository {\n  repository: PoolsFallBackFactoryConstructor;\n  queryArgs: GraphQLArgs;\n\n  constructor(private tokens: ComputedRef<TokenInfoMap>) {\n    const PoolsFallbackRepository = getPoolsFallbackRepository();\n    this.repository = new PoolsFallbackRepository(this.buildRepositories(), {\n      timeout: 30 * 1000,\n    });\n    this.queryArgs = {};\n  }\n\n  public async fetch(queryArgs: GraphQLArgs): Promise<Pool> {\n    this.queryArgs = queryArgs;\n    const [pool] = await this.repository.fetch();\n    return pool as Pool;\n  }\n\n  private initializeDecoratedAPIRepository() {\n    return {\n      fetch: async (): Promise<Pool[]> => {\n        const pool = await balancerAPIService.pool.get(this.queryArgs);\n        if (!pool) throw new Error('Cannot find pool via Balancer API');\n\n        return [pool];\n      },\n      get skip(): number {\n        return 0;\n      },\n    };\n  }\n\n  private initializeDecoratedSubgraphRepository() {\n    return {\n      fetch: async (): Promise<Pool[]> => {\n        const pools = await balancerSubgraphService.pools.get(this.queryArgs);\n\n        const poolDecorator = new PoolDecorator(pools);\n        const decoratedPools = await poolDecorator.decorate(\n          this.tokens.value,\n          true\n        );\n\n        return decoratedPools;\n      },\n      get skip(): number {\n        return 0;\n      },\n    };\n  }\n\n  private buildRepositories() {\n    const repositories: SDKPoolRepository[] = [];\n    if (isBalancerApiDefined) {\n      const balancerApiRepository = this.initializeDecoratedAPIRepository();\n      repositories.push(balancerApiRepository);\n    }\n    const subgraphRepository = this.initializeDecoratedSubgraphRepository();\n    repositories.push(subgraphRepository);\n\n    return repositories;\n  }\n}\n","import { QueryObserverOptions, useQuery } from '@tanstack/vue-query';\nimport { computed, reactive, Ref, ref } from 'vue';\n\nimport { GraphQLArgs } from '@feeless/sdk';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { useTokens } from '@/providers/tokens.provider';\n\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\nimport { Pool } from '@/services/pool/types';\n\nimport { tokensListExclBpt, tokenTreeLeafs } from '../usePoolHelpers';\n\nimport { POOLS } from '@/constants/pools';\nimport { configService } from '@/services/config/config.service';\nimport { PoolDecorator } from '@/services/pool/decorators/pool.decorator';\nimport PoolRepository from '@/services/pool/pool.repository';\n\ntype QueryOptions = QueryObserverOptions<Pool>;\n\nexport default function usePoolQuery(\n  id: string,\n  isEnabled: Ref<boolean> = ref(true),\n  options: QueryOptions = {}\n) {\n  /**\n   * If pool is already downloaded, we can use it instantly\n   * it may be if user came to pool page from home page\n   */\n  const poolInfo = poolsStoreService.findPool(id);\n\n  /**\n   * COMPOSABLES\n   */\n  const { injectTokens, tokens } = useTokens();\n\n  const poolRepository = new PoolRepository(tokens);\n\n  /**\n   * COMPUTED\n   */\n  const enabled = computed(() => isEnabled.value);\n\n  /**\n   * METHODS\n   */\n\n  function getQueryArgs(): GraphQLArgs {\n    const queryArgs: GraphQLArgs = {\n      chainId: configService.network.chainId,\n      where: {\n        id: { eq: id?.toLowerCase() },\n        totalShares: { gt: -1 }, // Avoid the filtering for low liquidity pools\n        poolType: { in: POOLS.IncludedPoolTypes },\n      },\n    };\n    return queryArgs;\n  }\n\n  /**\n   * QUERY INPUTS\n   */\n  const queryKey = QUERY_KEYS.Pools.Current(id);\n\n  const queryFn = async () => {\n    let pool: Pool;\n    if (poolInfo) {\n      pool = poolInfo;\n    } else {\n      pool = await poolRepository.fetch(getQueryArgs());\n    }\n\n    if (!pool) throw new Error('Pool does not exist');\n\n    // If the pool is cached from homepage it may not have onchain set, so update it\n    if (!pool.onchain) {\n      const poolDecorator = new PoolDecorator([pool]);\n      [pool] = await poolDecorator.decorate(tokens.value, false);\n    }\n\n    // Inject pool tokens into token registry\n    injectTokens([\n      ...tokensListExclBpt(pool),\n      ...tokenTreeLeafs(pool.tokens),\n      pool.address, // We need to inject pool addresses so we can fetch a user's balance for that pool.\n    ]);\n\n    return pool;\n  };\n\n  const queryOptions = reactive({\n    enabled,\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n    ...options,\n  });\n\n  return useQuery<Pool>(queryKey, queryFn, queryOptions as QueryOptions);\n}\n"],"names":["PoolRepository","tokens","__publicField","PoolsFallbackRepository","getPoolsFallbackRepository","queryArgs","pool","balancerAPIService","pools","balancerSubgraphService","PoolDecorator","repositories","isBalancerApiDefined","balancerApiRepository","subgraphRepository","usePoolQuery","id","isEnabled","ref","options","poolInfo","poolsStoreService","injectTokens","useTokens","poolRepository","enabled","computed","getQueryArgs","configService","POOLS","queryKey","QUERY_KEYS","queryFn","tokensListExclBpt","tokenTreeLeafs","queryOptions","reactive","useQuery"],"mappings":"kUAgBA,MAAqBA,CAAe,CAIlC,YAAoBC,EAAmC,CAHvDC,EAAA,mBACAA,EAAA,kBAEoB,KAAA,OAAAD,EAClB,MAAME,EAA0BC,IAChC,KAAK,WAAa,IAAID,EAAwB,KAAK,oBAAqB,CACtE,QAAS,GAAK,GAAA,CACf,EACD,KAAK,UAAY,EACnB,CAEA,MAAa,MAAME,EAAuC,CACxD,KAAK,UAAYA,EACjB,KAAM,CAACC,CAAI,EAAI,MAAM,KAAK,WAAW,MAAM,EACpC,OAAAA,CACT,CAEQ,kCAAmC,CAClC,MAAA,CACL,MAAO,SAA6B,CAClC,MAAMA,EAAO,MAAMC,EAAmB,KAAK,IAAI,KAAK,SAAS,EAC7D,GAAI,CAACD,EAAY,MAAA,IAAI,MAAM,mCAAmC,EAE9D,MAAO,CAACA,CAAI,CACd,EACA,IAAI,MAAe,CACV,MAAA,EACT,CAAA,CAEJ,CAEQ,uCAAwC,CACvC,MAAA,CACL,MAAO,SAA6B,CAClC,MAAME,EAAQ,MAAMC,EAAwB,MAAM,IAAI,KAAK,SAAS,EAQ7D,OALgB,MADD,IAAIC,EAAcF,CAAK,EACF,SACzC,KAAK,OAAO,MACZ,EAAA,CAIJ,EACA,IAAI,MAAe,CACV,MAAA,EACT,CAAA,CAEJ,CAEQ,mBAAoB,CAC1B,MAAMG,EAAoC,CAAA,EAC1C,GAAIC,EAAsB,CAClB,MAAAC,EAAwB,KAAK,mCACnCF,EAAa,KAAKE,CAAqB,CACzC,CACM,MAAAC,EAAqB,KAAK,wCAChC,OAAAH,EAAa,KAAKG,CAAkB,EAE7BH,CACT,CACF,CC1DwB,SAAAI,EACtBC,EACAC,EAA0BC,EAAI,EAAI,EAClCC,EAAwB,GACxB,CAKM,MAAAC,EAAWC,EAAkB,SAASL,CAAE,EAKxC,CAAE,aAAAM,EAAc,OAAArB,CAAO,EAAIsB,EAAU,EAErCC,EAAiB,IAAIxB,EAAeC,CAAM,EAK1CwB,EAAUC,EAAS,IAAMT,EAAU,KAAK,EAM9C,SAASU,GAA4B,CAS5B,MARwB,CAC7B,QAASC,EAAc,QAAQ,QAC/B,MAAO,CACL,GAAI,CAAE,GAAIZ,GAAA,YAAAA,EAAI,aAAc,EAC5B,YAAa,CAAE,GAAI,EAAG,EACtB,SAAU,CAAE,GAAIa,EAAM,iBAAkB,CAC1C,CAAA,CAGJ,CAKA,MAAMC,EAAWC,EAAW,MAAM,QAAQf,CAAE,EAEtCgB,EAAU,SAAY,CACtB,IAAA1B,EAOJ,GANIc,EACKd,EAAAc,EAEPd,EAAO,MAAMkB,EAAe,MAAMG,EAAc,CAAA,EAG9C,CAACrB,EAAY,MAAA,IAAI,MAAM,qBAAqB,EAG5C,OAACA,EAAK,UAER,CAACA,CAAI,EAAI,MADa,IAAII,EAAc,CAACJ,CAAI,CAAC,EACjB,SAASL,EAAO,MAAO,EAAK,GAI9CqB,EAAA,CACX,GAAGW,EAAkB3B,CAAI,EACzB,GAAG4B,EAAe5B,EAAK,MAAM,EAC7BA,EAAK,OAAA,CACN,EAEMA,CAAA,EAGH6B,EAAeC,EAAS,CAC5B,QAAAX,EACA,iBAAkB,GAClB,qBAAsB,GACtB,GAAGN,CAAA,CACJ,EAEM,OAAAkB,EAAeP,EAAUE,EAASG,CAA4B,CACvE"}