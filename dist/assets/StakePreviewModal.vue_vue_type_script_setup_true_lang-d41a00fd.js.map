{"version":3,"file":"StakePreviewModal.vue_vue_type_script_setup_true_lang-d41a00fd.js","sources":["../../src/components/contextual/pages/pool/staking/StakeSummary.vue","../../src/components/contextual/pages/pool/staking/composables/useStakePreview.ts","../../src/components/contextual/pages/pool/staking/StakePreview.vue","../../src/components/contextual/pages/pool/staking/StakePreviewModal.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { StakeAction } from './composables/useStakePreview';\n\n/**\n * PROPS\n */\ntype Props = {\n  action: StakeAction;\n  fiatValue: string;\n  sharePercentage: string;\n};\n\ndefineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\n</script>\n\n<template>\n  <BalDataList :title=\"$t('summary')\">\n    <BalDataListRow>\n      <template #label>\n        {{ $t('totalValueTo') }}\n        &nbsp;\n        <span class=\"lowercase\">\n          {{ action === 'stake' ? $t('stake') : $t('unstake') }}:\n        </span>\n      </template>\n      <template #value>\n        <span class=\"capitalize\">\n          {{ fNum(fiatValue, FNumFormats.fiat) }}\n        </span>\n        <BalTooltip\n          :text=\"\n            action === 'stake'\n              ? $t('staking.stakeValueTooltip')\n              : $t('staking.unstakeValueTooltip')\n          \"\n          width=\"40\"\n          textAlign=\"center\"\n          class=\"ml-2\"\n        />\n      </template>\n    </BalDataListRow>\n    <BalDataListRow :label=\"$t('staking.newTotalShare')\">\n      <template #value>\n        <span class=\"capitalize\">\n          {{ fNum(sharePercentage, FNumFormats.percent) }}\n        </span>\n        <BalTooltip\n          :text=\"$t('staking.totalShareTooltip')\"\n          width=\"40\"\n          textAlign=\"center\"\n          class=\"ml-2\"\n        />\n      </template>\n    </BalDataListRow>\n  </BalDataList>\n</template>\n","import { ApprovalAction } from '@/composables/approvals/types';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { fiatValueOf } from '@/composables/usePoolHelpers';\nimport useTransactions from '@/composables/useTransactions';\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum, trackLoading } from '@/lib/utils';\nimport { AnyPool } from '@/services/pool/types';\nimport { TransactionActionInfo } from '@/types/transactions';\nimport {\n  TransactionReceipt,\n  TransactionResponse,\n} from '@ethersproject/abstract-provider';\nimport { getAddress } from '@ethersproject/address';\nimport { useI18n } from 'vue-i18n';\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\n\n/**\n * TYPES\n */\nexport type StakeAction = 'stake' | 'unstake' | 'restake';\nexport type StakePreviewProps = {\n  pool: AnyPool;\n  action: StakeAction;\n};\n\nexport function useStakePreview(props: StakePreviewProps, emit) {\n  /**\n   * STATE\n   */\n  const isLoadingApprovalsForGauge = ref(false);\n  const isActionConfirmed = ref(false);\n  const isActionConfirming = ref(false);\n  const confirmationReceipt = ref<TransactionReceipt>();\n  const stakeActions = ref<TransactionActionInfo[]>([]);\n\n  /**\n   * COMPOSABLES\n   */\n  const { balanceFor, refetchBalances } = useTokens();\n  const { fNum } = useNumbers();\n  const { t } = useI18n();\n  const { addTransaction } = useTransactions();\n  const { getTokenApprovalActions } = useTokenApprovalActions();\n  const {\n    isLoading: isPoolStakingLoading,\n    stake,\n    unstake,\n    stakedShares,\n    refetchAllPoolStakingData,\n    preferentialGaugeAddress,\n  } = usePoolStaking();\n\n  // Staked or unstaked shares depending on action type.\n  const currentShares =\n    props.action === 'stake'\n      ? balanceFor(getAddress(props.pool.address))\n      : stakedShares.value;\n\n  const stakeAction = {\n    label: t('stake'),\n    loadingLabel: t('staking.staking'),\n    confirmingLabel: t('confirming'),\n    action: () => txWithNotification(stake, 'stake'),\n    stepTooltip: t('staking.stakeTooltip'),\n  };\n\n  const unstakeAction = {\n    label: t('unstake'),\n    loadingLabel: t('staking.unstaking'),\n    confirmingLabel: t('confirming'),\n    action: () => txWithNotification(unstake, 'unstake'),\n    stepTooltip:\n      props.action === 'restake'\n        ? t('staking.restakeTooltip')\n        : t('staking.unstakeTooltip'),\n  };\n\n  /**\n   * COMPUTED\n   */\n  const isStakeAndZero = computed(\n    () =>\n      props.action === 'stake' &&\n      (currentShares === '0' || currentShares === '')\n  );\n\n  const totalUserPoolSharePct = ref(\n    bnum(\n      bnum(stakedShares.value).plus(balanceFor(getAddress(props.pool.address)))\n    )\n      .div(props.pool.totalShares)\n      .toString()\n  );\n\n  const amountsToApprove = computed(() => [\n    {\n      address: props.pool.address,\n      amount: currentShares,\n    },\n  ]);\n\n  const isLoading = computed(\n    () => isLoadingApprovalsForGauge.value || isPoolStakingLoading.value\n  );\n\n  /**\n   * METHODS\n   */\n  async function txWithNotification(\n    action: () => Promise<TransactionResponse>,\n    actionType: StakeAction\n  ) {\n    try {\n      const tx = await action();\n      isActionConfirming.value = true;\n      addTransaction({\n        id: tx.hash,\n        type: 'tx',\n        action: actionType,\n        summary: t(`transactionSummary.${actionType}`, {\n          pool: props.pool.symbol,\n          amount: fNum(\n            fiatValueOf(props.pool, currentShares),\n            FNumFormats.fiat\n          ),\n        }),\n        details: {\n          total: fNum(fiatValueOf(props.pool, currentShares), FNumFormats.fiat),\n          pool: props.pool,\n        },\n      });\n      return tx;\n    } catch (error) {\n      isActionConfirming.value = false;\n      throw new Error(`Failed create ${actionType} transaction`, {\n        cause: error,\n      });\n    }\n  }\n\n  async function loadApprovalsForGauge() {\n    const approvalActions = await trackLoading(async () => {\n      if (!preferentialGaugeAddress.value) return;\n\n      return await getTokenApprovalActions({\n        amountsToApprove: amountsToApprove.value,\n        spender: preferentialGaugeAddress.value,\n        actionType: ApprovalAction.Staking,\n      });\n    }, isLoadingApprovalsForGauge);\n\n    if (approvalActions) stakeActions.value.unshift(...approvalActions);\n  }\n\n  async function handleSuccess(receipt: TransactionReceipt) {\n    isActionConfirmed.value = true;\n    isActionConfirming.value = false;\n    confirmationReceipt.value = receipt;\n    await Promise.all([refetchBalances(), refetchAllPoolStakingData()]);\n    emit('success');\n  }\n\n  function handleClose() {\n    isActionConfirmed.value = false;\n    isActionConfirming.value = false;\n    confirmationReceipt.value = undefined;\n    emit('close');\n  }\n\n  /**\n   * WATCHERS\n   */\n  watch(\n    () => props.action,\n    () => {\n      if (props.action === 'stake') stakeActions.value = [stakeAction];\n      if (props.action === 'unstake') {\n        stakeActions.value = [unstakeAction];\n      }\n      if (props.action === 'restake')\n        stakeActions.value = [unstakeAction, stakeAction];\n    },\n    { immediate: true }\n  );\n\n  watch(preferentialGaugeAddress, async () => {\n    if (props.action === 'unstake') return;\n    await loadApprovalsForGauge();\n  });\n\n  /**\n   * LIFECYCLE\n   */\n  onBeforeMount(async () => {\n    if (props.action !== 'unstake') await loadApprovalsForGauge();\n  });\n\n  return {\n    //state\n    isActionConfirmed,\n    isActionConfirming,\n    confirmationReceipt,\n    isLoading,\n    currentShares,\n    stakeActions,\n    totalUserPoolSharePct,\n    //methods\n    handleSuccess,\n    handleClose,\n    isStakeAndZero,\n  };\n}\n","<script setup lang=\"ts\">\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\nimport useNumbers from '@/composables/useNumbers';\nimport { fiatValueOf, tokensListExclBpt } from '@/composables/usePoolHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { AnyPool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport StakeSummary from './StakeSummary.vue';\nimport { StakeAction, useStakePreview } from './composables/useStakePreview';\nimport FeedbackCard from '@/components/cards/FeedbackCard.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: AnyPool;\n  action: StakeAction;\n};\nconst props = defineProps<Props>();\nconst emit = defineEmits(['close', 'success']);\n\n/**\n * COMPOSABLES\n */\nconst { getToken } = useTokens();\nconst { fNum } = useNumbers();\nconst { isMismatchedNetwork } = useWeb3();\nconst {\n  isActionConfirmed,\n  isActionConfirming,\n  confirmationReceipt,\n  isLoading,\n  currentShares,\n  stakeActions,\n  totalUserPoolSharePct,\n  handleSuccess,\n  handleClose,\n  isStakeAndZero,\n} = useStakePreview(props, emit);\n\n/**\n * COMPUTED\n */\nconst assetRowWidth = computed(\n  () => (tokensListExclBpt(props.pool).length * 32) / 1.5\n);\n</script>\n\n<template>\n  <BalVStack spacing=\"md\">\n    <BalStack horizontal spacing=\"sm\" align=\"center\">\n      <BalCircle\n        v-if=\"isActionConfirmed\"\n        size=\"8\"\n        color=\"green\"\n        class=\"text-white\"\n      >\n        <BalIcon name=\"check\" />\n      </BalCircle>\n      <h4>{{ $t(`${action}`) }} {{ $t('lpTokens') }}</h4>\n    </BalStack>\n    <div\n      class=\"py-2 px-4 rounded-lg border dark:border-gray-700 divide-y dark:divide-gray-700\"\n    >\n      <BalStack horizontal justify=\"between\" align=\"center\">\n        <BalStack vertical spacing=\"none\">\n          <h5>{{ fNum(currentShares) }} {{ $t('lpTokens') }}</h5>\n          <span class=\"text-secondary\">\n            {{ getToken(pool.address)?.symbol }}\n          </span>\n        </BalStack>\n        <BalAssetSet\n          :addresses=\"tokensListExclBpt(pool)\"\n          :width=\"assetRowWidth\"\n          :size=\"32\"\n        />\n      </BalStack>\n    </div>\n    <StakeSummary\n      :action=\"action\"\n      :fiatValue=\"fiatValueOf(pool, currentShares)\"\n      :sharePercentage=\"totalUserPoolSharePct\"\n    />\n    <BalActionSteps\n      v-if=\"!isActionConfirmed\"\n      :actions=\"stakeActions\"\n      :primaryActionType=\"action\"\n      :isLoading=\"isLoading\"\n      :disabled=\"isStakeAndZero || isMismatchedNetwork\"\n      @success=\"handleSuccess\"\n    />\n    <BalStack v-if=\"isActionConfirmed && confirmationReceipt\" vertical>\n      <ConfirmationIndicator :txReceipt=\"confirmationReceipt\" />\n      <AnimatePresence :isVisible=\"isActionConfirmed\">\n        <BalBtn\n          v-if=\"action === 'stake'\"\n          color=\"gradient\"\n          block\n          @click=\"$router.push({ name: 'claim' })\"\n        >\n          {{ $t('viewClaims') }}\n        </BalBtn>\n        <BalBtn v-else color=\"gray\" outline block @click=\"handleClose\">\n          {{ $t('close') }}\n        </BalBtn>\n      </AnimatePresence>\n    </BalStack>\n    <transition name=\"pop\">\n      <FeedbackCard v-if=\"isActionConfirming || isActionConfirmed\" />\n    </transition>\n  </BalVStack>\n</template>\n","<script setup lang=\"ts\">\nimport { Pool } from '@/services/pool/types';\nimport StakePreview from './StakePreview.vue';\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\nimport { StakeAction } from './composables/useStakePreview';\n\n/**\n * TYPES\n */\ntype Props = {\n  isVisible: boolean;\n  pool: Pool;\n  action: StakeAction;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\nconst emit = defineEmits(['close', 'success']);\n\n/**\n * STATE\n */\nconst showFireworks = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { setCurrentPool } = usePoolStaking();\n\n/**\n * METHODS\n */\nfunction handleClose() {\n  showFireworks.value = false;\n  emit('close');\n}\n\nfunction handleSuccess() {\n  showFireworks.value = true;\n  emit('success');\n}\n\n/**\n * WATCHERS\n */\nonMounted(() => {\n  setCurrentPool(props.pool.id);\n});\n\nwatch(\n  () => props.pool,\n  newPool => {\n    setCurrentPool(newPool.id);\n  }\n);\n</script>\n\n<template>\n  <teleport to=\"#modal\">\n    <BalModal :show=\"isVisible\" :fireworks=\"showFireworks\" @close=\"handleClose\">\n      <StakePreview\n        :pool=\"pool\"\n        :action=\"action\"\n        @close=\"handleClose\"\n        @success=\"handleSuccess\"\n      />\n    </BalModal>\n  </teleport>\n</template>\n"],"names":["fNum","useNumbers","useStakePreview","props","emit","isLoadingApprovalsForGauge","ref","isActionConfirmed","isActionConfirming","confirmationReceipt","stakeActions","balanceFor","refetchBalances","useTokens","t","useI18n","addTransaction","useTransactions","getTokenApprovalActions","useTokenApprovalActions","isPoolStakingLoading","stake","unstake","stakedShares","refetchAllPoolStakingData","preferentialGaugeAddress","usePoolStaking","currentShares","getAddress","stakeAction","txWithNotification","unstakeAction","isStakeAndZero","computed","totalUserPoolSharePct","bnum","amountsToApprove","isLoading","action","actionType","tx","fiatValueOf","FNumFormats","error","loadApprovalsForGauge","approvalActions","trackLoading","ApprovalAction","handleSuccess","receipt","handleClose","watch","onBeforeMount","__props","__emit","getToken","isMismatchedNetwork","useWeb3","assetRowWidth","tokensListExclBpt","showFireworks","setCurrentPool","onMounted","newPool"],"mappings":"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"}