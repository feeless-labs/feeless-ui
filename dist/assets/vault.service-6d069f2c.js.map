{"version":3,"file":"vault.service-6d069f2c.js","sources":["../../src/services/cowswap_deprecated/utils.ts","../../src/services/contracts/vault.service.ts"],"sourcesContent":["import { configService } from '../config/config.service';\nimport { MAX_VALID_TO_EPOCH } from './constants';\n\nexport function toErc20Address(tokenAddress: string) {\n  const nativeAssetAddress = configService.network.tokens.Addresses.nativeAsset;\n\n  if (tokenAddress.toLowerCase() === nativeAssetAddress.toLowerCase()) {\n    return configService.network.tokens.Addresses.wNativeAsset;\n  }\n\n  return tokenAddress;\n}\n\nexport function calculateValidTo(deadlineInMinutes: number): number {\n  const now = Date.now() / 1000;\n  const validTo = Math.floor(deadlineInMinutes * 60 + now);\n\n  return Math.min(validTo, MAX_VALID_TO_EPOCH);\n}\n","import {\n  FundManagement,\n  SingleSwap,\n  SwapType,\n  SwapV2,\n} from '@feeless/sdk';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { ContractInterface } from '@ethersproject/contracts';\n\nimport { calculateValidTo } from '../cowswap_deprecated/utils';\n\nimport ConfigService, { configService } from '@/services/config/config.service';\n\nimport WalletService, {\n  walletService as walletServiceInstance,\n} from '@/services/web3/wallet.service';\n\nexport default class VaultService {\n  abi: ContractInterface;\n\n  constructor(\n    protected readonly config: ConfigService = configService,\n    private readonly walletService: WalletService = walletServiceInstance\n  ) {\n    this.abi = Vault__factory.abi;\n  }\n\n  get address() {\n    return this.config.network.addresses.vault;\n  }\n\n  public swap(\n    single: SingleSwap,\n    funds: FundManagement,\n    tokenOutAmount: string,\n    transactionDeadline: number,\n    options: Record<string, any> = {}\n  ): Promise<TransactionResponse> {\n    const deadline = calculateValidTo(transactionDeadline);\n    return this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'swap',\n      params: [single, funds, tokenOutAmount, deadline],\n      options,\n    });\n  }\n\n  public batchSwap(\n    swapKind: SwapType,\n    swaps: SwapV2[],\n    tokenAddresses: string[],\n    funds: FundManagement,\n    limits: string[],\n    transactionDeadline: number,\n    options: Record<string, any> = {}\n  ): Promise<TransactionResponse> {\n    const deadline = calculateValidTo(transactionDeadline);\n    return this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'batchSwap',\n      params: [swapKind, swaps, tokenAddresses, funds, limits, deadline],\n      options,\n    });\n  }\n\n  public getInternalBalance(\n    account: string,\n    tokens: string[]\n  ): Promise<string[]> {\n    return this.walletService.txBuilder.contract.callStatic({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'getInternalBalance',\n      params: [account, tokens],\n    });\n  }\n\n  public manageUserBalance({\n    kind,\n    asset,\n    amount,\n    sender,\n    recipient,\n  }: {\n    kind: number;\n    asset: string;\n    amount: string;\n    sender: string;\n    recipient: string;\n  }): Promise<TransactionResponse> {\n    return this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'manageUserBalance',\n      params: [[{ kind, asset, amount, sender, recipient }]],\n    });\n  }\n}\n\nexport const vaultService = new VaultService();\n"],"names":["calculateValidTo","deadlineInMinutes","now","validTo","MAX_VALID_TO_EPOCH","VaultService","config","configService","walletService","walletServiceInstance","__publicField","Vault__factory","single","funds","tokenOutAmount","transactionDeadline","options","deadline","swapKind","swaps","tokenAddresses","limits","account","tokens","kind","asset","amount","sender","recipient","vaultService"],"mappings":"2QAaO,SAASA,EAAiBC,EAAmC,CAC5D,MAAAC,EAAM,KAAK,IAAA,EAAQ,IACnBC,EAAU,KAAK,MAAMF,EAAoB,GAAKC,CAAG,EAEhD,OAAA,KAAK,IAAIC,EAASC,CAAkB,CAC7C,CCAA,MAAqBC,CAAa,CAGhC,YACqBC,EAAwBC,EAC1BC,EAA+BC,EAChD,CALFC,EAAA,YAGqB,KAAA,OAAAJ,EACF,KAAA,cAAAE,EAEjB,KAAK,IAAMG,EAAe,eAAA,GAC5B,CAEA,IAAI,SAAU,CACL,OAAA,KAAK,OAAO,QAAQ,UAAU,KACvC,CAEO,KACLC,EACAC,EACAC,EACAC,EACAC,EAA+B,GACD,CACxB,MAAAC,EAAWjB,EAAiBe,CAAmB,EACrD,OAAO,KAAK,cAAc,UAAU,SAAS,gBAAgB,CAC3D,gBAAiB,KAAK,QACtB,IAAK,KAAK,IACV,OAAQ,OACR,OAAQ,CAACH,EAAQC,EAAOC,EAAgBG,CAAQ,EAChD,QAAAD,CAAA,CACD,CACH,CAEO,UACLE,EACAC,EACAC,EACAP,EACAQ,EACAN,EACAC,EAA+B,GACD,CACxB,MAAAC,EAAWjB,EAAiBe,CAAmB,EACrD,OAAO,KAAK,cAAc,UAAU,SAAS,gBAAgB,CAC3D,gBAAiB,KAAK,QACtB,IAAK,KAAK,IACV,OAAQ,YACR,OAAQ,CAACG,EAAUC,EAAOC,EAAgBP,EAAOQ,EAAQJ,CAAQ,EACjE,QAAAD,CAAA,CACD,CACH,CAEO,mBACLM,EACAC,EACmB,CACnB,OAAO,KAAK,cAAc,UAAU,SAAS,WAAW,CACtD,gBAAiB,KAAK,QACtB,IAAK,KAAK,IACV,OAAQ,qBACR,OAAQ,CAACD,EAASC,CAAM,CAAA,CACzB,CACH,CAEO,kBAAkB,CACvB,KAAAC,EACA,MAAAC,EACA,OAAAC,EACA,OAAAC,EACA,UAAAC,CAAA,EAO+B,CAC/B,OAAO,KAAK,cAAc,UAAU,SAAS,gBAAgB,CAC3D,gBAAiB,KAAK,QACtB,IAAK,KAAK,IACV,OAAQ,oBACR,OAAQ,CAAC,CAAC,CAAE,KAAAJ,EAAM,MAAAC,EAAO,OAAAC,EAAQ,OAAAC,EAAQ,UAAAC,CAAU,CAAC,CAAC,CAAA,CACtD,CACH,CACF,CAEa,MAAAC,EAAe,IAAIxB"}