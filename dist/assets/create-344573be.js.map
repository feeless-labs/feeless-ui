{"version":3,"file":"create-344573be.js","sources":["../../src/components/_global/BalVerticalSteps/BalVerticalSteps.vue","../../src/components/inputs/TokenInput/TokenWeightInput.vue","../../src/components/cards/CreatePool/ChooseWeights.vue","../../src/components/cards/CreatePool/InitialLiquidity.vue","../../src/components/cards/CreatePool/PoolFees.vue","../../node_modules/color.js/dist/color.esm.js","../../src/components/cards/CreatePool/PoolSummary.vue","../../src/components/_global/BalInlineInput/composables/useInlineInputStyles.ts","../../src/components/_global/BalInlineInput/BalInlineInput.vue","../../src/components/cards/CreatePool/CreateActions.vue","../../src/components/cards/CreatePool/PreviewPool.vue","../../src/components/cards/CreatePool/SimilarPools.vue","../../src/components/cards/CreatePool/SimilarPoolsCompact.vue","../../src/assets/images/icons/coingecko.svg","../../src/components/cards/CreatePool/TokenPrices.vue","../../src/components/modals/UnknownTokenPrice/UnknownTokenPriceModal.vue","../../src/pages/pool/create.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { StepState } from '@/types';\n\ntype Props = {\n  title: string;\n  steps: Step[];\n};\n\ntype Step = {\n  tooltip: string;\n  state: StepState;\n  label?: number;\n  isVisible?: boolean;\n};\n\nconst props = defineProps<Props>();\nconst emit = defineEmits(['navigate']);\n\n/**\n * COMPUTED\n */\nconst visibleSteps = computed(() => {\n  return props.steps.filter(\n    step => step.isVisible === undefined || step.isVisible\n  );\n});\n\nconst stepTextClasses = computed(() => {\n  return visibleSteps.value.map(step => {\n    return getActiveClassName(step.state, [\n      [\n        StepState.Active,\n        'text-blue-600 dark:text-blue-400 font-semibold hover:text-blue-800',\n      ],\n      [StepState.Todo, 'text-gray-400 font-normal'],\n      [StepState.Success, 'text-green-500 font-semibold'],\n      [StepState.Warning, 'text-red-500 font-semibold'],\n      [StepState.Completed, 'text-gray-700 font-medium'],\n    ]);\n  });\n});\n\nconst stepCircleClasses = computed(() => {\n  return visibleSteps.value.map(step => {\n    return getActiveClassName(step.state, [\n      [\n        StepState.Active,\n        'border-2 border-none bg-gradient-from-l bg-gradient-to-r from-blue-600 to-blue-400 text-white active',\n      ],\n      [\n        StepState.Todo,\n        'border-2 border-gray-300 dark:border-gray-600 text-secondary',\n      ],\n      [\n        StepState.Success,\n        'border-2 border-none bg-gradient-to-tr from-green-500 to-green-200 text-white',\n      ],\n      [StepState.Warning, 'border-2 border-none bg-red-500 text-white active'],\n      [StepState.Completed, 'border-2 border-gray-600 font-medium'],\n    ]);\n  });\n});\n\n/**\n * METHODS\n */\nfunction handleNavigate(state: StepState, stepIndex: number) {\n  if (state === StepState.Todo) return;\n  emit('navigate', stepIndex);\n}\n\nfunction getActiveClassName<T>(state: T, classes: [T, string][]) {\n  return (classes.find(_class => _class[0] === state) || [])[1] || '';\n}\n</script>\n\n<template>\n  <BalCard noPad shadow=\"none\">\n    <div class=\"p-4 border-b dark:border-gray-600\">\n      <h6 class=\"dark:text-gray-300\">\n        {{ title }}\n      </h6>\n    </div>\n    <BalStack vertical spacing=\"base\" class=\"p-4\" justify=\"center\">\n      <div\n        v-for=\"(step, i) in visibleSteps\"\n        :key=\"`vertical-step-${step.tooltip}`\"\n        class=\"flex items-center\"\n      >\n        <button\n          :class=\"{ 'cursor-default': step.state === StepState.Todo }\"\n          @click=\"handleNavigate(step.state, i)\"\n        >\n          <BalStack horizontal align=\"center\" spacing=\"sm\">\n            <div\n              :class=\"[\n                'relative text-sm rounded-full w-7 h-7 flex justify-center items-center',\n                stepCircleClasses[i],\n                { 'circle-line': i !== visibleSteps.length - 1 },\n              ]\"\n            >\n              <div\n                class=\"flex absolute top-0 right-0 bottom-0 left-0 justify-center items-center mx-auto w-4\"\n              >\n                <span\n                  v-if=\"\n                    ![StepState.Warning, StepState.Error].includes(step.state)\n                  \"\n                  >{{ step.label || i + 1 }}</span\n                >\n                <span v-else class=\"font-semibold\">!</span>\n              </div>\n            </div>\n            <span :class=\"['text-sm', stepTextClasses[i]]\">\n              {{ step.tooltip }}\n            </span>\n          </BalStack>\n        </button>\n      </div>\n    </BalStack>\n  </BalCard>\n</template>\n\n<style scoped>\n.circle-line::after {\n  @apply absolute left-0 right-0 my-0 mx-auto bg-gray-300 dark:bg-gray-600 w-px;\n\n  content: '';\n  bottom: -1.125rem;\n  height: 1rem;\n}\n\n.circle-line.active::after {\n  bottom: -1rem;\n  height: 1rem;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, ref, watchEffect } from 'vue';\nimport anime from 'animejs';\n\nimport TokenSelectInput from '@/components/inputs/TokenSelectInput/TokenSelectInput.vue';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { TokenInfo } from '@/types/TokenList';\nimport { useI18n } from 'vue-i18n';\n\n/**\n * TYPES\n */\ntype InputValue = string | number;\n\ntype Props = {\n  address?: string;\n  weight?: number;\n  label?: string;\n  fixedToken?: boolean;\n  hint?: string;\n  hintAmount?: string;\n  excludedTokens?: string[];\n  showWarningIcon?: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  address: '',\n  weight: 0,\n  hintAmount: '',\n  label: '',\n  hint: '',\n  excludedTokens: () => [],\n  showWarningIcon: false,\n});\n\nconst emit = defineEmits<{\n  (e: 'blur', value: string): void;\n  (e: 'input', value: string): void;\n  (e: 'update:weight', value: string): void;\n  (e: 'update:address', value: string): void;\n  (e: 'update:isValid', value: boolean): void;\n  (e: 'update:isLocked', value: boolean): void;\n  (e: 'keydown', value: KeyboardEvent);\n  (e: 'delete'): void;\n}>();\n\n/**\n * STATE\n */\nconst _weight = ref<InputValue>('');\nconst _address = ref<string>('');\nconst lockPath = ref<HTMLElement>();\nconst lockIcon = ref<HTMLElement>();\nconst isLocked = ref(false);\n\n/**\n * COMPOSABLEs\n */\nconst { getToken } = useTokens();\nconst { t } = useI18n();\n\n/**\n * COMPUTED\n */\nconst hasToken = computed(() => !!_address.value);\n\nconst token = computed((): TokenInfo | undefined => {\n  if (!hasToken.value) return undefined;\n  return getToken(_address.value);\n});\n\nconst noTokenFoundContent = computed(\n  (): string => `${t(\n    'errorNoTokens'\n  )}<div class='text-sm text-gray-500 mt-4'> For help to create a pool with tokens not supported in the\n        Balancer UI please <a href='https://k0gwxqsj545.typeform.com/to/FGbUIJdi' class='underline'\n        target='_blank' rel='noopener noreferrer'>complete this form</a>.<div>`\n);\n\n/**\n * METHODS\n */\nfunction lockWeight(keepLocked?: boolean) {\n  if (isLocked.value && !keepLocked) {\n    anime({\n      targets: lockPath.value,\n      d: 'M7 11V7a5 4 0 0 1 10 -2v-1',\n      easing: 'spring(0.2, 80, 10, 0)',\n    });\n    isLocked.value = false;\n  } else {\n    if (!isLocked.value) {\n      anime({\n        targets: lockPath.value,\n        d: 'M7 11V7a5 5 0 0 1 10 0v4',\n        easing: 'spring(0.2, 80, 10, 0)',\n      });\n\n      anime({\n        delay: 125,\n        targets: lockIcon.value,\n        translateY: '1px',\n        easing: 'linear',\n        duration: 100,\n        complete: () => {\n          anime({\n            targets: lockIcon.value,\n            translateY: '0px',\n            easing: 'linear',\n            duration: 100,\n          });\n        },\n      });\n    }\n    isLocked.value = true;\n  }\n  emit('update:isLocked', isLocked.value);\n}\n\nfunction onInput(event) {\n  emit('input', event);\n  lockWeight(true);\n}\n\n/**\n * CALLBACKS\n */\nwatchEffect(() => {\n  _weight.value = props.weight;\n  _address.value = props.address;\n});\n</script>\n\n<template>\n  <BalTextInput\n    v-model=\"_weight\"\n    name=\"weight\"\n    :placeholder=\"hintAmount || '0.0'\"\n    type=\"number\"\n    :label=\"label\"\n    :decimalLimit=\"token?.decimals || 18\"\n    validateOn=\"input\"\n    autocomplete=\"off\"\n    autocorrect=\"off\"\n    noShadow\n    noBorder\n    noRadius\n    step=\"any\"\n    spellcheck=\"false\"\n    v-bind=\"$attrs\"\n    inputAlignRight\n    @blur=\"emit('blur', $event)\"\n    @input=\"onInput\"\n    @update:model-value=\"emit('update:weight', $event)\"\n    @update:is-valid=\"emit('update:isValid', $event)\"\n    @keydown=\"emit('keydown', $event)\"\n  >\n    <template #prepend>\n      <div class=\"flex justify-between items-center\">\n        <TokenSelectInput\n          v-model=\"_address\"\n          :fixed=\"fixedToken\"\n          class=\"mr-2\"\n          :excludedTokens=\"excludedTokens\"\n          :notFoundContent=\"noTokenFoundContent\"\n          @update:model-value=\"emit('update:address', $event)\"\n        />\n        <BalIcon\n          v-if=\"showWarningIcon\"\n          name=\"alert-triangle\"\n          size=\"sm\"\n          class=\"text-red-600\"\n        />\n      </div>\n    </template>\n    <template #append>\n      <BalStack align=\"center\" horizontal spacing=\"none\">\n        <BalIcon name=\"percent\" size=\"sm\" class=\"mt-3 text-gray-600\" />\n        <button\n          :class=\"[\n            'ml-2 ease-color mt-1 text-secondary hover:text-blue-800 dark:hover:text-blue-800 flex items-center shadow-sm border dark:border-0 bg-gray-50 dark:bg-gray-850 rounded-full p-1 justify-center',\n            {\n              'text-blue-600 dark:text-blue-400': isLocked,\n              'border-transparent': !isLocked,\n            },\n          ]\"\n          @click=\"lockWeight(false)\"\n        >\n          <svg\n            ref=\"lockIcon\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"feather feather-unlock\"\n          >\n            <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\" />\n            <path ref=\"lockPath\" d=\"M7 11V7a5 4 0 0 1 10 -2v-1\" />\n          </svg>\n        </button>\n        <button\n          :class=\"[\n            'ml-2 ease-color mt-1 text-secondary hover:text-red-500 dark:hover:text-red-500 flex items-center shadow-sm border dark:border-0 bg-gray-50 dark:bg-gray-850 rounded-full p-1 justify-center',\n          ]\"\n          @click=\"emit('delete')\"\n        >\n          <BalIcon name=\"trash-2\" size=\"sm\" />\n        </button>\n      </BalStack>\n    </template>\n  </BalTextInput>\n</template>\n\n<style scoped>\n.ease-color {\n  transition: color border-color easeout 0.1s;\n}\n</style>\n","<script setup lang=\"ts\">\nimport anime from 'animejs';\nimport { sum, sumBy, uniqueId } from 'lodash';\nimport { ComponentPublicInstance } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\nimport TokenWeightInput from '@/components/inputs/TokenInput/TokenWeightInput.vue';\nimport usePoolCreation, {\n  PoolSeedToken,\n} from '@/composables/pools/usePoolCreation';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useDarkMode from '@/composables/useDarkMode';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { configService } from '@/services/config/config.service';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n\nconst emit = defineEmits(['update:height', 'trigger:alert']);\n\nconst emptyTokenWeight: PoolSeedToken = {\n  tokenAddress: '',\n  weight: 0,\n  id: '0',\n  isLocked: false,\n  amount: '0',\n};\n\n/**\n * COMPOSABLES\n */\nconst {\n  updateTokenWeights,\n  proceed,\n  setTokensList,\n  seedTokens,\n  tokensList,\n  totalLiquidity,\n  hasUnlistedToken,\n  isUnlistedToken,\n} = usePoolCreation();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { fNum } = useNumbers();\nconst { nativeAsset, getToken } = useTokens();\nconst { isWalletReady, startConnectWithInjectedProvider } = useWeb3();\nconst { t } = useI18n();\nconst { darkMode } = useDarkMode();\n\n/**\n * STATE\n */\nconst networkName = configService.network.name;\n\nconst tokenWeightListWrapper = ref<HTMLElement>();\nconst addTokenRowElement = ref<HTMLElement>();\nconst totalsRowElement = ref<HTMLElement>();\nconst seedTokenElements = ref<(Element | ComponentPublicInstance)[]>([]);\nconst cardWrapper = ref<HTMLElement>();\nconst wrapperHeight = ref(0);\nconst cardWrapperHeight = ref(0);\n\n/**\n * COMPUTED\n */\nconst tokenWeightItemHeight = computed(() =>\n  upToLargeBreakpoint.value ? 56 : 64\n);\n\nconst zeroWeightToken = computed(() => {\n  const validTokens = seedTokens.value.filter(t => t.tokenAddress !== '');\n  const zeroWeightToken = validTokens.find(t => t.weight === 0);\n  if (zeroWeightToken) {\n    return getToken(zeroWeightToken.tokenAddress);\n  }\n  return null;\n});\n\nconst walletLabel = computed(() => {\n  if (!isWalletReady.value) {\n    return t('connectWallet');\n  }\n  if (showLiquidityAlert.value) {\n    return t('continueAnyway');\n  }\n  return t('next');\n});\n\nconst totalAllocatedWeight = computed(() => {\n  const validTokens = seedTokens.value.filter(t => t.tokenAddress !== '');\n  const validPercentage = sumBy(validTokens, 'weight');\n  return validPercentage.toFixed(2);\n});\n\nconst totalWeight = computed(() => {\n  const pct = sumBy(seedTokens.value, 'weight');\n  return pct.toFixed(2);\n});\n\nconst isProceedDisabled = computed(() => {\n  if (!isWalletReady.value) return false;\n  if (Number(totalAllocatedWeight.value) !== 100) return true;\n  if (seedTokens.value.length < 2) return true;\n  if (zeroWeightToken.value) return true;\n  if (hasUnlistedToken.value) return true;\n  return false;\n});\n\nconst showLiquidityAlert = computed(() => {\n  const validTokens = seedTokens.value.filter(t => t.tokenAddress !== '');\n  return totalLiquidity.value.lt(20000) && validTokens.length >= 2;\n});\n\nconst excludedTokens = computed((): string[] => {\n  return [nativeAsset.address, ...tokensList.value];\n});\n\nconst maxTokenAmountReached = computed(() => {\n  return seedTokens.value.length >= 8;\n});\n\nconst progressBarColor = computed(() => {\n  if (\n    Number(totalAllocatedWeight.value) > 100 ||\n    Number(totalAllocatedWeight.value) <= 0\n  ) {\n    return 'red';\n  }\n  return 'green';\n});\n\nconst weightColor = computed(() => {\n  if (Number(totalWeight.value) > 100 || Number(totalWeight.value) <= 0) {\n    return 'text-red-500';\n  }\n  return darkMode.value ? 'text-gray-300' : 'text-gray-800';\n});\n\n/**\n * WATCHERS\n */\nwatch(\n  () => seedTokens,\n  () => {\n    setTokensList(seedTokens.value.map(w => w.tokenAddress));\n  },\n  {\n    deep: true,\n  }\n);\n\n/**\n * LIFECYCLE\n */\nonMounted(async () => {\n  // retrieving height causes reflow, get the height of the wrapper once\n  // and manually uptick it when we add items to prevent double reflow during anim\n  wrapperHeight.value = tokenWeightListWrapper.value?.offsetHeight || 0;\n  cardWrapperHeight.value = cardWrapper.value?.offsetHeight || 0;\n\n  // add in the first token list item\n  if (!seedTokens.value.length) {\n    addTokenToPool();\n    addTokenToPool();\n  } else {\n    await animateHeight(seedTokens.value.length);\n  }\n  // wait for vue to reflect the changes of above\n  await nextTick();\n  distributeWeights();\n});\n\nonBeforeUpdate(() => {\n  seedTokenElements.value = [];\n});\n\n/**\n * FUNCTIONS\n */\nfunction handleWeightChange(weight: string, id: number) {\n  const tokenWeight = seedTokens.value[id];\n  tokenWeight.weight = Number(weight);\n\n  distributeWeights();\n}\n\nfunction handleAddressChange(address: string, id: number) {\n  const tokenWeight = seedTokens.value[id];\n  tokenWeight.tokenAddress = address;\n}\n\nfunction handleLockedWeight(isLocked: boolean, id: number) {\n  const tokenWeight = seedTokens.value[id];\n  tokenWeight.isLocked = isLocked;\n  distributeWeights();\n}\n\nasync function animateHeight(offset = 0) {\n  // animate the height initially\n  emit('update:height', {\n    height:\n      (cardWrapper.value?.offsetHeight || 0) +\n      tokenWeightItemHeight.value * offset,\n  });\n  anime({\n    targets: tokenWeightListWrapper.value,\n    height: `${wrapperHeight.value + tokenWeightItemHeight.value * offset}px`,\n    complete: () => {\n      emit('update:height', {\n        height: cardWrapper.value?.offsetHeight || 0,\n      });\n    },\n  });\n  wrapperHeight.value += tokenWeightItemHeight.value * offset;\n  // to avoid reflow we are going to transform the totals + add token\n  // down instead of having the new token weight item shift them\n  anime({\n    targets: [totalsRowElement.value, addTokenRowElement.value],\n    translateY: `${tokenWeightItemHeight.value * seedTokens.value.length}px`,\n    easing: 'spring(0.4, 500, 9, 0)',\n  });\n  await nextTick();\n  // get the last added token weight element\n  seedTokenElements.value.forEach((seedTokenElement, i) => {\n    anime.set(seedTokenElement, {\n      left: 0,\n      right: 0,\n      top: `${tokenWeightItemHeight.value * i}px`,\n    });\n  });\n}\n\nasync function addTokenToPool() {\n  const newWeights: PoolSeedToken[] = [\n    ...seedTokens.value,\n    { ...emptyTokenWeight, id: uniqueId() } as PoolSeedToken,\n  ];\n  updateTokenWeights(newWeights);\n  await animateHeight(1);\n  distributeWeights();\n}\n\nfunction distributeWeights() {\n  // get all the locked weights and sum those bad boys\n  let lockedPct = sum(\n    seedTokens.value.filter(w => w.isLocked).map(w => w.weight / 100)\n  );\n  // makes it so that new allocations are set as 0\n  if (lockedPct > 1) lockedPct = 1;\n  const pctAvailableToDistribute = bnum(1).minus(lockedPct);\n  const unlockedWeights = seedTokens.value.filter(w => !w.isLocked);\n  const evenDistributionWeight = pctAvailableToDistribute.div(\n    unlockedWeights.length\n  );\n\n  const error = pctAvailableToDistribute.minus(\n    evenDistributionWeight.times(unlockedWeights.length)\n  );\n  const isErrorDivisible = error.mod(unlockedWeights.length).eq(0);\n  const distributableError = isErrorDivisible\n    ? error.div(unlockedWeights.length)\n    : error;\n\n  const normalisedWeights = unlockedWeights.map((_, i) => {\n    const evenDistributionWeight4DP = Number(evenDistributionWeight.toFixed(4));\n    const errorScaledTo4DP = Number(distributableError.toString()) * 1e14;\n    if (!isErrorDivisible && i === 0) {\n      return evenDistributionWeight4DP + errorScaledTo4DP;\n    } else if (isErrorDivisible) {\n      return evenDistributionWeight4DP + errorScaledTo4DP;\n    } else {\n      return evenDistributionWeight4DP;\n    }\n  });\n\n  unlockedWeights.forEach((tokenWeight, i) => {\n    tokenWeight.weight = Number((normalisedWeights[i] * 100).toFixed(2));\n  });\n}\n\nfunction addTokenListElementRef(el: Element | ComponentPublicInstance | null) {\n  if (!el) return;\n  // const filteredElements = seedTokenElements.value.filter(e => e !== null);\n  if (!seedTokenElements.value.includes(el) && el) {\n    seedTokenElements.value.push(el);\n  }\n}\n\nasync function handleRemoveToken(index: number) {\n  updateTokenWeights(seedTokens.value.filter((_, i) => i !== index));\n  await nextTick();\n  seedTokenElements.value = seedTokenElements.value.filter(\n    (_, i) => i !== index\n  );\n  distributeWeights();\n  animateHeight(-1);\n}\n\nfunction handleProceed() {\n  if (!isWalletReady.value) {\n    startConnectWithInjectedProvider();\n  } else {\n    proceed();\n  }\n}\n\nfunction onAlertMountChange() {\n  emit('update:height', {\n    height: cardWrapper.value?.offsetHeight || 0,\n  });\n}\n</script>\n\n<template>\n  <div ref=\"cardWrapper\" class=\"mb-16\">\n    <BalCard shadow=\"xl\" noBorder>\n      <BalStack vertical spacing=\"sm\">\n        <BalStack vertical spacing=\"xs\">\n          <span class=\"text-xs text-secondary\">{{ networkName }}</span>\n          <h5 class=\"font-semibold dark:text-gray-300\">\n            {{ $t('createAPool.chooseTokenWeights') }}\n          </h5>\n        </BalStack>\n        <BalCard shadow=\"none\" noPad>\n          <div ref=\"tokenWeightListWrapper\">\n            <div class=\"flex flex-col\">\n              <div\n                class=\"flex justify-between p-2 px-4 w-full bg-gray-50 dark:bg-gray-850\"\n              >\n                <h6>{{ $t('token') }}</h6>\n                <h6>{{ $t('weight') }}</h6>\n              </div>\n              <div class=\"relative w-full\">\n                <div\n                  v-for=\"(token, i) of seedTokens\"\n                  :key=\"`tokenweight-${token.id}`\"\n                  :ref=\"addTokenListElementRef\"\n                  class=\"absolute w-full\"\n                >\n                  <AnimatePresence isVisible>\n                    <TokenWeightInput\n                      v-model:weight=\"seedTokens[i].weight\"\n                      v-model:address=\"seedTokens[i].tokenAddress\"\n                      noRules\n                      noMax\n                      :showWarningIcon=\"\n                        isUnlistedToken(seedTokens[i].tokenAddress)\n                      \"\n                      :excludedTokens=\"excludedTokens\"\n                      @update:weight=\"data => handleWeightChange(data, i)\"\n                      @update:address=\"data => handleAddressChange(data, i)\"\n                      @update:is-locked=\"data => handleLockedWeight(data, i)\"\n                      @delete=\"() => handleRemoveToken(i)\"\n                    />\n                  </AnimatePresence>\n                </div>\n              </div>\n\n              <div ref=\"addTokenRowElement\" class=\"p-3\">\n                <BalBtn\n                  :disabled=\"maxTokenAmountReached\"\n                  outline\n                  :color=\"maxTokenAmountReached ? 'gray' : 'blue'\"\n                  size=\"sm\"\n                  @click=\"addTokenToPool\"\n                >\n                  {{ $t('addToken') }}\n                </BalBtn>\n              </div>\n              <div\n                ref=\"totalsRowElement\"\n                class=\"p-2 px-4 w-full bg-gray-50 dark:bg-gray-850\"\n              >\n                <div class=\"flex justify-between w-full\">\n                  <h6>{{ $t('totalAllocated') }}</h6>\n                  <BalStack horizontal spacing=\"xs\" align=\"center\">\n                    <h6 :class=\"weightColor\">{{ totalAllocatedWeight }}%</h6>\n                    <BalIcon\n                      v-if=\"\n                        Number(totalWeight) > 100 || Number(totalWeight) <= 0\n                      \"\n                      class=\"mt-px text-red-500\"\n                      name=\"alert-circle\"\n                      size=\"sm\"\n                    />\n                  </BalStack>\n                </div>\n                <BalProgressBar\n                  :color=\"progressBarColor\"\n                  :width=\"totalAllocatedWeight\"\n                  :bufferWidth=\"0\"\n                  class=\"my-2\"\n                />\n              </div>\n            </div>\n          </div>\n        </BalCard>\n        <AnimatePresence\n          :isVisible=\"showLiquidityAlert && isWalletReady\"\n          unmountInstantly\n          @on-presence=\"onAlertMountChange\"\n          @on-exit=\"onAlertMountChange\"\n        >\n          <BalAlert\n            :title=\"$t('createAPool.recommendedLiquidity')\"\n            type=\"warning\"\n          >\n            {{\n              $t('createAPool.youCanFundWithThisPoolWith', [\n                fNum(totalLiquidity.toString(), FNumFormats.fiat),\n              ])\n            }}\n          </BalAlert>\n        </AnimatePresence>\n        <AnimatePresence\n          :isVisible=\"!!zeroWeightToken\"\n          unmountInstantly\n          @on-presence=\"onAlertMountChange\"\n          @on-exit=\"onAlertMountChange\"\n        >\n          <BalAlert :title=\"$t('createAPool.zeroWeightTitle')\" type=\"error\">\n            {{ $t('createAPool.zeroWeightInfo') }}\n          </BalAlert>\n        </AnimatePresence>\n        <AnimatePresence\n          :isVisible=\"Number(totalWeight) > 100 || Number(totalWeight) <= 0\"\n          unmountInstantly\n          @on-presence=\"onAlertMountChange\"\n          @on-exit=\"onAlertMountChange\"\n        >\n          <BalAlert\n            :title=\"$t('createAPool.totalWeightAlertTitle')\"\n            type=\"error\"\n          >\n            {{ $t('createAPool.totalWeightAlert', [zeroWeightToken?.symbol]) }}\n          </BalAlert>\n        </AnimatePresence>\n        <AnimatePresence\n          :isVisible=\"hasUnlistedToken\"\n          unmountInstantly\n          @on-presence=\"onAlertMountChange\"\n          @on-exit=\"onAlertMountChange\"\n        >\n          <BalAlert :title=\"$t('unlistedTokenWarningTitle')\" type=\"error\">\n            <BalStack vertical spacing=\"xs\">\n              <span class=\"mt-2\"\n                >{{ $t('unlistedTokenWarning') }}\n                <a\n                  href=\"https://github.com/feeless-labs/frontend-v2/wiki/How-tos#add-tokens-to-tokenlist\"\n                  target=\"_blank\"\n                  class=\"underline\"\n                  >{{ $t('here') }}</a\n                >.\n              </span>\n            </BalStack>\n          </BalAlert>\n        </AnimatePresence>\n        <BalBtn\n          block\n          color=\"gradient\"\n          :disabled=\"isProceedDisabled\"\n          @click=\"handleProceed\"\n        >\n          {{ walletLabel }}\n        </BalBtn>\n      </BalStack>\n    </BalCard>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n';\n\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum, isSameAddress } from '@/lib/utils';\nimport { isGreaterThan } from '@/lib/utils/validations';\nimport useNetwork from '@/composables/useNetwork';\n\nconst emit = defineEmits(['update:height']);\n\n/**\n * STATE\n */\nconst isOptimised = ref(false);\nconst cardWrapper = ref<HTMLElement>();\n\n/**\n * COMPOSBALES\n */\nconst { networkConfig } = useNetwork();\nconst {\n  balanceFor,\n  priceFor,\n  nativeAsset,\n  wrappedNativeAsset,\n  dynamicDataLoading,\n} = useTokens();\nconst { fNum } = useNumbers();\nconst {\n  seedTokens,\n  totalLiquidity,\n  scaledLiquidity,\n  manuallySetToken,\n  autoOptimiseBalances,\n  currentLiquidity,\n  isWrappedNativeAssetPool,\n  useNativeAsset,\n  poolLiquidity,\n  createPoolTxHash,\n  getOptimisedLiquidity,\n  goBack,\n  updateManuallySetToken,\n  proceed,\n  clearAmounts,\n  setAmountsToMaxBalances,\n  saveState,\n} = usePoolCreation();\nconst { t } = useI18n();\n\nconst tokenAddresses = ref([] as string[]);\n\n/**\n * COMPUTED\n */\nconst areAmountsMaxed = computed(() => {\n  const isMaxed = seedTokens.value.every(t =>\n    bnum(t.amount).eq(balanceFor(t.tokenAddress))\n  );\n  return isMaxed;\n});\n\nconst isExceedingWalletBalance = computed(() => {\n  // need to perform rounding here as JS cuts off those\n  // really long numbers which makes it impossible to compare\n  const isExceeding = tokenAddresses.value.some((t, i) =>\n    bnum(seedTokens.value[i].amount).gt(balanceFor(t))\n  );\n  return isExceeding;\n});\n\nconst arbitrageDelta = computed(() => {\n  let totalPctDelta = bnum(0);\n  for (const token of seedTokens.value) {\n    const initialPct = bnum(token.amount)\n      .times(priceFor(token.tokenAddress))\n      .div(poolLiquidity.value);\n    const expectedPct = token.weight / 100;\n    const delta = initialPct.minus(expectedPct).abs();\n    totalPctDelta = totalPctDelta.plus(delta);\n  }\n  return {\n    delta: totalPctDelta,\n    value: totalPctDelta.times(poolLiquidity.value),\n  };\n});\n\nconst hasZeroAmount = computed(() => {\n  return seedTokens.value.some(seedToken => bnum(seedToken.amount).eq(0));\n});\n\n/**\n * LIFECYCLE\n */\nonBeforeMount(() => {\n  tokenAddresses.value = [...seedTokens.value.map(token => token.tokenAddress)];\n  if (isWrappedNativeAssetPool.value) setNativeAssetIfRequired();\n});\n\nonMounted(() => {\n  // these functions need access to pricing data\n  // do not attempt to optimise if there is no data\n  if (!dynamicDataLoading.value) {\n    optimiseLiquidity();\n    scaleLiquidity();\n  }\n});\n\n// these functions need access to pricing data\n// do not attempt to optimise if there is no data\n// but once we have that data, optimise away\nwatch(dynamicDataLoading, () => {\n  if (!dynamicDataLoading.value) {\n    setNativeAssetIfRequired();\n    optimiseLiquidity();\n    scaleLiquidity();\n  }\n});\n\n/**\n * METHODS\n */\nfunction optimiseLiquidity(force = false) {\n  if (manuallySetToken.value && !force) return;\n  isOptimised.value = true;\n\n  const optimisedLiquidity = getOptimisedLiquidity();\n  for (const token of seedTokens.value) {\n    token.amount = optimisedLiquidity[token.tokenAddress].balanceRequired;\n  }\n}\n\nfunction scaleLiquidity() {\n  if (!autoOptimiseBalances.value || !manuallySetToken.value) return;\n\n  for (const token of seedTokens.value) {\n    if (token.tokenAddress !== manuallySetToken.value) {\n      token.amount = scaledLiquidity.value[token.tokenAddress].balanceRequired;\n    }\n  }\n}\n\nfunction toggleAutoOptimise() {\n  autoOptimiseBalances.value = !autoOptimiseBalances.value;\n  checkLiquidityScaling();\n}\n\nfunction checkLiquidityScaling() {\n  if (!autoOptimiseBalances.value) return;\n\n  scaleLiquidity();\n}\n\nfunction handleMax() {\n  setAmountsToMaxBalances();\n  isOptimised.value = false;\n}\n\nfunction handleAmountChange(tokenAddress) {\n  updateManuallySetToken(tokenAddress);\n  checkLiquidityScaling();\n  isOptimised.value = false;\n}\n\nfunction handleAddressChange(newAddress: string): void {\n  useNativeAsset.value = isSameAddress(newAddress, nativeAsset.address);\n}\n\nfunction tokenOptions(index: number): string[] {\n  if (\n    isSameAddress(tokenAddresses.value[index], wrappedNativeAsset.value.address)\n  )\n    return [wrappedNativeAsset.value.address, nativeAsset.address];\n  if (isSameAddress(tokenAddresses.value[index], nativeAsset.address))\n    return [nativeAsset.address, wrappedNativeAsset.value.address];\n  return [];\n}\n\n// If useNativeAsset is set, or ETH has a higher balance than WETH, then use it for the input.\nfunction setNativeAssetIfRequired(): void {\n  const nativeAssetBalance = balanceFor(nativeAsset.address);\n  const wrappedNativeAssetBalance = balanceFor(\n    wrappedNativeAsset.value.address\n  );\n\n  if (\n    useNativeAsset.value ||\n    bnum(nativeAssetBalance).gt(wrappedNativeAssetBalance)\n  ) {\n    // the native asset flag may not be set\n    useNativeAsset.value = true;\n    tokenAddresses.value = tokenAddresses.value.map(address => {\n      if (isSameAddress(address, wrappedNativeAsset.value.address)) {\n        return nativeAsset.address;\n      }\n      return address;\n    });\n  }\n}\n\nfunction handleClearAll() {\n  clearAmounts();\n  isOptimised.value = false;\n}\n\nfunction onAlertMountChange() {\n  emit('update:height', {\n    height: cardWrapper.value?.offsetHeight || 0,\n  });\n}\n\nfunction saveAndProceed() {\n  saveState();\n  proceed();\n}\n</script>\n\n<template>\n  <div ref=\"cardWrapper\">\n    <BalCard shadow=\"xl\" noBorder>\n      <BalStack vertical>\n        <BalStack vertical spacing=\"xs\">\n          <span class=\"text-xs text-secondary\">{{ networkConfig?.name }}</span>\n          <BalStack horizontal spacing=\"xs\" align=\"center\">\n            <button\n              v-if=\"!createPoolTxHash\"\n              class=\"flex text-blue-500 hover:text-blue-700\"\n              @click=\"goBack\"\n            >\n              <BalIcon class=\"flex\" name=\"chevron-left\" />\n            </button>\n\n            <h5 class=\"font-semibold dark:text-gray-300\">\n              Set initial liquidity\n            </h5>\n          </BalStack>\n          <AnimatePresence :isVisible=\"isOptimised\" unmountInstantly>\n            <BalStack\n              horizontal\n              align=\"center\"\n              spacing=\"sm\"\n              class=\"p-2 mt-2 rounded-lg border\"\n            >\n              <BalIcon name=\"zap\" size=\"sm\" class=\"mt-1 text-secondary\" />\n              <span class=\"font-medium dark:text-gray-400\">\n                {{ t('optimizedPrefilled') }}\n              </span>\n              <button\n                class=\"text-sm font-medium text-gray-400 hover:text-blue-500\"\n                @click=\"handleClearAll\"\n              >\n                Clear all\n              </button>\n            </BalStack>\n          </AnimatePresence>\n        </BalStack>\n        <BalStack vertical>\n          <TokenInput\n            v-for=\"(token, i) in seedTokens\"\n            :key=\"i\"\n            v-model:amount=\"token.amount\"\n            v-model:address=\"tokenAddresses[i]\"\n            fixedToken\n            :weight=\"token.weight / 100\"\n            :name=\"`initial-token-${token.tokenAddress}`\"\n            :options=\"tokenOptions(i)\"\n            :rules=\"[isGreaterThan(0)]\"\n            @update:amount=\"handleAmountChange(token.tokenAddress)\"\n            @update:address=\"handleAddressChange($event)\"\n          />\n        </BalStack>\n        <BalStack horizontal spacing=\"sm\" align=\"center\">\n          <div>\n            <span class=\"pl-2 text-sm\">{{\n              t('autoOptimiseLiquidityToggle.label')\n            }}</span>\n            <BalTooltip width=\"64\">\n              <template #activator>\n                <BalIcon\n                  name=\"info\"\n                  size=\"xs\"\n                  class=\"flex ml-1 text-gray-400\"\n                />\n              </template>\n              <!-- eslint-disable-next-line vue/no-v-html -->\n              <div v-html=\"t('autoOptimiseLiquidityToggle.tooltip')\" />\n            </BalTooltip>\n          </div>\n          <div>\n            <BalToggle\n              name=\"autoOptimise\"\n              :checked=\"autoOptimiseBalances\"\n              @toggle=\"toggleAutoOptimise\"\n            />\n          </div>\n        </BalStack>\n        <div class=\"p-3 rounded-lg border\">\n          <BalStack horizontal justify=\"between\">\n            <BalStack vertical spacing=\"none\">\n              <h6>{{ t('total') }}</h6>\n              <BalStack horizontal spacing=\"xs\" class=\"font-medium\">\n                <span class=\"text-sm\">\n                  {{ t('available') }}:\n                  {{ fNum(totalLiquidity.toString(), FNumFormats.fiat) }}\n                </span>\n                <button\n                  :disabled=\"areAmountsMaxed\"\n                  :class=\"[\n                    'text-sm font-semibold3',\n                    {\n                      'text-gray-400 dark:text-gray-600': areAmountsMaxed,\n                      'text-blue-500 hover:text-blue-50': !areAmountsMaxed,\n                    },\n                  ]\"\n                  @click=\"handleMax\"\n                >\n                  {{ areAmountsMaxed ? t('maxed') : t('max') }}\n                </button>\n              </BalStack>\n            </BalStack>\n            <BalStack vertical spacing=\"none\">\n              <h6>\n                {{ fNum(currentLiquidity.toString(), FNumFormats.fiat) }}\n              </h6>\n              <AnimatePresence\n                :isVisible=\"!isOptimised\"\n                unmountInstantly\n                @on-presence=\"onAlertMountChange\"\n                @on-exit=\"onAlertMountChange\"\n              >\n                <button\n                  class=\"text-sm font-medium text-transparent bg-clip-text bg-gradient-to-tr from-blue-500 hover:from-blue-800 to-pink-500 hover:to-pink-800\"\n                  @click=\"optimiseLiquidity(true)\"\n                >\n                  {{ t('optimize') }}\n                </button>\n              </AnimatePresence>\n            </BalStack>\n          </BalStack>\n        </div>\n        <AnimatePresence\n          :isVisible=\"arbitrageDelta.delta.gt(0.05)\"\n          unmountInstantly\n          @on-presence=\"onAlertMountChange\"\n          @on-exit=\"onAlertMountChange\"\n        >\n          <BalAlert\n            type=\"warning\"\n            :title=\"\n              t('createAPool.arbTitle', [\n                fNum(arbitrageDelta.value.toString(), FNumFormats.fiat),\n                fNum(arbitrageDelta.delta.toString(), FNumFormats.percent),\n              ])\n            \"\n          >\n            {{ t('createAPool.arbReason') }}\n          </BalAlert>\n        </AnimatePresence>\n        <BalBtn\n          :disabled=\"isExceedingWalletBalance || hasZeroAmount\"\n          block\n          color=\"gradient\"\n          @click=\"saveAndProceed\"\n        >\n          {{ t('preview') }}\n        </BalBtn>\n      </BalStack>\n    </BalCard>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport { isAddress } from '@ethersproject/address';\n\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport useNumbers from '@/composables/useNumbers';\nimport { isRequired, isValidAddress } from '@/lib/utils/validations';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { shorten } from '@/lib/utils';\nimport useNetwork from '@/composables/useNetwork';\n\nconst emit = defineEmits(['update:height']);\n\n/**\n * STATIC\n */\nconst FIXED_FEE_OPTIONS = ['0.001', '0.003', '0.01'];\n\n/**\n * STATE\n */\nconst isCustomFee = ref(false);\nconst checkboxState = ref(true);\nconst isInvalidFee = ref(false);\nconst cardWrapper = ref<HTMLElement>();\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst {\n  initialFee,\n  feeController,\n  feeManagementType,\n  feeType,\n  setFeeManagement,\n  setFeeType,\n  setFeeController,\n  setTrpController,\n  thirdPartyFeeController,\n  fee,\n  proceed,\n  goBack,\n  isLoadingSimilarPools,\n} = usePoolCreation();\nconst { account } = useWeb3();\nconst { networkConfig } = useNetwork();\n\n/**\n * COMPUTED\n */\nconst customInputClasses = computed(() => ({\n  'border border-blue-500 text-blue-600 dark:text-blue-400': isCustomFee.value,\n  'border dark:border-gray-900': !isCustomFee.value,\n}));\n\nconst isProceedDisabled = computed(() => {\n  if (\n    feeController.value === 'other' &&\n    !isAddress(thirdPartyFeeController.value)\n  ) {\n    return true;\n  }\n\n  if (isInvalidFee.value) return true;\n\n  return false;\n});\n\n// this does not need to be computed as it relies on a static\nconst feeOptions = FIXED_FEE_OPTIONS.map(option => {\n  return {\n    label: fNum(option, {\n      style: 'percent',\n      minimumFractionDigits: 1,\n      maximumFractionDigits: 1,\n      fixedFormat: true,\n    }),\n    value: option,\n  };\n});\n\n/**\n * FUNCTIONS\n */\nfunction onFixedInput(val: string): void {\n  fee.value = '';\n  initialFee.value = val;\n  isCustomFee.value = false;\n}\n\nfunction onCustomInput(val: string): void {\n  if (val === '') return;\n\n  initialFee.value = (Number(val) / 100).toString();\n  isCustomFee.value = true;\n\n  if (Number(val) < 0.0001 || Number(val) > 10) {\n    isInvalidFee.value = true;\n  } else {\n    isInvalidFee.value = false;\n  }\n}\n\nasync function onChangeFeeManagementType(val: boolean) {\n  if (!val) {\n    setFeeManagement('self');\n  } else {\n    setFeeManagement('governance');\n    setFeeType('fixed');\n    setFeeController('self');\n    setTrpController('');\n  }\n  await nextTick();\n  emit('update:height', {\n    height: cardWrapper.value?.offsetHeight || 0,\n  });\n}\n\nasync function onChangeFeeType(val: string) {\n  if (val === 'fixed') {\n    setFeeController('self');\n    setTrpController('');\n  }\n  await nextTick();\n  emit('update:height', {\n    height: cardWrapper.value?.offsetHeight || 0,\n  });\n}\n\nasync function onChangeFeeController(val: string) {\n  if (val === 'self') {\n    setTrpController('');\n  }\n  await nextTick();\n  emit('update:height', {\n    height: cardWrapper.value?.offsetHeight || 0,\n  });\n}\n\nwatch(fee, onCustomInput, { immediate: true });\n</script>\n\n<template>\n  <div ref=\"cardWrapper\">\n    <BalCard shadow=\"xl\" noBorder>\n      <BalStack vertical>\n        <BalStack vertical spacing=\"xs\">\n          <span class=\"text-xs text-secondary\">{{ networkConfig?.name }}</span>\n          <BalStack horizontal align=\"center\" spacing=\"xs\">\n            <button\n              class=\"flex text-blue-500 hover:text-blue-700\"\n              @click=\"goBack\"\n            >\n              <BalIcon class=\"flex\" name=\"chevron-left\" />\n            </button>\n            <h5 class=\"font-semibold dark:text-gray-300\">\n              {{ $t('createAPool.setPoolFees') }}\n            </h5>\n          </BalStack>\n        </BalStack>\n        <BalStack vertical spacing=\"sm\">\n          <div>\n            <h6 class=\"mb-1\">Initial swap fee</h6>\n            <p class=\"text-gray-600\">\n              {{ $t('createAPool.bestFeeOption') }}\n            </p>\n          </div>\n          <BalStack spacing=\"xs\" horizontal>\n            <BalBtnGroup\n              v-model=\"initialFee\"\n              :options=\"feeOptions\"\n              @update:model-value=\"onFixedInput\"\n            />\n            <div>\n              <div :class=\"['custom-input', customInputClasses]\">\n                <input\n                  v-model=\"fee\"\n                  class=\"w-12 h-full text-right bg-transparent\"\n                  placeholder=\"0.1\"\n                  type=\"number\"\n                  step=\"any\"\n                />\n                <div class=\"px-1\">%</div>\n              </div>\n            </div>\n          </BalStack>\n          <BalAlert\n            v-if=\"isInvalidFee\"\n            class=\"w-full\"\n            :title=\"$t('invalidFee')\"\n            type=\"error\"\n          >\n            {{ $t('invalidFeeExplain') }}\n          </BalAlert>\n        </BalStack>\n        <BalStack horizontal spacing=\"none\" align=\"center\">\n          <BalCheckbox\n            v-model=\"checkboxState\"\n            name=\"areFeesGovernanceManaged\"\n            size=\"sm\"\n            :label=\"$t('createAPool.governanceFees')\"\n            noMargin\n            @update:model-value=\"onChangeFeeManagementType\"\n          />\n          <BalTooltip\n            :text=\"$t('createAPool.governanceFeesTooltip')\"\n            iconSize=\"sm\"\n            class=\"mt-1 ml-2\"\n          />\n        </BalStack>\n        <BalStack v-if=\"feeManagementType === 'self'\" vertical spacing=\"sm\">\n          <h6 class=\"mb-1\">\n            {{ $t('createAPool.alternativeFeeManagement') }}\n          </h6>\n          <BalRadio\n            v-model=\"feeType\"\n            value=\"fixed\"\n            name=\"feeManagementOptions\"\n            @update:model-value=\"onChangeFeeType\"\n          >\n            <template #label>\n              <span>\n                {{ $t('createAPool.fixedFeeRadioLabel') }}\n              </span>\n            </template>\n          </BalRadio>\n          <BalRadio\n            v-model=\"feeType\"\n            value=\"dynamic\"\n            name=\"feeManagementOptions\"\n            @update:model-value=\"onChangeFeeType\"\n          >\n            <template #label>\n              <span>\n                {{ $t('createAPool.dynamicFeeRadioLabel') }}\n              </span>\n            </template>\n          </BalRadio>\n        </BalStack>\n        <BalStack v-if=\"feeType === 'dynamic'\" vertical spacing=\"sm\">\n          <h6 class=\"mb-1\">\n            {{ $t('createAPool.setAnAddress') }}\n          </h6>\n          <BalRadio\n            v-model=\"feeController\"\n            value=\"self\"\n            name=\"addressOption\"\n            @update:model-value=\"onChangeFeeController\"\n          >\n            <template #label>\n              <span>\n                {{ $t('createAPool.myAddressOption', [shorten(account)]) }}\n              </span>\n            </template>\n          </BalRadio>\n          <BalRadio\n            v-model=\"feeController\"\n            value=\"other\"\n            name=\"addressOption\"\n            @update:model-value=\"onChangeFeeController\"\n          >\n            <template #label>\n              <span>\n                {{ $t('createAPool.customAddressOption') }}\n              </span>\n            </template>\n          </BalRadio>\n        </BalStack>\n        <BalStack\n          v-if=\"feeController === 'other' && feeType === 'dynamic'\"\n          vertical\n          spacing=\"xs\"\n        >\n          <h6>{{ $t('createAPool.customAddressTitle') }}</h6>\n          <p class=\"mb-1 text-gray-600\">\n            {{ $t('createAPool.customAddressInfo') }}\n          </p>\n          <BalStack vertical spacing=\"xs\">\n            <BalTextInput\n              v-model=\"thirdPartyFeeController\"\n              placeholder=\"0xBA4...2069\"\n              type=\"text\"\n              size=\"sm\"\n              validateOn=\"blur\"\n              :rules=\"[\n                isRequired($t('A controller address')),\n                isValidAddress(),\n              ]\"\n              name=\"customAddress\"\n            />\n          </BalStack>\n        </BalStack>\n        <BalBtn\n          :disabled=\"isProceedDisabled || isLoadingSimilarPools\"\n          type=\"submit\"\n          block\n          color=\"gradient\"\n          :loading=\"isLoadingSimilarPools\"\n          @click=\"proceed\"\n        >\n          {{ $t('next') }}\n        </BalBtn>\n      </BalStack>\n    </BalCard>\n  </div>\n</template>\n\n<style scoped>\n.custom-input {\n  @apply flex items-center px-1 rounded-lg shadow-inner h-full;\n}\n</style>\n","var getSrc = item => typeof item === 'string' ? item : item.src;\n\nvar getArgs = ({\n  amount = 3,\n  format = 'array',\n  group = 20,\n  sample = 10\n} = {}) => ({\n  amount,\n  format,\n  group,\n  sample\n});\n\nvar format = (input, args) => {\n  var list = input.map(val => {\n    var rgb = Array.isArray(val) ? val : val.split(',').map(Number);\n    return args.format === 'hex' ? rgbToHex(rgb) : rgb;\n  });\n  return args.amount === 1 || list.length === 1 ? list[0] : list;\n};\n\nvar group = (number, grouping) => {\n  var grouped = Math.round(number / grouping) * grouping;\n  return Math.min(grouped, 255);\n};\n\nvar rgbToHex = rgb => '#' + rgb.map(val => {\n  var hex = val.toString(16);\n  return hex.length === 1 ? '0' + hex : hex;\n}).join('');\n\nvar getImageData = src => new Promise((resolve, reject) => {\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  var img = new Image();\n\n  img.onload = () => {\n    canvas.height = img.height;\n    canvas.width = img.width;\n    context.drawImage(img, 0, 0);\n    var data = context.getImageData(0, 0, img.width, img.height).data;\n    resolve(data);\n  };\n\n  img.onerror = () => reject(Error('Image loading failed.'));\n\n  img.crossOrigin = '';\n  img.src = src;\n});\n\nvar getAverage = (data, args) => {\n  var gap = 4 * args.sample;\n  var amount = data.length / gap;\n  var rgb = {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n\n  for (var i = 0; i < data.length; i += gap) {\n    rgb.r += data[i];\n    rgb.g += data[i + 1];\n    rgb.b += data[i + 2];\n  }\n\n  return format([[Math.round(rgb.r / amount), Math.round(rgb.g / amount), Math.round(rgb.b / amount)]], args);\n};\n\nvar getProminent = (data, args) => {\n  var gap = 4 * args.sample;\n  var colors = {};\n\n  for (var i = 0; i < data.length; i += gap) {\n    var rgb = [group(data[i], args.group), group(data[i + 1], args.group), group(data[i + 2], args.group)].join();\n    colors[rgb] = colors[rgb] ? colors[rgb] + 1 : 1;\n  }\n\n  return format(Object.entries(colors).sort(([_keyA, valA], [_keyB, valB]) => valA > valB ? -1 : 1).slice(0, args.amount).map(([rgb]) => rgb), args);\n};\n\nvar process = (handler, item, args) => new Promise((resolve, reject) => getImageData(getSrc(item)).then(data => resolve(handler(data, getArgs(args)))).catch(error => reject(error)));\n\nvar average = (item, args) => process(getAverage, item, args);\n\nvar prominent = (item, args) => process(getProminent, item, args);\n\nexport { average, prominent };\n","<script setup lang=\"ts\">\nimport { prominent } from 'color.js';\nimport * as echarts from 'echarts/core';\nimport ECharts from 'vue-echarts';\n\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useDarkMode from '@/composables/useDarkMode';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport useTailwind from '@/composables/useTailwind';\nimport { useTokens } from '@/providers/tokens.provider';\nimport useUrls from '@/composables/useUrls';\nimport { initEcharts } from '@/dependencies/echarts';\n\ninitEcharts();\n\n/**\n * CONSTANTS\n */\nconst manualColorMap = {\n  ETH: '#627EEA',\n  WETH: '#627EEA',\n  WBTC: '#F7931A',\n  BAL: '#00265A',\n};\n\n/** STATE */\nconst colors = ref<(string | null)[]>([]);\nconst chartInstance = ref<echarts.ECharts>();\n\n/**\n * COMPOSABLES\n */\nconst { getToken } = useTokens();\nconst {\n  seedTokens,\n  updateTokenColors,\n  totalLiquidity,\n  tokensList,\n  hasRestoredFromSavedState,\n} = usePoolCreation();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { darkMode } = useDarkMode();\nconst { fNum } = useNumbers();\nconst tailwind = useTailwind();\nconst { resolve } = useUrls();\n\n/**\n * COMPUTED\n */\nconst chartConfig = computed(() => {\n  const validTokens = tokensList.value.filter(t => t !== '');\n  if (colors.value.length !== validTokens.length) return;\n  return {\n    tooltip: {\n      show: true,\n      borderRadius: 50,\n      confine: true,\n    },\n    legend: {\n      show: true,\n      type: 'scroll',\n      icon: 'circle',\n      formatter: address => {\n        if (!address) return 'Unallocated';\n        return `${getToken(address)?.symbol || 'Unallocated'}`;\n      },\n      selectedMode: false,\n      top: 'bottom',\n      textStyle: {\n        color: darkMode.value\n          ? tailwind.theme.colors.gray['300']\n          : tailwind.theme.colors.gray['850'],\n      },\n    },\n    series: [\n      {\n        type: 'pie',\n        radius: ['40%', '70%'],\n        avoidLabelOverlap: false,\n        stillShowZeroSum: true,\n        showEmptyCircle: true,\n        itemStyle: {\n          borderColor: darkMode.value\n            ? tailwind.theme.colors.gray['850']\n            : '#fff',\n          borderWidth: 5,\n          borderCap: 'butt',\n          borderJoin: 'round',\n        },\n        label: {\n          show: false,\n          position: 'center',\n        },\n        labelLine: {\n          show: false,\n        },\n        top: -20,\n        colors: colors.value,\n        data: [\n          ...seedTokens.value\n            .filter(t => t.tokenAddress !== '')\n            .map((t, i) => {\n              const tokenLogoURI = t.tokenAddress\n                ? resolve(getToken(t.tokenAddress)?.logoURI || '')\n                : '';\n              return {\n                name: t.tokenAddress,\n                value: t.weight,\n                tooltip: {\n                  show: false,\n                  borderWidth: '0',\n                },\n                emphasis: {\n                  label: {\n                    show: true,\n                    formatter: () => ' ',\n                    fontSize: '1rem',\n                    fontWeight: 'bold',\n                    backgroundColor: {\n                      image: tokenLogoURI,\n                    },\n                    width: 48,\n                    height: 48,\n                    borderRadius: 48,\n                    overflow: 'hidden',\n                  },\n                },\n                itemStyle: {\n                  color:\n                    t.tokenAddress === ''\n                      ? tailwind.theme.colors.gray[`${i + 1}00`]\n                      : colors.value[i],\n                },\n              };\n            }),\n        ],\n      },\n    ],\n  };\n});\n\n/**\n * WATCHERS\n */\nwatch(\n  [seedTokens, hasRestoredFromSavedState],\n  async () => {\n    const colors = await calculateColors();\n    await nextTick();\n    updateTokenColors(colors as string[]);\n  },\n  { deep: true, immediate: true }\n);\n\n/**\n * FUNCTIONS\n */\nasync function calculateColors() {\n  const colorPromises = seedTokens.value\n    .filter(t => t.tokenAddress !== '')\n    .map(async t => {\n      try {\n        const token = getToken(t.tokenAddress);\n        const tokenLogoURI = resolve(token.logoURI || '');\n        const color = await prominent(tokenLogoURI, {\n          amount: 2,\n          format: 'hex',\n        });\n        if (manualColorMap[token.symbol]) {\n          return manualColorMap[token.symbol];\n        }\n        if (color[0] === '#ffffff' || color[0] === '#000000')\n          return color[1] as string;\n        return color[0] as string;\n      } catch {\n        return null;\n      }\n    });\n  const _colors = await Promise.all(colorPromises);\n  colors.value = _colors;\n  return _colors;\n}\n</script>\n\n<template>\n  <BalCard noPad shadow=\"none\">\n    <div v-if=\"!upToLargeBreakpoint\" class=\"p-4 border-b dark:border-gray-600\">\n      <h6 class=\"dark:text-gray-300\">\n        {{ $t('createAPool.poolSummary') }}\n      </h6>\n    </div>\n    <div class=\"p-2\">\n      <ECharts\n        ref=\"chartInstance\"\n        class=\"w-full h-56\"\n        :option=\"chartConfig\"\n        autoresize\n      />\n    </div>\n    <BalStack class=\"mb-2\" vertical spacing=\"none\" align=\"center\">\n      <BalStack horizontal spacing=\"xs\">\n        <h6>{{ $t('inYourWallet') }}</h6>\n        <BalTooltip iconSize=\"sm\" class=\"mt-1\">\n          {{ $t('createAPool.maxLiquidityTooltip') }}\n        </BalTooltip>\n      </BalStack>\n      <span>{{ fNum(totalLiquidity.toString(), FNumFormats.fiat) }}</span>\n    </BalStack>\n  </BalCard>\n</template>\n","import { Ref } from 'vue';\n\nexport default function useInputStyles(props, isInvalid: Ref<boolean>, attrs) {\n  const extPaddingClass = (): string => {\n    switch (props.size) {\n      case 'xs':\n        return 'p-0';\n      case 'sm':\n        return 'p-1';\n      case 'lg':\n        return 'p-3';\n      default:\n        return 'p-2';\n    }\n  };\n\n  const intPaddingClass = (): string => {\n    switch (props.size) {\n      case 'xs':\n        return 'p-px';\n      case 'sm':\n        return 'p-px';\n      case 'lg':\n        return 'p-2';\n      default:\n        return 'p-1';\n    }\n  };\n\n  const inputTextSize = (): string => {\n    switch (props.size) {\n      case 'xs':\n        return 'text-sm';\n      case 'sm':\n        return 'text-base';\n      case 'lg':\n        return 'text-2xl';\n      default:\n        return 'text-xl';\n    }\n  };\n\n  const inputHeightClass = (): string => {\n    switch (props.size) {\n      case 'xs':\n        return 'h-6';\n      case 'sm':\n        return 'h-8';\n      case 'lg':\n        return 'h-12';\n      default:\n        return 'h-10';\n    }\n  };\n\n  const parentClasses = computed(() => attrs.class);\n\n  const inputContainerClasses = computed(() => ({\n    [extPaddingClass()]: true,\n  }));\n\n  const inputGroupClasses = computed(() => ({\n    [intPaddingClass()]: true,\n  }));\n\n  const headerClasses = computed(() => ({\n    [intPaddingClass()]: true,\n  }));\n\n  const footerClasses = computed(() => ({\n    [intPaddingClass()]: true,\n  }));\n\n  const inputClasses = computed(() => ({\n    [inputHeightClass()]: true,\n    [inputTextSize()]: true,\n    'text-right': props.inputAlignRight,\n    'font-numeric': props.type === 'number',\n  }));\n\n  const prependClasses = computed(() => ({\n    [inputHeightClass()]: true,\n  }));\n\n  const appendClasses = computed(() => ({\n    [inputHeightClass()]: true,\n  }));\n\n  const borderRadiusClasses = computed(() => ({\n    'rounded-lg': !props.noRadius,\n  }));\n\n  return {\n    parentClasses,\n    inputContainerClasses,\n    inputGroupClasses,\n    headerClasses,\n    footerClasses,\n    inputClasses,\n    prependClasses,\n    appendClasses,\n    borderRadiusClasses,\n  };\n}\n","<script lang=\"ts\">\n// https://v3.vuejs.org/api/sfc-script-setup.html#usage-alongside-normal-script\nexport default {\n  inheritAttrs: false,\n};\n</script>\n\n<script setup lang=\"ts\">\nimport { omit } from 'lodash';\n\nimport useInputEvents from '@/components/_global/BalTextInput/composables/useInputEvents';\nimport useInputValidation from '@/components/_global/BalTextInput/composables/useInputValidation';\nimport { Rules } from '@/types';\n\nimport useInputStyles from './composables/useInlineInputStyles';\n\n/**\n * TYPES\n */\ntype InputValue = string | number;\ntype InputType = 'text' | 'number' | 'date' | 'email' | 'password';\ntype InputSize = 'xs' | 'sm' | 'md' | 'lg';\ntype ValidationTrigger = 'input' | 'blur';\n\ntype Props = {\n  name: string;\n  modelValue: InputValue;\n  isValid?: boolean;\n  type?: InputType;\n  size?: InputSize;\n  disabled?: boolean;\n  label?: string;\n  inputAlignRight?: boolean;\n  decimalLimit?: number;\n  validateOn?: ValidationTrigger;\n  rules?: Rules;\n  format?: (input: string | number) => string | number;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  type: 'text',\n  modelValue: '',\n  isValid: true,\n  size: 'md',\n  disabled: false,\n  inputAlignRight: false,\n  decimalLimit: 18,\n  validateOn: 'blur',\n  rules: () => [],\n  label: '',\n  format: val => val,\n});\n\nconst emit = defineEmits<{\n  (e: 'blur', value: string): void;\n  (e: 'input', value: string): void;\n  (e: 'update:modelValue', value: string): void;\n  (e: 'update:isValid', value: boolean): void;\n  (e: 'keydown', value: KeyboardEvent);\n  (e: 'editToggled', value: boolean): void;\n  (e: 'save'): void;\n}>();\n\n/**\n * STATE\n */\nconst isEditable = ref(false);\nconst inputElement = ref<HTMLElement>();\n\n/**\n * COMPOSABLES\n */\nconst attrs = useAttrs();\nconst { errors, isInvalid, validate } = useInputValidation(props, emit);\nconst {\n  parentClasses,\n  inputContainerClasses,\n  inputGroupClasses,\n  headerClasses,\n  footerClasses,\n  inputClasses,\n  prependClasses,\n  appendClasses,\n  borderRadiusClasses,\n} = useInputStyles(props, isInvalid, attrs);\nconst { onInput, onKeydown, onBlur } = useInputEvents(props, emit, validate);\n\n/**\n * COMPUTED\n */\n// We don't want to pass on parent level classes to the html\n// input element. So we need to remove it from the attrs object.\nconst inputAttrs = computed(() => omit(attrs, 'class'));\n\n/**\n * FUNCTIONS\n */\nfunction toggleEditable() {\n  isEditable.value = !isEditable.value;\n  emit('editToggled', isEditable.value);\n  // if the value was changed to false it means that\n  // the user clicked the save icon\n  if (isEditable.value === false) emit('save');\n  setTimeout(() => {\n    if (inputElement.value) {\n      inputElement.value.focus();\n    }\n  }, 200);\n}\n\nfunction handleBlur(e: FocusEvent) {\n  toggleEditable();\n  onBlur(e);\n}\n</script>\n\n<template>\n  <div :class=\"['bal-text-input', parentClasses, borderRadiusClasses]\">\n    <div\n      :class=\"['input-container', inputContainerClasses, borderRadiusClasses]\"\n    >\n      <div v-if=\"$slots.header || label\" :class=\"['header', headerClasses]\">\n        <slot name=\"header\">\n          <span class=\"label text-secondary\">\n            {{ label }}\n          </span>\n        </slot>\n      </div>\n      <div :class=\"['input-group', inputGroupClasses]\">\n        <BalStack horizontal spacing=\"sm\" class=\"w-full\">\n          <div v-if=\"$slots.prepend\" :class=\"['prepend', prependClasses]\">\n            <slot name=\"prepend\" />\n          </div>\n          <input\n            v-bind=\"inputAttrs\"\n            ref=\"inputElement\"\n            :type=\"type\"\n            :name=\"name\"\n            :value=\"format(modelValue)\"\n            :disabled=\"!isEditable || disabled\"\n            :class=\"['input', inputClasses]\"\n            @blur=\"handleBlur\"\n            @input=\"onInput\"\n            @keydown=\"onKeydown\"\n          />\n          <BalStack horizontal spacing=\"none\" align=\"center\">\n            <div v-if=\"$slots.append\" :class=\"['append', appendClasses]\">\n              <slot name=\"append\" />\n            </div>\n            <button\n              v-if=\"!isEditable\"\n              class=\"hover:text-blue-600 dark:hover:text-blue-400\"\n              @click=\"toggleEditable\"\n            >\n              <BalIcon name=\"edit\" size=\"xs\" />\n            </button>\n            <button\n              v-else\n              class=\"hover:text-blue-500 dark:hover:text-blue-400\"\n              @click=\"toggleEditable\"\n            >\n              <BalIcon name=\"save\" size=\"xs\" />\n            </button>\n          </BalStack>\n        </BalStack>\n      </div>\n      <div v-if=\"$slots.footer\" :class=\"['footer', footerClasses]\">\n        <slot name=\"footer\" />\n      </div>\n      <div v-if=\"isInvalid\" :class=\"['error']\">\n        {{ errors[0] }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.input-container {\n  @apply bg-white dark:bg-gray-800;\n}\n\n.input-group {\n  @apply flex;\n}\n\n.input {\n  @apply grow bg-transparent overflow-hidden;\n}\n\n.label {\n  @apply text-sm;\n}\n\n.error {\n  @apply text-xs text-red-500 mt-1 ml-1;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { TransactionReceipt } from '@ethersproject/abstract-provider';\nimport { useI18n } from 'vue-i18n';\n\nimport BalActionSteps from '@/components/_global/BalActionSteps/BalActionSteps.vue';\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport useConfig from '@/composables/useConfig';\nimport useEthers from '@/composables/useEthers';\nimport useNetwork from '@/composables/useNetwork';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TransactionActionInfo } from '@/types/transactions';\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\nimport { ApprovalAction } from '@/composables/approvals/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  tokenAddresses: string[];\n  amounts: string[];\n  createDisabled: boolean;\n};\n\ntype CreateState = {\n  confirmed: boolean;\n  confirmedAt: string;\n  receipt?: TransactionReceipt;\n  isRestoredTxConfirmed?: boolean;\n  isLoadingRestoredTx: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\nconst emit = defineEmits<{\n  (e: 'success'): void;\n}>();\n\n/**\n * STATE\n */\nconst createState = reactive<CreateState>({\n  confirmed: false,\n  confirmedAt: '',\n  isRestoredTxConfirmed: false,\n  isLoadingRestoredTx: false,\n});\nconst isLoading = ref(true);\n\n/*\n * COMPOSABLES\n */\n// const route = useRoute();\nconst { t } = useI18n();\nconst { explorerLinks } = useWeb3();\nconst { networkConfig } = useConfig();\nconst { isTxConfirmed } = useEthers();\nconst {\n  createPool,\n  joinPool,\n  poolId,\n  poolTypeString,\n  hasRestoredFromSavedState,\n  needsSeeding,\n  createPoolTxHash,\n} = usePoolCreation();\nconst { networkSlug } = useNetwork();\nconst { getTokenApprovalActions } = useTokenApprovalActions();\n\nconst actions = ref<TransactionActionInfo[]>([\n  {\n    label: t('createPool'),\n    loadingLabel: t('investment.preview.loadingLabel.create'),\n    confirmingLabel: t('confirming'),\n    action: createPool,\n    stepTooltip: t('createPoolTooltip', [poolTypeString.value]),\n  },\n  {\n    label: t('fundPool'),\n    loadingLabel: t('investment.preview.loadingLabel.fund'),\n    confirmingLabel: t('confirming'),\n    action: joinPool,\n    stepTooltip: t('fundPoolTooltip'),\n  },\n]);\n\n/**\n * COMPUTED\n */\nconst requiredActions = computed(() => {\n  if (\n    (hasRestoredFromSavedState.value && needsSeeding.value) ||\n    createState.isRestoredTxConfirmed\n  ) {\n    return actions.value.filter(action => action.label === t('fundPool'));\n  }\n  return actions.value;\n});\n\nconst amountsToApprove = props.amounts.map((amount, index) => {\n  return {\n    address: props.tokenAddresses[index],\n    amount,\n  };\n});\n\nconst explorerLink = computed((): string =>\n  createState.receipt\n    ? explorerLinks.txLink(createState.receipt.transactionHash)\n    : ''\n);\n\nonBeforeMount(async () => {\n  if (createPoolTxHash.value) {\n    createState.isLoadingRestoredTx = true;\n    const isConfirmed = await isTxConfirmed(createPoolTxHash.value);\n    createState.isLoadingRestoredTx = false;\n    createState.isRestoredTxConfirmed = isConfirmed;\n  }\n\n  const approvalActions = await getTokenApprovalActions({\n    amountsToApprove,\n    spender: networkConfig.addresses.vault,\n    actionType: ApprovalAction.AddLiquidity,\n  });\n  actions.value = [...approvalActions, ...actions.value];\n\n  isLoading.value = false;\n});\n\n/**\n * METHODS\n */\nfunction handleSuccess(details: any): void {\n  createState.confirmed = true;\n  createState.receipt = details.receipt;\n  createState.confirmedAt = details.confirmedAt;\n  emit('success');\n}\n</script>\n\n<template>\n  <div>\n    <BalActionSteps\n      :actions=\"requiredActions\"\n      primaryActionType=\"createPool\"\n      :disabled=\"props.createDisabled\"\n      :isLoading=\"isLoading\"\n      :loadingLabel=\"$t('restoring')\"\n      @success=\"handleSuccess\"\n    />\n    <template v-if=\"createState.confirmed\">\n      <div\n        class=\"flex justify-between items-center mt-4 text-sm text-gray-400 dark:text-gray-600\"\n      >\n        <div class=\"flex items-center\">\n          <BalIcon name=\"clock\" />\n          <span class=\"ml-2\">\n            {{ createState.confirmedAt }}\n          </span>\n        </div>\n        <BalLink\n          :href=\"explorerLink\"\n          external\n          noStyle\n          class=\"group flex items-center\"\n        >\n          {{ networkConfig.explorerName }}\n          <BalIcon\n            name=\"arrow-up-right\"\n            size=\"sm\"\n            class=\"ml-px group-hover:text-pink-500 transition-colors\"\n          />\n        </BalLink>\n      </div>\n      <BalBtn\n        tag=\"router-link\"\n        :to=\"{ name: 'pool', params: { networkSlug, id: poolId } }\"\n        color=\"gray\"\n        outline\n        block\n        class=\"mt-2\"\n      >\n        {{ $t('viewPool') }}\n      </BalBtn>\n    </template>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport BigNumber from 'bignumber.js';\nimport { useI18n } from 'vue-i18n';\n\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\nimport CreateActions from '@/components/cards/CreatePool/CreateActions.vue';\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum, isSameAddress, shortenLabel } from '@/lib/utils';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useNetwork from '@/composables/useNetwork';\n\n/**\n * PROPS & EMITS\n */\nconst emit = defineEmits<{\n  (e: 'close'): void;\n  (e: 'success'): void;\n}>();\n\n/**\n * STATE\n */\n\nconst poolCreated = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst {\n  seedTokens,\n  poolLiquidity,\n  poolTypeString,\n  initialFee,\n  name: poolName,\n  symbol: poolSymbol,\n  useNativeAsset,\n  feeManagementType,\n  feeController,\n  thirdPartyFeeController,\n  createPoolTxHash,\n  goBack,\n  setActiveStep,\n  sortSeedTokens,\n  getAmounts,\n  saveState,\n  getPoolSymbol,\n} = usePoolCreation();\n\nconst { getToken, priceFor, nativeAsset, wrappedNativeAsset, balanceFor } =\n  useTokens();\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\nconst { account, isMismatchedNetwork } = useWeb3();\nconst { networkConfig } = useNetwork();\n\n/**\n * LIFECYCLE\n */\nonBeforeMount(() => {\n  sortSeedTokens();\n  poolName.value = poolName.value || getPoolSymbol();\n  poolSymbol.value = poolSymbol.value || getPoolSymbol();\n});\n\n/**\n * COMPUTED\n */\nconst title = computed((): string =>\n  poolCreated.value\n    ? t('poolCreated')\n    : t('previewPool', [poolTypeString.value])\n);\n\n// translations are breaking when directly using this label\nconst initialWeightLabel = computed(() => t('initialWeight'));\n\nconst tokenAddresses = computed((): string[] => {\n  return seedTokens.value.map(token => {\n    if (\n      token.tokenAddress == wrappedNativeAsset.value.address &&\n      useNativeAsset.value\n    ) {\n      return nativeAsset.address;\n    }\n    return token.tokenAddress;\n  });\n});\n\nconst tokenAmounts = computed((): string[] => {\n  return getAmounts();\n});\n\nconst hasMissingPoolNameOrSymbol = computed(() => {\n  return poolSymbol.value === '' || poolName.value === '';\n});\n\nconst actionsDisabled = computed((): boolean => {\n  return hasMissingPoolNameOrSymbol.value || isMismatchedNetwork.value;\n});\n\nconst initialWeights = computed(() => {\n  const _initialWeights: Record<string, BigNumber> = {};\n  for (const seedToken of seedTokens.value) {\n    _initialWeights[seedToken.tokenAddress] = bnum(seedToken.amount)\n      .times(priceFor(seedToken.tokenAddress))\n      .div(poolLiquidity.value);\n  }\n  return _initialWeights;\n});\n\n// an invalid initial weight is one where the the weight\n// is less than 1% of the pools value\nconst hasInvalidInitialWeight = computed(() => {\n  return Object.values(initialWeights.value).some(initialWeight =>\n    initialWeight.lt(0.01)\n  );\n});\n\nconst showNativeAssetWarning = computed(() => {\n  const nativeAssetBalance = balanceFor(nativeAsset.address);\n  const wrappedNativeAssetBalance = balanceFor(\n    wrappedNativeAsset.value.address\n  );\n\n  const seedAmount =\n    seedTokens.value.find(token =>\n      isSameAddress(token.tokenAddress, wrappedNativeAsset.value.address)\n    )?.amount || '0';\n  // when the UI is set to use the native asset and the user does\n  // not have the required native asset amount to cover the fund\n  if (useNativeAsset.value && bnum(nativeAssetBalance).lt(seedAmount)) {\n    return true;\n    // in the reverse case, if the user does not have the required\n    // wrapped amount as well\n  }\n  if (!useNativeAsset.value && bnum(wrappedNativeAssetBalance).lt(seedAmount)) {\n    return true;\n  }\n  return false;\n});\n\n/**\n * METHODS\n */\nfunction handleSuccess(): void {\n  poolCreated.value = true;\n  emit('success');\n}\n\nfunction navigateToPoolFee() {\n  setActiveStep(1);\n}\n\nfunction getSwapFeeManager() {\n  if (feeManagementType.value === 'governance') {\n    return t('balancerGovernance');\n  } else {\n    if (feeController.value === 'self') {\n      return `${t('myWallet')}: ${shortenLabel(account.value)}`;\n    } else {\n      return shortenLabel(thirdPartyFeeController.value);\n    }\n  }\n}\n\nfunction getInitialWeightHighlightClass(tokenAddress: string) {\n  return {\n    'text-secondary': initialWeights[tokenAddress]?.gte(0.01),\n    'text-orange-500': initialWeights[tokenAddress]?.lt(0.01),\n  };\n}\n</script>\n\n<template>\n  <BalStack vertical spacing=\"xs\" class=\"mb-24\">\n    <BalCard shadow=\"xl\" noBorder>\n      <BalStack vertical spacing=\"xs\">\n        <span class=\"text-xs text-secondary\">{{ networkConfig?.name }}</span>\n      </BalStack>\n      <BalStack vertical>\n        <div class=\"flex items-center mt-2\">\n          <BalCircle\n            v-if=\"poolCreated\"\n            size=\"8\"\n            color=\"green\"\n            class=\"mr-2 text-white\"\n          >\n            <BalIcon name=\"check\" />\n          </BalCircle>\n          <BalStack horizontal align=\"center\" spacing=\"xs\">\n            <button\n              class=\"flex text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\"\n              @click=\"goBack\"\n            >\n              <BalIcon class=\"flex\" name=\"chevron-left\" />\n            </button>\n\n            <h5 class=\"font-semibold dark:text-gray-300\">\n              {{ title }}\n            </h5>\n          </BalStack>\n        </div>\n        <BalCard shadow=\"none\" noPad>\n          <div class=\"p-2 bg-gray-50 dark:bg-gray-700\">\n            <h6 class=\"text-sm\">\n              {{ $t('createAPool.tokensAndSeedLiquidity') }}\n            </h6>\n          </div>\n          <BalStack vertical spacing=\"none\" withBorder>\n            <div\n              v-for=\"token in seedTokens\"\n              :key=\"`tokenpreview-${token.tokenAddress}`\"\n              class=\"p-4\"\n            >\n              <BalStack horizontal justify=\"between\">\n                <BalStack horizontal align=\"center\">\n                  <BalAsset :address=\"token.tokenAddress\" :size=\"36\" />\n                  <BalStack vertical spacing=\"none\">\n                    <span class=\"font-semibold\">\n                      {{ fNum(token.weight / 100, FNumFormats.percent) }}\n                      {{ getToken(token.tokenAddress)?.symbol }}\n                    </span>\n                    <span\n                      :class=\"[\n                        'text-sm',\n                        getInitialWeightHighlightClass(token.tokenAddress),\n                      ]\"\n                    >\n                      {{ initialWeightLabel }}:\n                      {{\n                        fNum(\n                          initialWeights[token.tokenAddress].toString(),\n                          FNumFormats.percent\n                        )\n                      }}\n                    </span>\n                  </BalStack>\n                </BalStack>\n                <BalStack vertical spacing=\"none\" align=\"end\">\n                  <span class=\"font-semibold\">\n                    {{ fNum(token.amount, FNumFormats.token) }}\n                  </span>\n                  <span class=\"text-sm text-secondary\">\n                    {{\n                      fNum(\n                        bnum(token.amount)\n                          .times(priceFor(token.tokenAddress))\n                          .toString(),\n                        FNumFormats.fiat\n                      )\n                    }}\n                  </span>\n                </BalStack>\n              </BalStack>\n            </div>\n          </BalStack>\n          <BalStack\n            horizontal\n            justify=\"between\"\n            class=\"p-4 border-t dark:border-gray-600\"\n          >\n            <h6>{{ $t('total') }}</h6>\n            <h6>\n              {{ fNum(poolLiquidity.toString(), FNumFormats.fiat) }}\n            </h6>\n          </BalStack>\n        </BalCard>\n        <BalCard shadow=\"none\" noPad>\n          <div class=\"p-2 bg-gray-50 dark:bg-gray-700\">\n            <h6 class=\"text-sm\">\n              {{ $t('summary') }}\n            </h6>\n          </div>\n          <BalStack vertical spacing=\"xs\" class=\"p-3\">\n            <BalStack horizontal justify=\"between\">\n              <span class=\"text-sm\">{{ $t('poolName') }}:</span>\n              <BalInlineInput\n                v-model=\"poolName\"\n                name=\"poolName\"\n                size=\"xs\"\n                inputAlignRight\n                @save=\"saveState\"\n              />\n            </BalStack>\n            <BalStack horizontal justify=\"between\">\n              <span class=\"text-sm\">{{ $t('poolSymbol') }}:</span>\n              <BalInlineInput\n                v-model=\"poolSymbol\"\n                name=\"poolSymbol\"\n                size=\"xs\"\n                inputAlignRight\n                @save=\"saveState\"\n              />\n            </BalStack>\n            <BalStack horizontal justify=\"between\">\n              <span class=\"text-sm\">{{ $t('poolType') }}:</span>\n              <span class=\"text-sm capitalize\">{{ poolTypeString }}</span>\n            </BalStack>\n            <BalStack horizontal justify=\"between\" class=\"mt-1\">\n              <span class=\"text-sm\">{{ $t('swapFee') }}:</span>\n              <BalStack horizontal spacing=\"sm\">\n                <span class=\"text-sm\">{{\n                  fNum(initialFee, FNumFormats.percent)\n                }}</span>\n                <button class=\"hover:text-blue-500\" @click=\"navigateToPoolFee\">\n                  <BalIcon name=\"edit\" size=\"xs\" />\n                </button>\n              </BalStack>\n            </BalStack>\n            <BalStack horizontal justify=\"between\">\n              <span class=\"text-sm\">{{ $t('swapFeeManager') }}:</span>\n              <BalStack horizontal spacing=\"sm\">\n                <span class=\"text-sm\">{{ getSwapFeeManager() }}</span>\n                <button class=\"hover:text-blue-500\" @click=\"navigateToPoolFee\">\n                  <BalIcon name=\"edit\" size=\"xs\" />\n                </button>\n              </BalStack>\n            </BalStack>\n          </BalStack>\n        </BalCard>\n        <AnimatePresence\n          :isVisible=\"hasMissingPoolNameOrSymbol\"\n          unmountInstantly\n        >\n          <BalAlert :title=\"$t('missingPoolNameOrSymbol')\" type=\"error\">\n            {{ $t('missingPoolNameOrSymbolInfo') }}\n          </BalAlert>\n        </AnimatePresence>\n        <AnimatePresence\n          :isVisible=\"hasInvalidInitialWeight && createPoolTxHash !== ''\"\n          unmountInstantly\n        >\n          <BalAlert\n            :title=\"$t('createAPool.invalidInitialWeightsTitle')\"\n            type=\"warning\"\n          >\n            {{ $t('createAPool.invalidInitialWeightsInfo') }}\n          </BalAlert>\n        </AnimatePresence>\n        <AnimatePresence :isVisible=\"showNativeAssetWarning\" unmountInstantly>\n          <BalAlert\n            :title=\"$t('createAPool.invalidInitialWeightsTitle')\"\n            type=\"warning\"\n          >\n            {{ $t('createAPool.nativeAssetWarning') }}\n          </BalAlert>\n        </AnimatePresence>\n\n        <CreateActions\n          :createDisabled=\"actionsDisabled\"\n          :tokenAddresses=\"tokenAddresses\"\n          :amounts=\"tokenAmounts\"\n          @success=\"handleSuccess\"\n        />\n      </BalStack>\n    </BalCard>\n  </BalStack>\n</template>\n","<script lang=\"ts\" setup>\nimport { orderBy, take } from 'lodash';\nimport { useI18n } from 'vue-i18n';\n\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useNetwork from '@/composables/useNetwork';\n\n/**\n * COMPOSABLES\n */\nconst { isWalletReady } = useWeb3();\nconst { networkConfig } = useNetwork();\nconst {\n  similarPools,\n  isLoadingSimilarPools,\n  existingPool,\n  setStep,\n  proceed,\n  resetPoolCreationState,\n  goBack,\n} = usePoolCreation();\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\n\n/** COMPUTED */\nconst title = computed(() => {\n  if (existingPool.value) return t('createAPool.poolAlreadyExists');\n  return t('createAPool.similarPoolsExist');\n});\n\n// limit the similar pools on the UI to the first 4 ones\n// with highest tvl\nconst relevantSimilarPools = computed(() => {\n  return take(\n    orderBy(similarPools.value, pool => Number(pool.totalLiquidity), 'desc'),\n    4\n  );\n});\n\n/**\n * FUNCTIONS\n */\nfunction cancel() {\n  resetPoolCreationState();\n  setStep(0);\n}\n</script>\n\n<template>\n  <BalCard shadow=\"xl\" noBorder :class=\"{ 'border-red-400': existingPool }\">\n    <BalStack vertical>\n      <BalStack vertical spacing=\"xs\">\n        <span\n          v-if=\"isWalletReady\"\n          class=\"text-xs text-gray-600 dark:text-gray-400\"\n          >{{ networkConfig?.name }}</span\n        >\n        <BalStack align=\"center\" horizontal spacing=\"xs\">\n          <button\n            class=\"flex text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\"\n            @click=\"goBack\"\n          >\n            <BalIcon class=\"flex\" name=\"chevron-left\" />\n          </button>\n          <h5 class=\"font-semibold dark:text-gray-300\">\n            {{ title }}\n          </h5>\n        </BalStack>\n      </BalStack>\n      <p v-if=\"existingPool\">\n        {{ $t('createAPool.existingPoolInfo') }}\n      </p>\n      <div v-if=\"isLoadingSimilarPools\" />\n      <BalCard v-else-if=\"existingPool\" shadow=\"none\">\n        <BalStack vertical>\n          <BalStack spacing=\"sm\" horizontal align=\"center\">\n            <div>\n              <BalAssetSet :width=\"35\" :addresses=\"existingPool.tokensList\" />\n            </div>\n            <TokenPills :tokens=\"existingPool.tokens\" />\n          </BalStack>\n          <BalStack horizontal spacing=\"lg\">\n            <BalStack vertical spacing=\"none\">\n              <span class=\"font-medium text-secondary\">{{\n                $t('poolValue')\n              }}</span>\n              <span class=\"font-semibold\">{{\n                fNum(existingPool.totalLiquidity, FNumFormats.fiat)\n              }}</span>\n            </BalStack>\n            <BalStack vertical spacing=\"none\">\n              <span class=\"font-medium text-secondary\">{{\n                $t('volume24hShort')\n              }}</span>\n              <span class=\"font-semibold\">{{\n                fNum(existingPool?.volumeSnapshot || '0', FNumFormats.fiat)\n              }}</span>\n            </BalStack>\n            <BalStack vertical spacing=\"none\">\n              <span class=\"font-medium capitalize text-secondary\">{{\n                $t('fees')\n              }}</span>\n              <span class=\"font-semibold\">{{\n                fNum(existingPool.swapFee, FNumFormats.percent)\n              }}</span>\n            </BalStack>\n          </BalStack>\n        </BalStack>\n      </BalCard>\n      <BalStack v-else vertical>\n        <BalCard\n          v-for=\"pool in relevantSimilarPools\"\n          :key=\"pool.id\"\n          shadow=\"none\"\n        >\n          <BalStack vertical>\n            <BalStack spacing=\"sm\" horizontal align=\"center\">\n              <div>\n                <BalAssetSet :width=\"35\" :addresses=\"pool.tokensList\" />\n              </div>\n              <TokenPills :tokens=\"pool.tokens\" />\n            </BalStack>\n            <BalStack horizontal spacing=\"xl\">\n              <BalStack vertical spacing=\"none\">\n                <span class=\"font-medium text-secondary\">{{\n                  $t('poolValue')\n                }}</span>\n                <span class=\"font-semibold\">{{\n                  fNum(pool.totalLiquidity, FNumFormats.fiat)\n                }}</span>\n              </BalStack>\n              <BalStack vertical spacing=\"none\">\n                <span class=\"font-medium text-secondary\">{{\n                  $t('volume24hShort')\n                }}</span>\n                <span class=\"font-semibold\">{{\n                  fNum(pool?.volumeSnapshot || '0', FNumFormats.fiat)\n                }}</span>\n              </BalStack>\n              <BalStack vertical spacing=\"none\">\n                <span class=\"font-medium capitalize text-secondary\">{{\n                  $t('fees')\n                }}</span>\n                <span class=\"font-semibold\">{{\n                  fNum(pool.swapFee, FNumFormats.percent)\n                }}</span>\n              </BalStack>\n            </BalStack>\n          </BalStack>\n        </BalCard>\n      </BalStack>\n      <BalAlert\n        v-if=\"!existingPool\"\n        block\n        type=\"warning\"\n        title=\"Are you sure you want to continue?\"\n      >\n        You can continue to create your pool anyway, but you’ll have to pay pool\n        creation gas costs and liquidity will be fractured which is likely to\n        result in your new pool being less profitable.\n      </BalAlert>\n      <BalStack horizontal expandChildren>\n        <BalBtn block outline color=\"black\" @click=\"cancel\">\n          {{ $t('cancel') }}\n        </BalBtn>\n        <BalBtn v-if=\"!existingPool\" block color=\"gradient\" @click=\"proceed\">\n          Continue anyway\n        </BalBtn>\n      </BalStack>\n    </BalStack>\n  </BalCard>\n</template>\n","<script lang=\"ts\" setup>\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { Pool } from '@/services/pool/types';\nimport { networkSlug } from '@/composables/useNetwork';\n\n/**\n * COMPOSABLES\n */\nconst { similarPools } = usePoolCreation();\nconst { getToken } = useTokens();\nconst { fNum } = useNumbers();\n/**\n * FUNCTIONS\n */\nfunction getPoolLabel(pool: Pool) {\n  const tokensString = pool.tokens\n    .map(\n      t =>\n        `${getToken(t.address)?.symbol} ${fNum(\n          t.weight || '0',\n          FNumFormats.percent\n        )}`\n    )\n    .join(', ');\n  return `${tokensString} (${fNum(pool.swapFee, FNumFormats.percent)} fee)`;\n}\n</script>\n\n<template>\n  <BalCard noPad shadow=\"none\">\n    <BalStack\n      spacing=\"sm\"\n      align=\"center\"\n      horizontal\n      class=\"p-2 px-3 text-orange-500 border-b dark:border-gray-600\"\n    >\n      <BalIcon class=\"mt-1\" name=\"alert-circle\" size=\"md\" />\n      <h6>{{ $t('createAPool.similarPoolsExist') }}</h6>\n    </BalStack>\n    <BalStack vertical spacing=\"sm\" class=\"p-4\">\n      <BalLink\n        v-for=\"pool in similarPools\"\n        :key=\"`similarpool-${pool.id}`\"\n        target=\"_blank\"\n        :href=\"`/#/${networkSlug}/pool/${pool.id}`\"\n      >\n        <span class=\"text-sm\">{{ getPoolLabel(pool) }}</span>\n      </BalLink>\n    </BalStack>\n  </BalCard>\n</template>\n","export default \"__VITE_ASSET__c51db293__\"","<script lang=\"ts\" setup>\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport coingecko from '@/assets/images/icons/coingecko.svg';\nimport { selectByAddress } from '@/lib/utils';\n\ntype Props = {\n  toggleUnknownPriceModal?: () => void;\n};\n\ndefineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { tokensList } = usePoolCreation();\nconst { getToken, priceFor, injectedPrices } = useTokens();\nconst { fNum } = useNumbers();\n\n/**\n * COMPUTED\n */\nconst validTokens = computed(() => tokensList.value.filter(t => t !== ''));\nconst knownTokens = computed(() =>\n  validTokens.value.filter(\n    token =>\n      priceFor(token) !== 0 && !selectByAddress(injectedPrices.value, token)\n  )\n);\nconst unknownTokens = computed(() =>\n  validTokens.value.filter(\n    token =>\n      priceFor(token) === 0 || selectByAddress(injectedPrices.value, token)\n  )\n);\nconst hasUnknownPrice = computed(() =>\n  validTokens.value.some(token => priceFor(token) === 0)\n);\n</script>\n\n<template>\n  <BalCard noPad shadow=\"none\" :noBorder=\"upToLargeBreakpoint\">\n    <div v-if=\"!upToLargeBreakpoint\" class=\"p-4 border-b dark:border-gray-600\">\n      <BalStack horizontal spacing=\"sm\" align=\"center\">\n        <h6 class=\"dark:text-gray-300\">\n          {{ $t('tokenPrices') }}\n        </h6>\n        <BalTooltip class=\"mt-1\" :text=\"$t('correctTokenPricing')\" />\n      </BalStack>\n    </div>\n    <div class=\"p-2 px-4\">\n      <BalStack vertical isDynamic spacing=\"sm\">\n        <BalStack\n          v-for=\"token in knownTokens\"\n          :key=\"`tokenPrice-known-${token}`\"\n          justify=\"between\"\n          align=\"center\"\n        >\n          <span>{{ getToken(token)?.symbol }}</span>\n          <BalStack horizontal justify=\"center\">\n            <div>\n              <div class=\"-mr-1\">\n                <span>{{ fNum(priceFor(token), FNumFormats.fiat) }}</span>\n              </div>\n            </div>\n            <img class=\"h-5\" :src=\"coingecko\" />\n          </BalStack>\n        </BalStack>\n      </BalStack>\n      <BalStack\n        vertical\n        isDynamic\n        spacing=\"xs\"\n        :class=\"{ 'mt-1': knownTokens.length }\"\n      >\n        <button\n          v-for=\"token in unknownTokens\"\n          :key=\"`tokenPrice-unknown-${token}`\"\n          :class=\"[\n            'mt-1',\n            {\n              'text-red-500 hover:text-red-700': hasUnknownPrice,\n              'hover:text-blue-500': !hasUnknownPrice,\n            },\n          ]\"\n          @click=\"toggleUnknownPriceModal\"\n        >\n          <BalStack horizontal isDynamic justify=\"between\">\n            <span\n              :class=\"[\n                'w-1/2 text-left',\n                {\n                  'font-medium':\n                    selectByAddress(injectedPrices, token) === undefined,\n                },\n              ]\"\n              >{{ getToken(token)?.symbol }}</span\n            >\n            <BalStack\n              v-if=\"selectByAddress(injectedPrices, token) !== undefined\"\n              horizontal\n              align=\"center\"\n              class=\"w-1/2 text-right\"\n            >\n              <span class=\"w-4/5 break-words\">{{\n                fNum(\n                  selectByAddress(injectedPrices, token) || 0,\n                  FNumFormats.fiat\n                )\n              }}</span>\n              <BalIcon size=\"sm\" name=\"edit\" class=\"mr-px\" />\n            </BalStack>\n            <BalStack\n              v-else\n              spacing=\"none\"\n              horizontal\n              align=\"center\"\n              class=\"w-3/4\"\n            >\n              <div class=\"justify-end w-full\">\n                <div class=\"-mr-1\">\n                  <span class=\"text-left\">{{ $t('enterAPrice') }}</span>\n                </div>\n              </div>\n              <BalIcon name=\"alert-circle\" />\n            </BalStack>\n          </BalStack>\n        </button>\n      </BalStack>\n    </div>\n  </BalCard>\n</template>\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\nimport usePoolCreation from '@/composables/pools/usePoolCreation';\nimport { useTokens } from '@/providers/tokens.provider';\nimport {\n  bnum,\n  formatWordListAsSentence,\n  isSameAddress,\n  selectByAddress,\n} from '@/lib/utils';\nimport { isLessThanOrEqualTo } from '@/lib/utils/validations';\nimport { TokenPrices } from '@/composables/queries/useTokenPricesQuery';\n\ntype Props = {\n  isVisible: boolean;\n  unknownTokens: string[];\n};\n\nconst props = withDefaults(defineProps<Props>(), {\n  isVisible: false,\n  unknownTokens: () => [],\n});\n\nconst emit = defineEmits(['close']);\n// Hundred million max price for a token\nconst PRICE_CAP = 100000000;\n\n/**\n * COMPOSABLES\n */\nconst { seedTokens } = usePoolCreation();\nconst { getToken, injectPrices } = useTokens();\nconst { t } = useI18n();\n\n/**\n * STATE\n */\n// In the moment of pool creation, there were no valid prices for some tokens.\n// The user will manually introduce those unknown prices here.\nconst userDefinedTokenPrices = ref<TokenPrices>({});\n\n/**\n * COMPUTED\n */\nconst readableUnknownTokenSymbols = computed(() => {\n  const tokenSymbols = (props.unknownTokens || []).map(\n    tokenAddress => getToken(tokenAddress)?.symbol\n  );\n  return formatWordListAsSentence(tokenSymbols, t);\n});\n\nconst isSubmitDisabled = computed(() => {\n  const noPricesEntered = props.unknownTokens.some(\n    token => selectByAddress(userDefinedTokenPrices.value, token) === undefined\n  );\n  const hasLargePrice = props.unknownTokens.some(token =>\n    bnum(selectByAddress(userDefinedTokenPrices.value, token) || '0').gt(\n      PRICE_CAP\n    )\n  );\n  return noPricesEntered || hasLargePrice;\n});\n\n/**\n * METHODS\n */\nfunction getIndexOfUnknownToken(address: string) {\n  return seedTokens.value.findIndex(token =>\n    isSameAddress(address, token.tokenAddress)\n  );\n}\n\nfunction injectUnknownPrices() {\n  injectPrices(userDefinedTokenPrices.value);\n  emit('close');\n}\n</script>\n\n<template>\n  <BalModal\n    :title=\"t('unknownTokenPrice')\"\n    :show=\"isVisible\"\n    @close=\"$emit('close')\"\n  >\n    <BalStack vertical isDynamic>\n      <p>\n        {{\n          $t('createAPool.unknownTokenPriceWarning', [\n            readableUnknownTokenSymbols,\n          ])\n        }}\n      </p>\n\n      <span class=\"font-semibold\">\n        {{ $t('createAPool.enterTokenPrice', [readableUnknownTokenSymbols]) }}\n      </span>\n      <BalStack isDynamic vertical>\n        <TokenInput\n          v-for=\"(address, i) in unknownTokens\"\n          :key=\"i\"\n          v-model:amount=\"userDefinedTokenPrices[address]\"\n          fixedToken\n          placeholder=\"$0.00\"\n          :address=\"address\"\n          :name=\"`initial-token-${\n            seedTokens[getIndexOfUnknownToken(address)].tokenAddress\n          }`\"\n          noMax\n          hideFooter\n          :rules=\"[isLessThanOrEqualTo(PRICE_CAP)]\"\n          ignoreWalletBalance\n        />\n      </BalStack>\n      <BalBtn :disabled=\"isSubmitDisabled\" @click=\"injectUnknownPrices\">\n        {{ $t('submit') }}\n      </BalBtn>\n    </BalStack>\n  </BalModal>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, nextTick, onBeforeMount, ref, watch } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport { useRoute } from 'vue-router';\n\nimport BalVerticalSteps from '@/components/_global/BalVerticalSteps/BalVerticalSteps.vue';\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\nimport ChooseWeights from '@/components/cards/CreatePool/ChooseWeights.vue';\nimport InitialLiquidity from '@/components/cards/CreatePool/InitialLiquidity.vue';\nimport PoolFees from '@/components/cards/CreatePool/PoolFees.vue';\nimport PoolSummary from '@/components/cards/CreatePool/PoolSummary.vue';\nimport PreviewPool from '@/components/cards/CreatePool/PreviewPool.vue';\nimport SimilarPools from '@/components/cards/CreatePool/SimilarPools.vue';\nimport SimilarPoolsCompact from '@/components/cards/CreatePool/SimilarPoolsCompact.vue';\nimport TokenPrices from '@/components/cards/CreatePool/TokenPrices.vue';\nimport Col3Layout from '@/components/layouts/Col3Layout.vue';\nimport UnknownTokenPriceModal from '@/components/modals/UnknownTokenPrice/UnknownTokenPriceModal.vue';\nimport usePoolCreation, {\n  POOL_CREATION_STATE_KEY,\n  POOL_CREATION_STATE_VERSION,\n} from '@/composables/pools/usePoolCreation';\nimport useAlerts from '@/composables/useAlerts';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { lsGet, selectByAddress } from '@/lib/utils';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { StepState } from '@/types';\n\n/**\n * STATE\n */\nconst isUnknownTokenModalVisible = ref(false);\nconst isLoading = ref(true);\n// const showIntroModal = ref(true);\n\n/**\n * COMPOSABLES\n */\nconst {\n  activeStep,\n  similarPools,\n  hasRestoredFromSavedState,\n  tokensList,\n  seedTokens,\n  setActiveStep,\n  setRestoredState,\n  importState,\n  resetPoolCreationState,\n  retrievePoolAddress,\n  retrievePoolDetails,\n} = usePoolCreation();\nconst { removeAlert } = useAlerts();\nconst { t } = useI18n();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { priceFor, getToken, injectTokens, injectedPrices } = useTokens();\nconst route = useRoute();\nconst { isWalletReady } = useWeb3();\n\n/**\n * LIFECYCLE\n */\nonBeforeMount(async () => {\n  removeAlert('return-to-pool-creation');\n\n  let previouslySavedState = lsGet(\n    POOL_CREATION_STATE_KEY,\n    null,\n    POOL_CREATION_STATE_VERSION\n  );\n  if (\n    activeStep.value === 0 &&\n    previouslySavedState !== null &&\n    !poolCreateTx.value\n  ) {\n    // need to make sure to inject any tokens that were chosen\n    previouslySavedState = JSON.parse(previouslySavedState);\n    importState(previouslySavedState);\n    setRestoredState(true);\n    await nextTick();\n    setActiveStep(previouslySavedState.activeStep);\n    if (previouslySavedState.createPoolTxHash) {\n      await retrievePoolAddress(previouslySavedState.createPoolTxHash);\n    }\n    // showIntroModal.value = false;\n  } else if (previouslySavedState === null) {\n    resetPoolCreationState();\n  }\n  // make sure to inject any custom tokens we cannot inject\n  // after tokens have finished loading as it will attempt to\n  // inject 'known' tokens too, as during mount, tokens are still loading\n  await injectUnknownPoolTokens();\n  isLoading.value = false;\n});\n\n/**\n * COMPUTED\n */\nconst poolCreateTx = computed(() => route.params.tx || '');\nconst doSimilarPoolsExist = computed(() => similarPools.value.length > 0);\nconst validTokens = computed(() => tokensList.value.filter(t => t !== ''));\n\nconst unknownTokens = computed(() => {\n  return validTokens.value.filter(token => {\n    return (\n      priceFor(token) === 0 || selectByAddress(injectedPrices.value, token)\n    );\n  });\n});\n\nconst hasUnknownToken = computed(() =>\n  validTokens.value.some(t => priceFor(t) === 0)\n);\n\nconst steps = computed(() => [\n  {\n    tooltip: 'Choose tokens & weights',\n    state: getStepState(0),\n    label: 1,\n  },\n  {\n    tooltip: 'Set pool fees',\n    state: getStepState(1),\n    label: 2,\n  },\n  {\n    tooltip: 'Similar pools',\n    state: StepState.Warning,\n    isVisible: doSimilarPoolsExist.value && activeStep.value === 2,\n  },\n  {\n    tooltip: 'Set initial liquidity',\n    state: getStepState(3),\n    label: 3,\n  },\n  {\n    tooltip: 'Confirm pool creation',\n    state: getStepState(4),\n    label: 4,\n  },\n]);\n\n/**\n * FUNCTIONS\n */\nfunction getStepState(idx: number) {\n  if (activeStep.value === idx) {\n    return StepState.Active;\n  } else {\n    if (activeStep.value > idx) {\n      return StepState.Completed;\n    } else {\n      return StepState.Todo;\n    }\n  }\n}\n\nfunction handleNavigate(stepIndex: number) {\n  if (hasRestoredFromSavedState.value) {\n    setRestoredState(false);\n  }\n  setActiveStep(stepIndex);\n}\n\nfunction handleReset() {\n  resetPoolCreationState();\n  setActiveStep(0);\n}\n\nfunction handleUnknownModalClose() {\n  isUnknownTokenModalVisible.value = false;\n}\n\nfunction showUnknownTokenModal() {\n  isUnknownTokenModalVisible.value = true;\n}\n\nasync function injectUnknownPoolTokens() {\n  const uninjectedTokens = seedTokens.value\n    .filter(seedToken => getToken(seedToken.tokenAddress) === undefined)\n    .map(seedToken => seedToken.tokenAddress)\n    .filter(token => token !== '');\n  await injectTokens(uninjectedTokens);\n}\n\n/**\n * WATCHERS\n */\n// can handle the behaviour to show the unknown token modal\n// on next step here, rather than having to clutter the\n// usePoolCreation composable further\nwatch(activeStep, () => {\n  if (hasUnknownToken.value && !hasRestoredFromSavedState.value) {\n    showUnknownTokenModal();\n  }\n});\n\n// we need to wait for a ready wallet before executing this\n// as we need that getProvider() call to suceed\nwatch(\n  isWalletReady,\n  async () => {\n    if (isWalletReady.value && poolCreateTx.value) {\n      await retrievePoolDetails(poolCreateTx.value as string);\n    }\n  },\n  {\n    immediate: true,\n  }\n);\n</script>\n\n<template>\n  <div>\n    <Col3Layout offsetGutters mobileHideGutters class=\"mt-8\">\n      <template #gutterLeft>\n        <div v-if=\"!upToLargeBreakpoint\" class=\"col-span-3\">\n          <BalStack vertical>\n            <BalVerticalSteps\n              title=\"Create a weighted pool steps\"\n              :steps=\"steps\"\n              @navigate=\"handleNavigate\"\n            />\n            <AnimatePresence\n              :isVisible=\"\n                doSimilarPoolsExist && activeStep === 0 && !!validTokens.length\n              \"\n            >\n              <SimilarPoolsCompact />\n            </AnimatePresence>\n          </BalStack>\n        </div>\n      </template>\n      <div class=\"relative center-col-mh\">\n        <BalAlert\n          v-if=\"!!hasRestoredFromSavedState\"\n          type=\"warning\"\n          class=\"mb-4\"\n          :title=\"$t('createAPool.recoveredState')\"\n        >\n          {{ $t('createAPool.recoveredStateInfo') }}\n\n          {{ $t('wantToStartOverInstead') }}\n          <button class=\"font-semibold text-blue-500\" @click=\"handleReset\">\n            {{ $t('clearForms') }}\n          </button>\n        </BalAlert>\n\n        <BalLoadingBlock v-if=\"isLoading\" class=\"h-64\" />\n        <ChooseWeights\n          v-else-if=\"activeStep === 0 && !hasRestoredFromSavedState\"\n        />\n        <PoolFees v-else-if=\"activeStep === 1\" />\n        <SimilarPools v-else-if=\"activeStep === 2 && similarPools.length > 0\" />\n        <InitialLiquidity v-else-if=\"!isLoading && activeStep === 3\" />\n        <PreviewPool v-else-if=\"activeStep === 4\" />\n\n        <div v-if=\"upToLargeBreakpoint\" class=\"pb-24\">\n          <BalAccordion\n            :dependencies=\"validTokens\"\n            :sections=\"[\n              { title: t('createAPool.poolSummary'), id: 'pool-summary' },\n              { title: t('tokenPrices'), id: 'token-prices' },\n            ]\"\n          >\n            <template #pool-summary>\n              <PoolSummary />\n            </template>\n            <template #token-prices>\n              <TokenPrices />\n            </template>\n          </BalAccordion>\n        </div>\n      </div>\n      <template #gutterRight>\n        <div v-if=\"!upToLargeBreakpoint\" class=\"col-span-11 lg:col-span-3\">\n          <BalStack vertical spacing=\"base\">\n            <PoolSummary />\n            <TokenPrices\n              v-if=\"validTokens.length > 0\"\n              :toggleUnknownPriceModal=\"showUnknownTokenModal\"\n            />\n          </BalStack>\n        </div>\n      </template>\n    </Col3Layout>\n    <UnknownTokenPriceModal\n      :isVisible=\"isUnknownTokenModalVisible\"\n      :unknownTokens=\"unknownTokens\"\n      @close=\"handleUnknownModalClose\"\n    />\n    <!-- <IntroModal\n      v-if=\"showIntroModal && !hasRestoredFromSavedState\"\n      @close=\"showIntroModal = false\"\n    /> -->\n  </div>\n</template>\n\n<style scoped>\n.center-col-mh {\n  min-height: 550px;\n}\n</style>\n"],"names":["props","__props","emit","__emit","visibleSteps","computed","step","stepTextClasses","getActiveClassName","StepState","stepCircleClasses","handleNavigate","state","stepIndex","classes","_class","_weight","ref","_address","lockPath","lockIcon","isLocked","getToken","useTokens","t","useI18n","hasToken","token","noTokenFoundContent","lockWeight","keepLocked","anime","onInput","event","watchEffect","emptyTokenWeight","updateTokenWeights","proceed","setTokensList","seedTokens","tokensList","totalLiquidity","hasUnlistedToken","isUnlistedToken","usePoolCreation","upToLargeBreakpoint","useBreakpoints","fNum","useNumbers","nativeAsset","isWalletReady","startConnectWithInjectedProvider","useWeb3","darkMode","useDarkMode","networkName","configService","tokenWeightListWrapper","addTokenRowElement","totalsRowElement","seedTokenElements","cardWrapper","wrapperHeight","cardWrapperHeight","tokenWeightItemHeight","zeroWeightToken","zeroWeightToken2","t2","walletLabel","showLiquidityAlert","totalAllocatedWeight","validTokens","sumBy","totalWeight","isProceedDisabled","excludedTokens","maxTokenAmountReached","progressBarColor","weightColor","watch","w","onMounted","_a","_b","animateHeight","addTokenToPool","nextTick","distributeWeights","onBeforeUpdate","handleWeightChange","weight","id","tokenWeight","handleAddressChange","address","handleLockedWeight","offset","seedTokenElement","i","newWeights","uniqueId","lockedPct","sum","pctAvailableToDistribute","bnum","unlockedWeights","evenDistributionWeight","error","isErrorDivisible","distributableError","normalisedWeights","_","evenDistributionWeight4DP","errorScaledTo4DP","addTokenListElementRef","el","handleRemoveToken","index","handleProceed","onAlertMountChange","isOptimised","networkConfig","useNetwork","balanceFor","priceFor","wrappedNativeAsset","dynamicDataLoading","scaledLiquidity","manuallySetToken","autoOptimiseBalances","currentLiquidity","isWrappedNativeAssetPool","useNativeAsset","poolLiquidity","createPoolTxHash","getOptimisedLiquidity","goBack","updateManuallySetToken","clearAmounts","setAmountsToMaxBalances","saveState","tokenAddresses","areAmountsMaxed","isExceedingWalletBalance","arbitrageDelta","totalPctDelta","initialPct","expectedPct","delta","hasZeroAmount","seedToken","onBeforeMount","setNativeAssetIfRequired","optimiseLiquidity","scaleLiquidity","force","optimisedLiquidity","toggleAutoOptimise","checkLiquidityScaling","handleMax","handleAmountChange","tokenAddress","newAddress","isSameAddress","tokenOptions","nativeAssetBalance","wrappedNativeAssetBalance","handleClearAll","saveAndProceed","FIXED_FEE_OPTIONS","isCustomFee","checkboxState","isInvalidFee","initialFee","feeController","feeManagementType","feeType","setFeeManagement","setFeeType","setFeeController","setTrpController","thirdPartyFeeController","fee","isLoadingSimilarPools","account","customInputClasses","isAddress","feeOptions","option","onFixedInput","val","onCustomInput","onChangeFeeManagementType","onChangeFeeType","onChangeFeeController","getSrc","item","getArgs","amount","format","group","sample","input","args","list","rgb","rgbToHex","number","grouping","grouped","hex","getImageData","src","resolve","reject","canvas","context","img","data","getProminent","gap","colors","_keyA","valA","_keyB","valB","process","handler","prominent","initEcharts","manualColorMap","chartInstance","updateTokenColors","hasRestoredFromSavedState","tailwind","useTailwind","useUrls","chartConfig","tokenLogoURI","colors2","calculateColors","colorPromises","color","_colors","useInputStyles","isInvalid","attrs","extPaddingClass","intPaddingClass","inputTextSize","inputHeightClass","parentClasses","inputContainerClasses","inputGroupClasses","headerClasses","footerClasses","inputClasses","prependClasses","appendClasses","borderRadiusClasses","__default__","isEditable","inputElement","useAttrs","errors","validate","useInputValidation","onKeydown","onBlur","useInputEvents","inputAttrs","omit","toggleEditable","handleBlur","e","createState","reactive","isLoading","explorerLinks","useConfig","isTxConfirmed","useEthers","createPool","joinPool","poolId","poolTypeString","needsSeeding","networkSlug","getTokenApprovalActions","useTokenApprovalActions","actions","requiredActions","action","amountsToApprove","explorerLink","isConfirmed","approvalActions","ApprovalAction","handleSuccess","details","poolCreated","poolName","poolSymbol","setActiveStep","sortSeedTokens","getAmounts","getPoolSymbol","isMismatchedNetwork","title","initialWeightLabel","tokenAmounts","hasMissingPoolNameOrSymbol","actionsDisabled","initialWeights","_initialWeights","hasInvalidInitialWeight","initialWeight","showNativeAssetWarning","seedAmount","navigateToPoolFee","getSwapFeeManager","shortenLabel","getInitialWeightHighlightClass","similarPools","existingPool","setStep","resetPoolCreationState","relevantSimilarPools","take","orderBy","pool","cancel","getPoolLabel","FNumFormats","coingecko","injectedPrices","knownTokens","selectByAddress","unknownTokens","hasUnknownPrice","PRICE_CAP","injectPrices","userDefinedTokenPrices","readableUnknownTokenSymbols","tokenSymbols","formatWordListAsSentence","isSubmitDisabled","noPricesEntered","hasLargePrice","getIndexOfUnknownToken","injectUnknownPrices","isUnknownTokenModalVisible","activeStep","setRestoredState","importState","retrievePoolAddress","retrievePoolDetails","removeAlert","useAlerts","injectTokens","route","useRoute","previouslySavedState","lsGet","POOL_CREATION_STATE_KEY","POOL_CREATION_STATE_VERSION","poolCreateTx","injectUnknownPoolTokens","doSimilarPoolsExist","hasUnknownToken","steps","getStepState","idx","handleReset","handleUnknownModalClose","showUnknownTokenModal","uninjectedTokens"],"mappings":"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","x_google_ignoreList":[5]}