{"version":3,"file":"recovery-exit-1d0f3d25.js","sources":["../../src/pages/recovery-exit/components/WithdrawalModal.vue","../../src/pages/recovery-exit/components/WithdrawalsTable.vue","../../src/services/balancer/batch-relayer/extensions/vault-actions.service.ts","../../src/services/balancer/batch-relayer/extensions/aave-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/yearn-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/reaper-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/erc4626-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/gauge-actions.service.ts","../../src/services/balancer/batch-relayer/extensions/euler-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/gearbox-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/silo-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/tetu-wrapping.service.ts","../../src/services/balancer/batch-relayer/batch-relayer.service.ts","../../src/pages/recovery-exit/components/TokenUnwrapTable.vue","../../src/pages/recovery-exit/components/UnstakeTable.vue","../../src/pages/recovery-exit/recovery-exit.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { Pool } from '@/services/pool/types';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\nimport { poolMetadata } from '@/lib/config/metadata';\n\ntype Props = {\n  pool: Pool;\n  balance: string;\n  iconAddresses: string[];\n  withdrawFn: () => Promise<TransactionResponse>;\n};\n\nconst props = defineProps<Props>();\nconst emit = defineEmits(['close', 'success']);\n\nconst { fNum } = useNumbers();\n\nconst assetRowWidth = computed(() => (props.iconAddresses.length * 32) / 1.5);\n</script>\n\n<template>\n  <BalModal show @close=\"emit('close')\">\n    <template #header>\n      <h4>Proportionally withdraw</h4>\n    </template>\n    <BalCard class=\"mb-4\">\n      <BalStack horizontal justify=\"between\" align=\"center\">\n        <BalStack vertical spacing=\"none\">\n          <h5>{{ fNum(balance) }} {{ $t('lpTokens') }}</h5>\n          <div v-if=\"poolMetadata(pool.id)?.name\" class=\"text-secondary\">\n            {{ poolMetadata(pool.id)?.name }}\n          </div>\n          <span v-else class=\"text-secondary\">\n            {{ pool.symbol }}\n          </span>\n        </BalStack>\n        <BalAssetSet\n          :addresses=\"iconAddresses\"\n          :width=\"assetRowWidth\"\n          :size=\"32\"\n        />\n      </BalStack>\n    </BalCard>\n    <p>\n      The withdraw transaction will perform a recovery exit from this pool. This\n      type of withdrawal results in zero price impact, as tokens are withdrawn\n      in the same proportions as the pool balances. If this pool contains nested\n      pool tokens, you will need to perform additional transactions to withdraw\n      from nested pools.\n    </p>\n    <template #footer>\n      <TxActionBtn\n        label=\"Withdraw\"\n        color=\"gradient\"\n        :actionFn=\"() => withdrawFn()\"\n        action=\"withdraw\"\n        :summary=\"\n          $t('transactionSummary.withdrawFromBalance', [\n            fNum(balance, FNumFormats.token),\n          ])\n        \"\n        confirmingLabel=\"Withdrawing...\"\n        block\n        @confirmed=\"emit('success')\"\n      />\n    </template>\n  </BalModal>\n</template>\n","<script lang=\"ts\" setup>\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { networkId, networkSlug } from '@/composables/useNetwork';\nimport {\n  CSP_ISSUE_POOL_IDS,\n  isHighRisk,\n} from '@/constants/pool-lists/csp-issue';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport { useQuery } from '@tanstack/vue-query';\nimport TokenService from '@/services/token/token.service';\nimport { balancerTokenLists } from '@/providers/token-lists.provider';\nimport { bnum } from '@/lib/utils';\nimport { getAddress } from '@ethersproject/address';\nimport {\n  ExitHandler,\n  ExitPoolService,\n} from '@/services/balancer/pools/exits/exit-pool.service';\nimport { ExitType } from '@/services/balancer/pools/exits/handlers/exit-pool.handler';\nimport { useUserSettings } from '@/providers/user-settings.provider';\nimport { useApp } from '@/composables/useApp';\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport { balancerAPIService } from '@/services/balancer/api/balancer-api.service';\nimport TokensWhite from '@/assets/images/icons/tokens_white.svg';\nimport TokensBlack from '@/assets/images/icons/tokens_black.svg';\nimport useDarkMode from '@/composables/useDarkMode';\nimport { poolMetadata } from '@/lib/config/metadata';\nimport {\n  fiatValueOf,\n  isStableLike,\n  orderedPoolTokens,\n  orderedTokenAddresses,\n} from '@/composables/usePoolHelpers';\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\nimport { NO_RECOVERY_EXIT_POOL_IDS } from '@/constants/pool-lists/csp-issue';\nimport WithdrawalModal from './WithdrawalModal.vue';\n\nconst tokenService = new TokenService();\n\n/**\n * PROPS & EMITS\n */\ntype Props = {\n  unstakeEvents: number;\n};\n\nconst props = defineProps<Props>();\nconst emit = defineEmits(['withdrawal']);\n\n/**\n * STATE\n */\nconst showWithdrawalModal = ref(false);\nconst activePool = ref<Pool | null>(null);\n\n/**\n * COMPOSABLES\n */\nconst { account, getSigner } = useWeb3();\nconst { slippageBsp } = useUserSettings();\nconst { transactionDeadline } = useApp();\nconst { fNum } = useNumbers();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { darkMode } = useDarkMode();\nconst router = useRouter();\n\n/**\n * COMPUTED + QUERIES\n */\nconst affectedPoolIds = computed(\n  (): string[] => CSP_ISSUE_POOL_IDS[networkId.value]\n);\n\nconst affectedPools = computed(() =>\n  affectedPoolIds.value.map(id => ({\n    id,\n    address: id.slice(0, 42),\n  }))\n);\n\nconst enableBalanceFetching = computed(() => !!account.value);\n\n// Query 1:\n// Fetches balances for all affected pools on the current network.\nconst poolBalancesQuery = useQuery(\n  ['CspExit', 'balances', { networkId, account }],\n  async () => {\n    const poolBpts = await tokenService.metadata.get(\n      affectedPools.value.map(pool => pool.address),\n      balancerTokenLists.value\n    );\n    return tokenService.balances.get(account.value, poolBpts);\n  },\n  { enabled: enableBalanceFetching }\n);\n\nconst balances = computed(() => poolBalancesQuery.data.value || {});\nconst poolsWithBalances = computed(() =>\n  affectedPools.value.filter(pool => bnum(balancerFor(pool)).gt(0))\n);\nconst enablePoolsQuery = computed(\n  () => !!poolsWithBalances.value.length && !isQueryLoading(poolBalancesQuery)\n);\n\n// Query 2:\n// Fetches only the pools that the user has a balance for from the pools API.\nconst poolsQuery = useQuery(\n  ['CspExit', 'pools', { networkId, poolsWithBalances }],\n  async () => {\n    return balancerAPIService.pools.get({\n      chainId: networkId.value,\n      first: 1000,\n      where: {\n        id: {\n          in: poolsWithBalances.value.map(p => p.id),\n        },\n      },\n    });\n  },\n  { enabled: enablePoolsQuery }\n);\n\n// This is the pools list we render.\nconst pools = computed(() => poolsQuery.data.value || []);\n\nconst isLoading = computed(\n  () => isQueryLoading(poolBalancesQuery) || isQueryLoading(poolsQuery)\n);\n\n/**\n * METHODS\n */\nfunction balancerFor(pool: { address: string }): string {\n  return balances.value[getAddress(pool.address)] || '0';\n}\n\nasync function withdraw(pool: Pool) {\n  const exitPoolService = new ExitPoolService(ref(pool));\n  exitPoolService.setExitHandler(ExitHandler.Recovery);\n  return exitPoolService.exit({\n    exitType: ExitType.GivenIn,\n    bptIn: balancerFor(pool),\n    amountsOut: [],\n    signer: getSigner(),\n    slippageBsp: slippageBsp.value,\n    tokenInfo: {},\n    approvalActions: [],\n    bptInValid: true,\n    transactionDeadline: transactionDeadline.value,\n  });\n}\n\nfunction isWithdrawDisabled(pool: Pool): boolean {\n  return !pool.isInRecoveryMode;\n}\n\nfunction iconAddresses(pool: Pool) {\n  return poolMetadata(pool.id)?.hasIcon\n    ? [pool.address]\n    : orderedTokenAddresses(pool);\n}\n\nfunction handleRowClick(pool: Pool) {\n  const route = router.resolve({\n    name: 'pool',\n    params: { id: pool.id, networkSlug },\n  });\n  window.open(route.href);\n}\n\nasync function refetchBalances() {\n  return poolBalancesQuery.refetch();\n}\n\nfunction doesNotSupportRecoveryExits(poolId: string): boolean {\n  return NO_RECOVERY_EXIT_POOL_IDS[networkId.value].includes(poolId);\n}\n\nfunction handleWithdrawal() {\n  refetchBalances();\n  emit('withdrawal');\n  closeModal();\n}\n\nfunction handleWithdrawClick(pool: Pool) {\n  activePool.value = pool;\n  showWithdrawalModal.value = true;\n}\n\nfunction closeModal() {\n  showWithdrawalModal.value = false;\n  activePool.value = null;\n}\n\n/**\n * WATCHERS\n */\nwatch(\n  () => props.unstakeEvents,\n  () => refetchBalances()\n);\n\n/**\n * TABLE DEFINITION\n */\nconst columns = ref<ColumnDefinition<Pool>[]>([\n  {\n    name: 'Icons',\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 125,\n    noGrow: true,\n  },\n  {\n    name: 'Composition',\n    id: 'poolName',\n    accessor: 'id',\n    Cell: 'poolNameCell',\n    width: 350,\n  },\n  {\n    name: 'Risk',\n    id: 'risk',\n    width: 150,\n    align: 'right',\n    noGrow: true,\n    accessor: 'risk',\n    Cell: 'riskCell',\n  },\n  {\n    name: 'Balance',\n    id: 'balance',\n    align: 'right',\n    width: 150,\n    cellClassName: 'font-numeric',\n    accessor: pool => `${fNum(balancerFor(pool), FNumFormats.token)}`,\n  },\n  {\n    name: 'Value',\n    align: 'right',\n    id: 'value',\n    width: 150,\n    cellClassName: 'font-numeric',\n    accessor: pool =>\n      fNum(fiatValueOf(pool, balancerFor(pool)), FNumFormats.fiat),\n    sortKey: pool => {\n      const value = Number(fiatValueOf(pool, balancerFor(pool)));\n      if (value === Infinity || isNaN(value)) return 0;\n      return value;\n    },\n  },\n  {\n    name: '',\n    id: 'withdraw',\n    align: 'right',\n    accessor: 'withdraw',\n    Cell: 'withdrawColumnCell',\n    width: 150,\n  },\n]);\n</script>\n\n<template>\n  <div>\n    <h4 class=\"mb-2\">\n      2. Withdraw your liquidity (this may require several transactions)\n    </h4>\n    <BalCard\n      shadow=\"lg\"\n      :square=\"upToLargeBreakpoint\"\n      :noBorder=\"upToLargeBreakpoint\"\n      noPad\n    >\n      <BalTable\n        :columns=\"columns\"\n        :data=\"pools\"\n        skeletonClass=\"h-64\"\n        :square=\"upToLargeBreakpoint\"\n        :isLoading=\"isLoading\"\n        :onRowClick=\"handleRowClick\"\n        :initialState=\"{\n          sortColumn: 'value',\n          sortDirection: 'desc',\n        }\"\n      >\n        <template #iconColumnHeader>\n          <div class=\"flex items-center\">\n            <img\n              v-if=\"darkMode\"\n              :src=\"TokensWhite\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n            <img\n              v-else\n              :src=\"TokensBlack\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n          </div>\n        </template>\n        <template #iconColumnCell=\"pool\">\n          <div v-if=\"!isLoading\" class=\"py-4 px-6\" :data-testid=\"pool?.id\">\n            <BalAssetSet :addresses=\"iconAddresses(pool)\" :width=\"100\" />\n          </div>\n        </template>\n        <template #poolNameCell=\"pool\">\n          <div v-if=\"!isLoading\" class=\"flex items-center py-4 px-6\">\n            <div v-if=\"poolMetadata(pool.id)?.name\" class=\"pr-2 text-left\">\n              {{ poolMetadata(pool.id)?.name }}\n            </div>\n            <div v-else>\n              <TokenPills\n                :tokens=\"orderedPoolTokens(pool, pool.tokens)\"\n                :isStablePool=\"isStableLike(pool.poolType)\"\n              />\n            </div>\n          </div>\n        </template>\n        <template #riskCell=\"pool\">\n          <div\n            v-if=\"!isLoading\"\n            class=\"flex justify-end items-center py-4 px-6 text-right\"\n          >\n            <BalChip v-if=\"isHighRisk(pool.id)\" label=\"High risk\" color=\"red\" />\n            <BalChip v-else label=\"Mitigated\" color=\"orange\" />\n          </div>\n        </template>\n        <template #withdrawColumnCell=\"pool\">\n          <div class=\"flex justify-end py-4 px-6\">\n            <BalBtn\n              v-if=\"doesNotSupportRecoveryExits(pool.id)\"\n              tag=\"a\"\n              color=\"gradient\"\n              size=\"sm\"\n              :href=\"`/#/${networkSlug}/pool/${pool.id}/withdraw`\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              @click.stop\n            >\n              Withdraw\n              <BalIcon name=\"arrow-up-right\" size=\"sm\" />\n            </BalBtn>\n            <BalBtn\n              v-else\n              color=\"gradient\"\n              size=\"sm\"\n              :disabled=\"isWithdrawDisabled(pool)\"\n              @click.stop=\"handleWithdrawClick(pool)\"\n            >\n              Withdraw\n            </BalBtn>\n          </div>\n        </template>\n      </BalTable>\n    </BalCard>\n\n    <WithdrawalModal\n      v-if=\"showWithdrawalModal && activePool\"\n      :pool=\"activePool\"\n      :balance=\"balancerFor(activePool)\"\n      :iconAddresses=\"iconAddresses(activePool)\"\n      :withdrawFn=\"() => withdraw(activePool as Pool)\"\n      @close=\"closeModal\"\n      @success=\"handleWithdrawal\"\n    />\n  </div>\n</template>\n","import { Interface } from '@ethersproject/abi';\nimport VaultActionsAbi from '../abi/VaultActions.json';\nimport {\n  EncodeBatchSwapInput,\n  EncodeExitPoolInput,\n  EncodeJoinPoolInput,\n  ExitPoolData,\n} from '../relayer-types';\nimport { ExitPoolRequest } from '@feeless/sdk';\n\nexport class VaultActionsService {\n  public encodeBatchSwap(params: EncodeBatchSwapInput): string {\n    const relayerLibrary = new Interface(VaultActionsAbi);\n\n    return relayerLibrary.encodeFunctionData('batchSwap', [\n      params.swapType,\n      params.swaps,\n      params.assets,\n      params.funds,\n      params.limits,\n      params.deadline,\n      params.value,\n      params.outputReferences,\n    ]);\n  }\n\n  public encodeExitPool(params: EncodeExitPoolInput): string {\n    const relayerLibrary = new Interface(VaultActionsAbi);\n\n    return relayerLibrary.encodeFunctionData('exitPool', [\n      params.poolId,\n      params.poolKind,\n      params.sender,\n      params.recipient,\n      params.exitPoolRequest,\n      params.outputReferences,\n    ]);\n  }\n\n  public encodeJoinPool(params: EncodeJoinPoolInput): string {\n    const relayerLibrary = new Interface(VaultActionsAbi);\n\n    return relayerLibrary.encodeFunctionData('joinPool', [\n      params.poolId,\n      params.poolKind,\n      params.sender,\n      params.recipient,\n      params.joinPoolRequest,\n      params.value,\n      params.outputReference,\n    ]);\n  }\n\n  public constructExitCall(params: ExitPoolData): string {\n    const {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n    } = params;\n\n    const exitPoolRequest: ExitPoolRequest = {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    };\n\n    const exitPoolInput: EncodeExitPoolInput = {\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n      exitPoolRequest,\n    };\n\n    return this.encodeExitPool(exitPoolInput);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport aaveWrappingAbi from '../abi/AaveWrapping.json';\nimport { EncodeUnwrapAaveStaticTokenInput } from '../relayer-types';\n\nexport class AaveWrappingService {\n  public encodeUnwrap(params: EncodeUnwrapAaveStaticTokenInput): string {\n    const aaveWrappingLibrary = new Interface(aaveWrappingAbi);\n\n    return aaveWrappingLibrary.encodeFunctionData('unwrapAaveStaticToken', [\n      params.staticToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.toUnderlying,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport YearnWrappingAbi from '../abi/YearnWrapping.json';\nimport { EncodeUnwrapYearnVaultTokenInput } from '../relayer-types';\n\nexport class YearnWrappingService {\n  public encodeWrap(params: EncodeUnwrapYearnVaultTokenInput): string {\n    const yearnWrappingLibrary = new Interface(YearnWrappingAbi);\n\n    return yearnWrappingLibrary.encodeFunctionData('wrapYearnVaultToken', [\n      params.vaultToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n\n  public encodeUnwrap(params: EncodeUnwrapYearnVaultTokenInput): string {\n    const yearnWrappingLibrary = new Interface(YearnWrappingAbi);\n\n    return yearnWrappingLibrary.encodeFunctionData('unwrapYearnVaultToken', [\n      params.vaultToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport ReaperWrappingAbi from '../abi/ReaperWrapping.json';\nimport {\n  EncodeWrapReaperVaultTokenInput,\n  EncodeUnwrapReaperVaultTokenInput,\n} from '../relayer-types';\n\nexport class ReaperWrappingService {\n  public encodeWrap(params: EncodeWrapReaperVaultTokenInput): string {\n    const reaperWrappingLibrary = new Interface(ReaperWrappingAbi);\n\n    return reaperWrappingLibrary.encodeFunctionData('wrapReaperVaultToken', [\n      params.vaultToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n\n  public encodeUnwrap(params: EncodeUnwrapReaperVaultTokenInput): string {\n    const reaperWrappingLibrary = new Interface(ReaperWrappingAbi);\n\n    return reaperWrappingLibrary.encodeFunctionData('unwrapReaperVaultToken', [\n      params.vaultToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport Erc4626WrappingAbi from '../abi/Erc4626Wrapping.json';\nimport {\n  EncodeUnwrapErc4626Input,\n  EncodeWrapErc4626Input,\n} from '../relayer-types';\n\nexport class Erc4626WrappingService {\n  public encodeWrap(params: EncodeWrapErc4626Input): string {\n    const erc4626WrappingLibrary = new Interface(Erc4626WrappingAbi);\n\n    return erc4626WrappingLibrary.encodeFunctionData('wrapERC4626', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n\n  public encodeUnwrap(params: EncodeUnwrapErc4626Input): string {\n    const erc4626WrappingLibrary = new Interface(Erc4626WrappingAbi);\n\n    return erc4626WrappingLibrary.encodeFunctionData('unwrapERC4626', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport GaugeActionsAbi from '../abi/GaugeActions.json';\nimport { EncodeGaugeDepositInput } from '../relayer-types';\n\nexport class GaugeActionsService {\n  public encodeDeposit(params: EncodeGaugeDepositInput): string {\n    const gaugeActionsLibrary = new Interface(GaugeActionsAbi);\n\n    return gaugeActionsLibrary.encodeFunctionData('gaugeDeposit', [\n      params.gauge,\n      params.sender,\n      params.recipient,\n      params.amount,\n    ]);\n  }\n\n  public encodeWithdraw(params: EncodeGaugeDepositInput): string {\n    const gaugeActionsLibrary = new Interface(GaugeActionsAbi);\n\n    return gaugeActionsLibrary.encodeFunctionData('gaugeWithdraw', [\n      params.gauge,\n      params.sender,\n      params.recipient,\n      params.amount,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport BatchRelayerLibraryAbi from '../abi/BatchRelayerLibrary.json';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport class EulerWrappingService {\n  public encodeUnwrap(params: {\n    wrappedToken: string;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n    outputReference: BigNumberish;\n  }): string {\n    const batchRelayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return batchRelayerLibrary.encodeFunctionData('unwrapEuler', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport BatchRelayerLibraryAbi from '../abi/BatchRelayerLibrary.json';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport class GearboxWrappingService {\n  public encodeUnwrap(params: {\n    wrappedToken: string;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n    outputReference: BigNumberish;\n  }): string {\n    const batchRelayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return batchRelayerLibrary.encodeFunctionData('unwrapGearbox', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport BatchRelayerLibraryAbi from '../abi/BatchRelayerLibrary.json';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport class SiloWrappingService {\n  public encodeUnwrap(params: {\n    wrappedToken: string;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n    outputReference: BigNumberish;\n  }): string {\n    const batchRelayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return batchRelayerLibrary.encodeFunctionData('unwrapShareToken', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport BatchRelayerLibraryAbi from '../abi/BatchRelayerLibrary.json';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport class TetuWrappingService {\n  public encodeUnwrap(params: {\n    wrappedToken: string;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n    outputReference: BigNumberish;\n  }): string {\n    const batchRelayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return batchRelayerLibrary.encodeFunctionData('unwrapTetu', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { VaultActionsService } from './extensions/vault-actions.service';\nimport { AaveWrappingService } from './extensions/aave-wrapping.service';\nimport { YearnWrappingService } from './extensions/yearn-wrapping.service';\nimport {\n  EncodeGaugeDepositInput,\n  EncodeGaugeWithdrawInput,\n  EncodeReaperUnwrapInput,\n  EncodeReaperWrapInput,\n  EncodeUnwrapErc4626Input,\n  EncodeWrapErc4626Input,\n} from './relayer-types';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { ReaperWrappingService } from './extensions/reaper-wrapping.service';\nimport { Erc4626WrappingService } from './extensions/erc4626-wrapping.service';\nimport { GaugeActionsService } from './extensions/gauge-actions.service';\nimport BatchRelayerLibraryAbi from './abi/BatchRelayerLibrary.json';\nimport BatchRelayerAbi from './abi/BatchRelayer.json';\nimport { Interface } from '@ethersproject/abi';\nimport { JsonRpcSigner } from '@ethersproject/providers';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { EulerWrappingService } from '@/services/balancer/batch-relayer/extensions/euler-wrapping.service';\nimport { GearboxWrappingService } from '@/services/balancer/batch-relayer/extensions/gearbox-wrapping.service';\nimport { SiloWrappingService } from '@/services/balancer/batch-relayer/extensions/silo-wrapping.service';\nimport { TetuWrappingService } from '@/services/balancer/batch-relayer/extensions/tetu-wrapping.service';\n\nexport enum LinearPoolType {\n  AaveLinear = 'AaveLinear',\n  EulerLinear = 'EulerLinear',\n  ERC4626Linear = 'ERC4626Linear',\n  BeefyLinear = 'BeefyLinear',\n  GearboxLinear = 'GearboxLinear',\n  MidasLinear = 'MidasLinear',\n  ReaperLinear = 'ReaperLinear',\n  SiloLinear = 'SiloLinear',\n  TetuLinear = 'TetuLinear',\n  YearnLinear = 'YearnLinear',\n}\n\nexport class BatchRelayerService {\n  private readonly CHAINED_REFERENCE_PREFIX = 'ba11';\n  private readonly TEMP_CHAINED_REFERENCE_PREFIX = 'ba10';\n  private readonly vaultActionsService: VaultActionsService;\n  private readonly aaveWrappingService: AaveWrappingService;\n  private readonly yearnWrappingService: YearnWrappingService;\n  private readonly reaperWrappingService: ReaperWrappingService;\n  private readonly erc4626WrappingService: Erc4626WrappingService;\n  private readonly eulerWrappingService: EulerWrappingService;\n  private readonly gearboxWrappingService: GearboxWrappingService;\n  private readonly siloWrappingService: SiloWrappingService;\n  private readonly tetuWrappingService: TetuWrappingService;\n  private readonly gaugeStakingService: GaugeActionsService;\n\n  constructor() {\n    this.vaultActionsService = new VaultActionsService();\n    this.aaveWrappingService = new AaveWrappingService();\n    this.yearnWrappingService = new YearnWrappingService();\n    this.reaperWrappingService = new ReaperWrappingService();\n    this.erc4626WrappingService = new Erc4626WrappingService();\n    this.eulerWrappingService = new EulerWrappingService();\n    this.gearboxWrappingService = new GearboxWrappingService();\n    this.siloWrappingService = new SiloWrappingService();\n    this.tetuWrappingService = new TetuWrappingService();\n    this.gaugeStakingService = new GaugeActionsService();\n  }\n\n  public toChainedReference(key: BigNumberish): BigNumber {\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${this.TEMP_CHAINED_REFERENCE_PREFIX}${'0'.repeat(\n      64 - this.TEMP_CHAINED_REFERENCE_PREFIX.length\n    )}`;\n    return BigNumber.from(paddedPrefix).add(key);\n  }\n\n  public toPersistentChainedReference(key: BigNumberish): BigNumber {\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${this.CHAINED_REFERENCE_PREFIX}${'0'.repeat(\n      64 - this.CHAINED_REFERENCE_PREFIX.length\n    )}`;\n    return BigNumber.from(paddedPrefix).add(key);\n  }\n\n  public encodePeekChainedReferenceValue(reference: BigNumberish): string {\n    const relayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return relayerLibrary.encodeFunctionData('peekChainedReferenceValue', [\n      reference,\n    ]);\n  }\n\n  public gaugeEncodeDeposit(params: EncodeGaugeDepositInput): string {\n    return this.gaugeStakingService.encodeDeposit(params);\n  }\n\n  public gaugeEncodeWithdraw(params: EncodeGaugeWithdrawInput): string {\n    return this.gaugeStakingService.encodeWithdraw(params);\n  }\n\n  public reaperEncodeWrap(params: EncodeReaperWrapInput): string {\n    return this.reaperWrappingService.encodeWrap(params);\n  }\n\n  public reaperEncodeUnwrap(params: EncodeReaperUnwrapInput): string {\n    return this.reaperWrappingService.encodeUnwrap(params);\n  }\n\n  public erc4626EncodeWrap(params: EncodeWrapErc4626Input): string {\n    return this.erc4626WrappingService.encodeWrap(params);\n  }\n\n  public erc4626EncodeUnwrap(params: EncodeUnwrapErc4626Input): string {\n    return this.erc4626WrappingService.encodeUnwrap(params);\n  }\n\n  public unwrapLinearPoolWrappedToken({\n    signer,\n    batchRelayerAddress,\n    wrappedToken,\n    poolType,\n    sender,\n    recipient,\n    amount,\n  }: {\n    signer: JsonRpcSigner;\n    batchRelayerAddress: string;\n    wrappedToken: string;\n    poolType: LinearPoolType;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n  }) {\n    const txBuilder = new TransactionBuilder(signer);\n    let call = '';\n\n    if (\n      poolType === LinearPoolType.ReaperLinear ||\n      poolType === LinearPoolType.BeefyLinear\n    ) {\n      call = this.reaperEncodeUnwrap({\n        vaultToken: wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.ERC4626Linear) {\n      call = this.erc4626EncodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.AaveLinear) {\n      call = this.aaveWrappingService.encodeUnwrap({\n        staticToken: wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n        toUnderlying: true,\n      });\n    } else if (poolType === LinearPoolType.YearnLinear) {\n      call = this.yearnWrappingService.encodeUnwrap({\n        vaultToken: wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.EulerLinear) {\n      call = this.eulerWrappingService.encodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.TetuLinear) {\n      call = this.tetuWrappingService.encodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.GearboxLinear) {\n      call = this.gearboxWrappingService.encodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.SiloLinear) {\n      call = this.siloWrappingService.encodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else {\n      throw new Error(\n        'unwrapLinearPoolWrappedToken: Unsupported linear pool type'\n      );\n    }\n\n    const batchRelayerInterface = new Interface(BatchRelayerAbi);\n\n    return txBuilder.raw.sendTransaction({\n      to: batchRelayerAddress,\n      data: batchRelayerInterface.encodeFunctionData('multicall', [[call]]),\n    });\n  }\n}\n","<script lang=\"ts\" setup>\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\nimport useGraphQuery from '@/composables/queries/useGraphQuery';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useDarkMode from '@/composables/useDarkMode';\nimport { networkId } from '@/composables/useNetwork';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { bnum, isSameAddress } from '@/lib/utils';\nimport { balancerTokenLists } from '@/providers/token-lists.provider';\nimport { configService } from '@/services/config/config.service';\nimport TokenService from '@/services/token/token.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TokenInfo, TokenInfoMap } from '@/types/TokenList';\nimport { getAddress } from '@ethersproject/address';\nimport { useQuery } from '@tanstack/vue-query';\nimport TokensWhite from '@/assets/images/icons/tokens_white.svg';\nimport TokensBlack from '@/assets/images/icons/tokens_black.svg';\nimport BalAsset from '@/components/_global/BalAsset/BalAsset.vue';\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\nimport { pickBy, uniqBy } from 'lodash';\nimport {\n  BatchRelayerService,\n  LinearPoolType,\n} from '@/services/balancer/batch-relayer/batch-relayer.service';\nimport { parseUnits } from '@ethersproject/units';\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\nimport { ApprovalAction } from '@/composables/approvals/types';\nimport useRelayerApproval, {\n  RelayerType,\n} from '@/composables/approvals/useRelayerApproval';\n\nconst tokenService = new TokenService();\n\nconst TOKENS_TO_EXCLUDE = [\n  '0xa0d3707c569ff8c87fa923d3823ec5d81c98be78', // iETHv2 (Speak to Rab for context)\n];\n\n/**\n * TYPES\n */\ntype PoolsQueryResponse = {\n  pools: {\n    id: string;\n    wrappedIndex: string;\n    factory: string;\n    poolType: string;\n    tokens: {\n      address: string;\n      index: string;\n    }[];\n  }[];\n};\n\ntype Props = {\n  withdrawalEvents: number;\n};\n\n/**\n * Props\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { account, explorerLinks, getSigner } = useWeb3();\nconst { fNum } = useNumbers();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { darkMode } = useDarkMode();\nconst { approveToken } = useTokenApprovalActions();\nconst { relayerApprovalTx } = useRelayerApproval(RelayerType.BATCH);\n\n/**\n * COMPUTED + QUERIES\n */\n// Query 1:\n// Fetch all linear pools for the current network and get the wrapped token\n// index + address.\nconst linearPoolsQuery = useGraphQuery<PoolsQueryResponse>(\n  configService.network.subgraph,\n  ['tokenUnwrap', 'pools', { networkId }],\n  () => ({\n    pools: {\n      __args: {\n        first: 1000,\n        where: {\n          poolType_contains: 'Linear',\n        },\n      },\n      id: true,\n      wrappedIndex: true,\n      factory: true,\n      poolType: true,\n      tokens: {\n        address: true,\n        index: true,\n      },\n    },\n  }),\n  {\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  }\n);\n\nconst allLineaPools = computed(() => linearPoolsQuery.data.value?.pools ?? []);\nconst allWrappedTokensWithType = computed(\n  (): { wrapped: string; poolType: string }[] =>\n    uniqBy(\n      allLineaPools.value.map(pool => ({\n        wrapped: (\n          pool.tokens.find(token => token.index === pool.wrappedIndex) ||\n          pool.tokens[pool.wrappedIndex]\n        )?.address as string,\n        poolType: pool.poolType,\n      })),\n      'wrapped'\n    )\n);\nconst enableTokenQuery = computed(\n  (): boolean => allWrappedTokensWithType.value.length > 0\n);\n\n// Query 2:\n// Fetch metadata for all wrapped token addresses provided by query 1.\nconst tokensQuery = useQuery(\n  [\n    'tokenUnwrap',\n    'tokens',\n    {\n      networkId,\n      allWrappedTokenAddressesWithFactory: allWrappedTokensWithType,\n    },\n  ],\n  async () =>\n    tokenService.metadata.get(\n      allWrappedTokensWithType.value\n        .map(item => item.wrapped)\n        .filter(address => !TOKENS_TO_EXCLUDE.includes(address.toLowerCase())),\n      balancerTokenLists.value\n    ),\n  { enabled: enableTokenQuery }\n);\n\nconst tokens = computed((): TokenInfoMap => tokensQuery.data.value ?? {});\nconst enableBalancesQuery = computed(\n  (): boolean => Object.keys(tokens.value).length > 0 && !!account.value\n);\n\n// Query 3:\n// Fetch user balances for all wrapped token addresses provided by query 1.\nconst balancesQuery = useQuery(\n  ['tokenUnwrap', 'balances', { networkId, tokens }],\n  async () => tokenService.balances.get(account.value, tokens.value),\n  { enabled: enableBalancesQuery }\n);\n\nconst balances = computed(() => balancesQuery.data.value || {});\nconst enableAllowancesQuery = computed((): boolean =>\n  Object.values(balances.value).some(amount => bnum(amount).gt(0))\n);\n\n// Query 4:\n// Fetch user allowances for tokens with balance for the vault and relayer.\nconst allowancesQuery = useQuery(\n  ['tokenUnwrap', 'allowances', { networkId, balances }],\n  async () =>\n    tokenService.allowances.get(\n      account.value,\n      [configService.network.addresses.vault],\n      tokens.value\n    ),\n  { enabled: enableAllowancesQuery }\n);\n\nconst allowances = computed(() => allowancesQuery.data.value || {});\n\nconst isLoading = computed(\n  (): boolean =>\n    isQueryLoading(linearPoolsQuery) ||\n    isQueryLoading(tokensQuery) ||\n    isQueryLoading(balancesQuery) ||\n    isQueryLoading(allowancesQuery)\n);\n\nconst tokensWithBalance = computed(\n  (): TokenInfoMap =>\n    pickBy(tokens.value, token => bnum(balancerFor(token.address)).gt(0))\n);\n\n// The list of tokens to display in the table.\nconst tokensList = computed(() => Object.values(tokensWithBalance.value));\n\n/**\n * METHODS\n */\nasync function unwrap(token: TokenInfo) {\n  const signer = getSigner();\n  const batchRelayerService = new BatchRelayerService();\n\n  const item = allWrappedTokensWithType.value.find(item =>\n    isSameAddress(item.wrapped, token.address)\n  );\n  const amount = parseUnits(balancerFor(item?.wrapped || ''), token.decimals);\n\n  return batchRelayerService.unwrapLinearPoolWrappedToken({\n    signer,\n    batchRelayerAddress: configService.network.addresses.batchRelayer,\n    wrappedToken: item?.wrapped || '',\n    poolType: item?.poolType as LinearPoolType,\n    sender: account.value,\n    recipient: account.value,\n    amount,\n  });\n}\n\nasync function approve(token: TokenInfo) {\n  return approveToken({\n    token,\n    normalizedAmount: balancerFor(token.address),\n    spender: configService.network.addresses.vault,\n    actionType: ApprovalAction.Unwrapping,\n  });\n}\n\nfunction balancerFor(address: string): string {\n  return balances.value[getAddress(address)];\n}\n\nfunction allowanceFor(address: string): string {\n  return (\n    allowances.value?.[configService.network.addresses.vault]?.[\n      getAddress(address)\n    ] ?? '0'\n  );\n}\n\nfunction handleRowClick(token: TokenInfo) {\n  window.open(explorerLinks.addressLink(token.address));\n}\n\nfunction unwrapDisabled(token): boolean {\n  return bnum(balancerFor(token.address)).lte(0);\n}\n\nfunction requiresApproval(token: TokenInfo): boolean {\n  return bnum(allowanceFor(token.address)).lt(balancerFor(token.address));\n}\n\n/**\n * WATCHERS\n */\nwatch(\n  () => props.withdrawalEvents,\n  () => balancesQuery.refetch()\n);\n\n/**\n * TABLE DEFINITION\n */\nconst columns = computed((): ColumnDefinition<TokenInfo>[] => [\n  {\n    name: 'Icons',\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 100,\n    noGrow: true,\n  },\n  {\n    name: 'Token',\n    id: 'token',\n    width: 150,\n    className: 'px-0',\n    accessor: token => token.symbol,\n  },\n  {\n    name: 'Balance',\n    id: 'balance',\n    align: 'right',\n    width: 150,\n    cellClassName: 'font-numeric',\n    accessor: token => `${fNum(balancerFor(token.address), FNumFormats.token)}`,\n    sortKey: token => {\n      const value = Number(balancerFor(token.address));\n      if (value === Infinity || isNaN(value)) return 0;\n      return value;\n    },\n  },\n  {\n    name: '',\n    id: 'unwrap',\n    align: 'right',\n    accessor: 'unwrap',\n    Cell: 'unwrapColumnCell',\n    width: upToLargeBreakpoint.value ? 200 : 100,\n  },\n]);\n</script>\n\n<template>\n  <div>\n    <h4 class=\"mb-2\">3. Unwrap your tokens</h4>\n    <BalCard\n      shadow=\"lg\"\n      :square=\"upToLargeBreakpoint\"\n      :noBorder=\"upToLargeBreakpoint\"\n      noPad\n    >\n      <BalTable\n        :columns=\"columns\"\n        :data=\"tokensList\"\n        skeletonClass=\"h-64\"\n        :square=\"upToLargeBreakpoint\"\n        :isLoading=\"isLoading\"\n        :onRowClick=\"handleRowClick\"\n        :initialState=\"{\n          sortColumn: 'balance',\n          sortDirection: 'desc',\n        }\"\n      >\n        <template #iconColumnHeader>\n          <div class=\"flex items-center\">\n            <img\n              v-if=\"darkMode\"\n              :src=\"TokensWhite\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n            <img\n              v-else\n              :src=\"TokensBlack\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n          </div>\n        </template>\n        <template #iconColumnCell=\"token\">\n          <div v-if=\"!isLoading\" class=\"py-4 px-6 text-left\">\n            <BalAsset\n              :address=\"token.address\"\n              :iconURI=\"token.logoURI\"\n              :size=\"28\"\n            />\n          </div>\n        </template>\n        <template #unwrapColumnCell=\"token\">\n          <div class=\"flex justify-end py-4 px-6\">\n            <TxActionBtn\n              v-if=\"requiresApproval(token)\"\n              label=\"Approve Vault\"\n              color=\"gradient\"\n              size=\"sm\"\n              :actionFn=\"() => approve(token)\"\n              action=\"approve\"\n              :summary=\"fNum(balancerFor(token.address), FNumFormats.token)\"\n              :confirmingLabel=\"`Approving...`\"\n              disableNotification\n              :disabled=\"allowancesQuery.isRefetching.value\"\n              @confirmed=\"allowancesQuery.refetch()\"\n            />\n            <TxActionBtn\n              v-else-if=\"!relayerApprovalTx.isUnlocked.value\"\n              label=\"Approve Relayer\"\n              color=\"gradient\"\n              size=\"sm\"\n              :actionFn=\"() => relayerApprovalTx.approve()\"\n              action=\"approve\"\n              :summary=\"fNum(balancerFor(token.address), FNumFormats.token)\"\n              :confirmingLabel=\"`Approving...`\"\n              disableNotification\n              :disabled=\"relayerApprovalTx.loading.value\"\n            />\n            <TxActionBtn\n              v-else\n              label=\"Unwrap\"\n              color=\"gradient\"\n              size=\"sm\"\n              :actionFn=\"() => unwrap(token)\"\n              action=\"unwrap\"\n              :summary=\"fNum(balancerFor(token.address), FNumFormats.token)\"\n              :confirmingLabel=\"`Unwrapping...`\"\n              :disabled=\"unwrapDisabled(token)\"\n              @confirmed=\"balancesQuery.refetch()\"\n            />\n          </div>\n        </template>\n      </BalTable>\n    </BalCard>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\nimport useGraphQuery from '@/composables/queries/useGraphQuery';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useDarkMode from '@/composables/useDarkMode';\nimport { networkId } from '@/composables/useNetwork';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { bnum } from '@/lib/utils';\nimport { configService } from '@/services/config/config.service';\nimport TokenService from '@/services/token/token.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TokenInfo, TokenInfoMap } from '@/types/TokenList';\nimport { getAddress } from '@ethersproject/address';\nimport { useQuery } from '@tanstack/vue-query';\nimport TokensWhite from '@/assets/images/icons/tokens_white.svg';\nimport TokensBlack from '@/assets/images/icons/tokens_black.svg';\nimport BalAsset from '@/components/_global/BalAsset/BalAsset.vue';\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\nimport { keyBy, merge, pickBy } from 'lodash';\nimport {\n  CSP_ISSUE_POOL_IDS,\n  isHighRisk,\n} from '@/constants/pool-lists/csp-issue';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { Interface } from '@ethersproject/abi';\nimport { parseUnits } from '@ethersproject/units';\n\nconst tokenService = new TokenService();\n\nconst balancerChildChainGaugeABi = [\n  {\n    stateMutability: 'nonpayable',\n    type: 'function',\n    name: 'withdraw',\n    inputs: [{ name: '_value', type: 'uint256' }],\n    outputs: [],\n  },\n];\n\nconst auraBaseRewardPool4626Abi = [\n  {\n    inputs: [{ internalType: 'bool', name: 'claim', type: 'bool' }],\n    name: 'withdrawAllAndUnwrap',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n\n/**\n * TYPES\n */\ntype LiquidityGaugesQueryResponse = {\n  liquidityGauges: {\n    id: string;\n    symbol: string;\n    poolId: string;\n    poolAddress: string;\n  }[];\n};\n\ntype AuraGaugesQueryResponse = {\n  pools: {\n    id: string;\n    poolId: string;\n    address: string;\n    name: string;\n    lpToken: {\n      address: string;\n    };\n  }[];\n};\n\n/**\n * PROPS & EMITS\n */\nconst emit = defineEmits(['unstaked']);\n\n/**\n * COMPOSABLES\n */\nconst { account, explorerLinks, getSigner } = useWeb3();\nconst { fNum } = useNumbers();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { darkMode } = useDarkMode();\n\nconst poolIds = computed((): string[] => CSP_ISSUE_POOL_IDS[networkId.value]);\nconst poolAddresses = computed(() => poolIds.value.map(id => id.slice(0, 42)));\nconst addressToPoolIdMap = computed(\n  () => new Map(poolIds.value.map(id => [id.slice(0, 42), id]))\n);\n\nconst enableBalanceFetching = computed(() => !!account.value);\n\nconst liquidityGaugesQuery = useGraphQuery<LiquidityGaugesQueryResponse>(\n  configService.network.subgraphs.gauge,\n  ['vulnerability', 'liquidityGauges', 'unstake', { networkId }],\n  () => ({\n    liquidityGauges: {\n      __args: { first: 1000, where: { poolId_in: poolIds.value } },\n      id: true,\n      symbol: true,\n      poolId: true,\n      poolAddress: true,\n    },\n  }),\n  {\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  }\n);\n\nconst auraGaugesQuery = useGraphQuery<AuraGaugesQueryResponse>(\n  'https://data.aura.finance/graphql',\n  ['vulnerability', 'auraGauges', 'unstake', { networkId }],\n  () => ({\n    pools: {\n      __args: { chainId: networkId.value },\n      id: true,\n      poolId: true,\n      address: true,\n      name: true,\n      lpToken: {\n        address: true,\n      },\n    },\n  }),\n  {\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  }\n);\n\nconst allLiquidityGauges = computed(\n  () => liquidityGaugesQuery.data.value?.liquidityGauges ?? []\n);\nconst allLiquidityGaugesAsTokenInfoMap = computed((): TokenInfoMap => {\n  const tokens = allLiquidityGauges.value.map(gauge => ({\n    chainId: networkId.value,\n    address: gauge.id,\n    decimals: 18,\n    symbol: gauge.symbol,\n    name: gauge.symbol,\n    tags: ['balancer'],\n  }));\n\n  return keyBy(tokens, 'address');\n});\n\nconst allAuraGauges = computed(() =>\n  (auraGaugesQuery.data.value?.pools ?? []).filter(pool =>\n    poolAddresses.value.includes(pool.lpToken.address)\n  )\n);\nconst allAuraGaugesAsTokenInfoMap = computed((): TokenInfoMap => {\n  const tokens = allAuraGauges.value.map(gauge => ({\n    chainId: networkId.value,\n    address: gauge.address,\n    decimals: 18,\n    symbol: gauge.name,\n    name: gauge.name,\n    tags: ['aura'],\n  }));\n\n  return keyBy(tokens, 'address');\n});\n\nconst allGaugesAsTokenInfoMap = computed(\n  (): TokenInfoMap =>\n    merge(\n      allAuraGaugesAsTokenInfoMap.value,\n      allLiquidityGaugesAsTokenInfoMap.value\n    )\n);\n\nconst enableBalancesQuery = computed(\n  () =>\n    enableBalanceFetching.value &&\n    (allLiquidityGauges.value.length > 0 || allAuraGauges.value.length > 0)\n);\n\n// Fetch user balances for all gauges.\nconst balancesQuery = useQuery(\n  [\n    'vulnerability',\n    'unstake',\n    'balances',\n    { networkId, allLiquidityGauges, allAuraGauges },\n  ],\n  async () =>\n    tokenService.balances.get(account.value, allGaugesAsTokenInfoMap.value),\n  { enabled: enableBalancesQuery }\n);\n\nconst balances = computed(() => balancesQuery.data.value || {});\n\nconst isLoading = computed(\n  (): boolean =>\n    isQueryLoading(liquidityGaugesQuery) || isQueryLoading(balancesQuery)\n);\n\nconst tokensWithBalance = computed(\n  (): TokenInfoMap =>\n    pickBy(allGaugesAsTokenInfoMap.value, token =>\n      bnum(balancerFor(token.address)).gt(0)\n    )\n);\n\n// The list of tokens to display in the table.\nconst tokensList = computed(() => Object.values(tokensWithBalance.value));\n\n/**\n * METHODS\n */\nasync function unstake(token: TokenInfo) {\n  const isAuraGauge = token.tags?.includes('aura');\n\n  if (isAuraGauge) {\n    return unstakeFromAuraGauge(token);\n  } else {\n    return unstakeFromBalancerChildGauge(token);\n  }\n}\n\nasync function unstakeFromAuraGauge(token: TokenInfo) {\n  const signer = getSigner();\n  const txBuilder = new TransactionBuilder(signer);\n  const gaugeInterface = new Interface(auraBaseRewardPool4626Abi);\n\n  return txBuilder.raw.sendTransaction({\n    to: token.address,\n    data: gaugeInterface.encodeFunctionData('withdrawAllAndUnwrap', [true]),\n  });\n}\n\nasync function unstakeFromBalancerChildGauge(token: TokenInfo) {\n  const signer = getSigner();\n  const txBuilder = new TransactionBuilder(signer);\n  const gaugeInterface = new Interface(balancerChildChainGaugeABi);\n  const balance = parseUnits(balancerFor(token.address), token.decimals);\n\n  return txBuilder.raw.sendTransaction({\n    to: token.address,\n    data: gaugeInterface.encodeFunctionData('withdraw', [balance]),\n  });\n}\n\nfunction balancerFor(address: string): string {\n  return balances.value[getAddress(address)];\n}\n\nfunction handleRowClick(token: TokenInfo) {\n  window.open(explorerLinks.addressLink(token.address));\n}\n\nfunction unstakeDisabled(token): boolean {\n  return bnum(balancerFor(token.address)).lte(0);\n}\n\nfunction refetchBalances() {\n  balancesQuery.refetch();\n  emit('unstaked');\n}\n\nfunction poolIdFor(token: TokenInfo): string {\n  const liquidityGauge = allLiquidityGauges.value.find(\n    gauge => gauge.id.toLowerCase() === token.address.toLowerCase()\n  );\n  if (liquidityGauge) return liquidityGauge.poolId;\n\n  const auraGauge = allAuraGauges.value.find(\n    gauge => gauge.address.toLowerCase() === token.address.toLowerCase()\n  );\n  if (auraGauge)\n    return addressToPoolIdMap.value.get(auraGauge.lpToken.address) || '';\n\n  return '';\n}\n\n/**\n * TABLE DEFINITION\n */\nconst columns = ref<ColumnDefinition<TokenInfo>[]>([\n  {\n    name: 'Icons',\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 100,\n    noGrow: true,\n  },\n  {\n    name: 'Gauge',\n    id: 'token',\n    width: 350,\n    className: 'px-0',\n    accessor: token =>\n      `${token.symbol} (${token.tags?.includes('aura') ? 'Aura' : 'Balancer'})`,\n  },\n  {\n    name: 'Risk',\n    id: 'risk',\n    width: 150,\n    align: 'right',\n    noGrow: true,\n    accessor: 'risk',\n    Cell: 'riskCell',\n  },\n  {\n    name: 'Balance',\n    id: 'balance',\n    align: 'right',\n    width: 150,\n    cellClassName: 'font-numeric',\n    accessor: token => `${fNum(balancerFor(token.address), FNumFormats.token)}`,\n    sortKey: token => {\n      const value = Number(balancerFor(token.address));\n      if (value === Infinity || isNaN(value)) return 0;\n      return value;\n    },\n  },\n  {\n    name: '',\n    id: 'unwrap',\n    align: 'right',\n    accessor: 'unwrap',\n    Cell: 'unwrapColumnCell',\n    width: 150,\n  },\n]);\n</script>\n\n<template>\n  <div>\n    <h4 class=\"mb-2\">1. Unstake your Pool Tokens</h4>\n    <BalCard\n      shadow=\"lg\"\n      :square=\"upToLargeBreakpoint\"\n      :noBorder=\"upToLargeBreakpoint\"\n      noPad\n    >\n      <BalTable\n        :columns=\"columns\"\n        :data=\"tokensList\"\n        skeletonClass=\"h-64\"\n        :square=\"upToLargeBreakpoint\"\n        :isLoading=\"isLoading\"\n        :onRowClick=\"handleRowClick\"\n        :initialState=\"{\n          sortColumn: 'balance',\n          sortDirection: 'desc',\n        }\"\n      >\n        <template #iconColumnHeader>\n          <div class=\"flex items-center\">\n            <img\n              v-if=\"darkMode\"\n              :src=\"TokensWhite\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n            <img\n              v-else\n              :src=\"TokensBlack\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n          </div>\n        </template>\n        <template #iconColumnCell=\"token\">\n          <div v-if=\"!isLoading\" class=\"py-4 px-6 text-left\">\n            <BalAsset\n              :address=\"token.address\"\n              :iconURI=\"token.logoURI\"\n              :size=\"28\"\n            />\n          </div>\n        </template>\n        <template #riskCell=\"token\">\n          <div\n            v-if=\"!isLoading\"\n            class=\"flex justify-end items-center py-4 px-6 text-right\"\n          >\n            <BalChip\n              v-if=\"isHighRisk(poolIdFor(token))\"\n              label=\"High risk\"\n              color=\"red\"\n            />\n            <BalChip v-else label=\"Mitigated\" color=\"orange\" />\n          </div>\n        </template>\n        <template #unwrapColumnCell=\"token\">\n          <div class=\"flex justify-end py-4 px-6\">\n            <TxActionBtn\n              label=\"Unstake\"\n              color=\"gradient\"\n              size=\"sm\"\n              :actionFn=\"() => unstake(token)\"\n              action=\"unstake\"\n              :summary=\"fNum(balancerFor(token.address), FNumFormats.token)\"\n              :confirmingLabel=\"`Unstaking...`\"\n              :disabled=\"unstakeDisabled(token)\"\n              @confirmed=\"refetchBalances\"\n            />\n          </div>\n        </template>\n      </BalTable>\n    </BalCard>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport WithdrawalsTable from './components/WithdrawalsTable.vue';\nimport TokenUnwrapTable from './components/TokenUnwrapTable.vue';\nimport UnstakeTable from './components/UnstakeTable.vue';\n\nconst unstakeEvents = ref(0);\nconst withdrawalEvents = ref(0);\n</script>\n\n<template>\n  <div class=\"xl:container xl:px-4 pt-10 md:pt-12 xl:mx-auto\">\n    <div class=\"pb-4 content-container\">\n      <h2>Proportional exit</h2>\n      <div class=\"text-primary text-md\">\n        <div>\n          This tool was created to facilitate user exits from pools at risk to\n          the vulnerability described\n          <a\n            href=\"https://forum.balancer.fi/t/vulnerability-found-in-some-pools/5102/1\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            class=\"text-blue-500 underline\"\n            >here</a\n          >. Many of these pools have been disabled to mitigate risk to user\n          funds, so they will only support a basic type of exit. You may need to\n          withdraw several times if you are a liquidity provider in a pool with\n          nested pool tokens.\n        </div>\n        <ol class=\"pt-4 steps\">\n          <li>\n            If your pool tokens are staked,\n            <span class=\"font-bold\">UNSTAKE</span> your pool tokens from the\n            liquidity gauge. This tool supports unstaking from\n            <span class=\"font-bold\">Balancer</span> and\n            <span class=\"font-bold\">Aura</span>\n            gauges.\n          </li>\n          <li>\n            Exit the liquidity pool by clicking the\n            <span class=\"font-bold\">WITHDRAW</span> button. If the pool contains\n            nested pool tokens you will need to\n            <span class=\"font-bold\">WITHDRAW</span> from the underlying pools as\n            well.\n          </li>\n          <li>\n            If you were deposited in a boosted pool, you will now have a wrapped\n            version of your assets in your wallet. You need to\n            <span class=\"font-bold\">APPROVE</span> the token to be unwrapped,\n            and then click <span class=\"font-bold\">UNWRAP</span> to receive the\n            underlying token.\n          </li>\n        </ol>\n        <p>\n          The general aim when using this tool is to keep unstaking, withdrawing\n          and unwrapping until you have nothing left in any of the tables below.\n        </p>\n        <BalAlert type=\"warning\" title=\"Check all networks\" block\n          >If you're invested in pools across several networks, select the\n          appropriate network from the selector in the top right of the\n          screen.</BalAlert\n        >\n      </div>\n    </div>\n    <UnstakeTable @unstaked=\"unstakeEvents++\" />\n    <WithdrawalsTable\n      :unstakeEvents=\"unstakeEvents\"\n      class=\"mt-8\"\n      @withdrawal=\"withdrawalEvents++\"\n    />\n    <TokenUnwrapTable :withdrawalEvents=\"withdrawalEvents\" class=\"mt-8\" />\n  </div>\n</template>\n\n<style scoped>\n.content-container :deep(h1) {\n  @apply pb-6;\n}\n\n.content-container :deep(h2),\n.content-container :deep(h3),\n.content-container :deep(p),\n.content-container :deep(ul),\n.content-container :deep(ol),\n.content-container :deep(em) {\n  @apply pb-4;\n}\n\n.content-container :deep(h4),\n.content-container :deep(h5),\n.content-container :deep(h6) {\n  @apply pb-2;\n}\n\n.content-container :deep(.subsection) {\n  @apply mb-8;\n}\n\n.content-container :deep(h1),\n.content-container :deep(h2),\n.content-container :deep(h3),\n.content-container :deep(h4) {\n  @apply font-body tracking-tight;\n\n  font-variation-settings: 'wght' 700;\n}\n\n.content-container :deep(h5) {\n  @apply font-body tracking-tight;\n}\n\n.content-container :deep(li) {\n  @apply list-disc ml-8 pb-2;\n}\n\n.content-container :deep(ol > li) {\n  @apply list-decimal;\n}\n\n.content-container :deep(.nav li > ul) {\n  padding-top: 0.375rem;\n}\n\n.content-container :deep(li > ul) {\n  padding-top: 0;\n  padding-bottom: 0;\n}\n\n.content-container :deep(.nav ul) {\n  padding-bottom: 0;\n}\n\n.content-container :deep(li),\n.content-container :deep(p) {\n  @apply text-gray-700 dark:text-gray-300;\n}\n\n.content-container :deep(em) {\n  font-style: italic;\n  font-variation-settings: 'ital' 1;\n  font-synthesis: none;\n}\n\n.content-container :deep(.link) {\n  font-variation-settings: 'wght' 500;\n}\n\n.content-container :deep(em.font-medium) {\n  font-variation-settings: 'ital' 1, 'wght' 500;\n}\n\n.content-container :deep(em.font-semibold) {\n  font-variation-settings: 'ital' 1, 'wght' 600;\n}\n</style>\n"],"names":["props","__props","emit","__emit","fNum","useNumbers","assetRowWidth","computed","tokenService","TokenService","showWithdrawalModal","ref","activePool","account","getSigner","useWeb3","slippageBsp","useUserSettings","transactionDeadline","useApp","upToLargeBreakpoint","useBreakpoints","darkMode","useDarkMode","router","useRouter","affectedPoolIds","CSP_ISSUE_POOL_IDS","networkId","affectedPools","id","enableBalanceFetching","poolBalancesQuery","useQuery","poolBpts","pool","balancerTokenLists","balances","poolsWithBalances","bnum","balancerFor","enablePoolsQuery","isQueryLoading","poolsQuery","balancerAPIService","p","pools","isLoading","getAddress","withdraw","exitPoolService","ExitPoolService","ExitHandler","ExitType","isWithdrawDisabled","iconAddresses","_a","poolMetadata","orderedTokenAddresses","handleRowClick","route","networkSlug","refetchBalances","doesNotSupportRecoveryExits","poolId","NO_RECOVERY_EXIT_POOL_IDS","handleWithdrawal","closeModal","handleWithdrawClick","watch","columns","FNumFormats","fiatValueOf","value","VaultActionsService","params","Interface","VaultActionsAbi","assets","minAmountsOut","userData","toInternalBalance","poolKind","sender","recipient","outputReferences","exitPoolInput","AaveWrappingService","aaveWrappingAbi","YearnWrappingService","YearnWrappingAbi","ReaperWrappingService","ReaperWrappingAbi","Erc4626WrappingService","Erc4626WrappingAbi","GaugeActionsService","GaugeActionsAbi","EulerWrappingService","BatchRelayerLibraryAbi","GearboxWrappingService","SiloWrappingService","TetuWrappingService","BatchRelayerService","__publicField","key","paddedPrefix","BigNumber","reference","signer","batchRelayerAddress","wrappedToken","poolType","amount","txBuilder","TransactionBuilder","call","batchRelayerInterface","BatchRelayerAbi","TOKENS_TO_EXCLUDE","explorerLinks","approveToken","useTokenApprovalActions","relayerApprovalTx","useRelayerApproval","RelayerType","linearPoolsQuery","useGraphQuery","configService","allLineaPools","allWrappedTokensWithType","uniqBy","token","enableTokenQuery","tokensQuery","item","address","tokens","enableBalancesQuery","balancesQuery","enableAllowancesQuery","allowancesQuery","allowances","tokensWithBalance","pickBy","tokensList","unwrap","batchRelayerService","item2","isSameAddress","parseUnits","approve","ApprovalAction","allowanceFor","_b","unwrapDisabled","requiresApproval","balancerChildChainGaugeABi","auraBaseRewardPool4626Abi","poolIds","poolAddresses","addressToPoolIdMap","liquidityGaugesQuery","auraGaugesQuery","allLiquidityGauges","allLiquidityGaugesAsTokenInfoMap","gauge","keyBy","allAuraGauges","allAuraGaugesAsTokenInfoMap","allGaugesAsTokenInfoMap","merge","unstake","unstakeFromAuraGauge","unstakeFromBalancerChildGauge","gaugeInterface","balance","unstakeDisabled","poolIdFor","liquidityGauge","auraGauge","unstakeEvents","withdrawalEvents"],"mappings":"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"}