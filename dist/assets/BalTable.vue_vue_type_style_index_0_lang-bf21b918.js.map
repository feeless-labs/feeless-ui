{"version":3,"file":"BalTable.vue_vue_type_style_index_0_lang-bf21b918.js","sources":["../../src/components/_global/BalTable/BalTableRow.vue","../../src/components/_global/BalTable/TotalsRow.vue","../../src/assets/images/icons/pin.svg","../../src/components/_global/BalTable/BalTable.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { compact } from 'lodash';\n\nimport {\n  ColumnDefinition,\n  Data,\n  Sticky,\n} from '@/components/_global/BalTable/types';\n\ntype Props = {\n  columns: ColumnDefinition<any>[];\n  onRowClick?: (data: any, inNewTab?: boolean) => void;\n  data: any;\n  link?: {\n    to: string;\n    getParams: (data: any) => Record<string, string>;\n  } | null;\n  href?: { getHref: (data: any) => string | null } | null;\n  sticky?: Sticky;\n  isColumnStuck?: boolean;\n  pinned?: boolean;\n};\n\nconst props = defineProps<Props>();\n\nfunction handleRowClick(data: Data, inNewTab = false) {\n  if (props.link?.to) return;\n  props.onRowClick && props.onRowClick(data, inNewTab);\n}\n\n// Need a method for horizontal stickiness as we need to\n// check whether the table item belongs in the first column\nfunction getHorizontalStickyClass(index: number) {\n  if (index !== 0) return '';\n  if (props.sticky === 'horizontal' || props.sticky === 'both') {\n    return 'horizontalSticky';\n  }\n  return '';\n}\n\nfunction handleColumnClick(column: ColumnDefinition, event: Event) {\n  // Disable default onClick when column is a checkbox\n  if (column.isCheckbox && event.target?.['type'] !== 'checkbox') {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n</script>\n\n<template>\n  <tr\n    :class=\"[\n      'bg-white z-10 row-bg group',\n      {\n        'cursor-pointer': handleRowClick,\n        'border-b dark:border-gray-700': pinned,\n      },\n    ]\"\n    @click.exact=\"handleRowClick(data)\"\n    @click.meta=\"handleRowClick(data, true)\"\n    @click.ctrl=\"handleRowClick(data, true)\"\n  >\n    <td\n      v-for=\"(column, columnIndex) in columns\"\n      :key=\"column.id + columnIndex\"\n      :class=\"[\n        column.align === 'right' ? 'text-left' : 'text-right',\n        getHorizontalStickyClass(columnIndex),\n        isColumnStuck ? 'isSticky' : '',\n        column.isCheckbox ? 'cursor-default' : '',\n      ]\"\n      @click=\"handleColumnClick(column, $event)\"\n    >\n      <component\n        :is=\"href?.getHref(data) ? 'a' : link ? 'router-link' : 'div'\"\n        :to=\"\n          link\n            ? {\n                name: link.to,\n                params: link.getParams(data),\n              }\n            : null\n        \"\n        :href=\"href?.getHref(data)\"\n      >\n        <slot v-if=\"column.Cell\" v-bind=\"data\" :name=\"column.Cell\" />\n        <div\n          v-else\n          :class=\"\n            compact([\n              'mr-6 py-4',\n              column.align === 'right' ? 'text-right' : 'text-left',\n              column.cellClassName,\n            ])\n          \"\n        >\n          {{\n            typeof column.accessor === 'string'\n              ? data[column.accessor]\n              : column.accessor(data)\n          }}\n        </div>\n      </component>\n    </td>\n  </tr>\n</template>\n","<script setup lang=\"ts\">\nimport { tail } from 'lodash';\n\nimport { ColumnDefinition, Sticky } from '@/components/_global/BalTable/types';\n\ntype Props = {\n  isColumnStuck?: boolean;\n  onRowClick?: (data: any) => void;\n  sticky?: Sticky;\n  columns: ColumnDefinition<any>[];\n};\n\nconst props = defineProps<Props>();\n\n/** FUNCTIONS */\n// Need a method for horizontal stickiness as we need to\n// check whether the table item belongs in the first column\nfunction getHorizontalStickyClass(index: number) {\n  if (index !== 0) return '';\n  if (props.sticky === 'horizontal' || props.sticky === 'both') {\n    return 'horizontalSticky';\n  }\n  return '';\n}\n</script>\n\n<template>\n  <tbody>\n    <tr\n      :class=\"[\n        'bg-white z-10 row-bg group',\n        { 'cursor-pointer': !!props.onRowClick },\n      ]\"\n    >\n      <td\n        :class=\"[\n          getHorizontalStickyClass(0),\n          isColumnStuck ? 'isSticky' : '',\n          'text-left p-6 bg-white dark:bg-gray-850 border-t dark:border-gray-900 align-top',\n        ]\"\n      >\n        <span class=\"font-semibold text-left\"> Total </span>\n      </td>\n      <td\n        v-for=\"(column, columnIndex) in tail(columns)\"\n        :key=\"column.id\"\n        :class=\"[\n          column.align === 'right' ? 'text-left' : 'text-right',\n          getHorizontalStickyClass(columnIndex + 1),\n          isColumnStuck ? 'isSticky' : '',\n          'p-6 bg-white dark:bg-gray-850 border-t dark:border-gray-900',\n        ]\"\n      >\n        <slot v-if=\"column.totalsCell\" :name=\"column.totalsCell\" />\n      </td>\n    </tr>\n  </tbody>\n</template>\n","export default \"__VITE_ASSET__b7b71533__\"","<script setup lang=\"ts\">\nimport BalIcon from '../BalIcon/BalIcon.vue';\nimport BalTableRow from './BalTableRow.vue';\nimport TotalsRow from './TotalsRow.vue';\nimport { Sticky, Data, ColumnDefinition } from './types';\nimport { sortBy, sumBy } from 'lodash';\n\nimport PinHeader from './PinHeader.vue';\n\n// Using imported types in template is not supported, so we use alias type\ntype DataProp = Data;\n\ntype InitialState = {\n  sortDirection: 'asc' | 'desc' | null;\n  sortColumn: string | null;\n};\n\ntype DataPinState = {\n  // the key inside each data object that you want to\n  // pin by\n  pinOn: string;\n  pinnedData: string[];\n};\n\nconst emit = defineEmits<{\n  (e: 'loadMore'): void;\n  (e: 'onColumnSort', value: string): void;\n}>();\n\ntype Props = {\n  columns: ColumnDefinition[];\n  data: DataProp[];\n  // Sometimes we want to explicitly specify a function to calculate the unique row key (for example, voting pool rows can have repeated ids)\n  rowKey?: (dataItem: DataProp) => string;\n  isLoading?: boolean;\n  isLoadingMore?: boolean;\n  skeletonClass?: string;\n  onRowClick?: (data: DataProp, inNewTab?: boolean) => void;\n  sticky?: Sticky;\n  square?: boolean;\n  isPaginated?: boolean;\n  noResultsLabel?: string;\n  link?: {\n    to: string;\n    getParams: (data: any) => Record<string, string>;\n  } | null;\n  href?: { getHref: (data: any) => string | null } | null;\n  initialState?: InitialState;\n  pin?: DataPinState | null;\n  getTableRowClass?: (rowData: DataProp, rowIndex: number) => string;\n  isOnlyDescSort?: boolean;\n  renderedRowsIdx?: number;\n};\n\nconst props = withDefaults(defineProps<Props>(), {\n  square: false,\n  isPaginated: false,\n  noResultsLabel: '',\n  link: null,\n  href: null,\n  initialState: () => ({\n    sortColumn: null,\n    sortDirection: null,\n  }),\n  skeletonClass: '',\n  isLoading: false,\n  isLoadingMore: false,\n  getTableRowClass: () => '',\n  isOnlyDescSort: false,\n});\n\nconst stickyHeaderRef = ref();\nconst isColumnStuck = ref(false);\nconst tableData = ref(props.data);\nconst currentSortDirection = ref<InitialState['sortDirection']>(\n  props.initialState?.sortDirection || null\n);\nconst currentSortColumn = ref<InitialState['sortColumn']>(\n  props.initialState?.sortColumn || null\n);\nconst headerRef = ref<HTMLElement>();\nconst bodyRef = ref<HTMLElement>();\n\nconst getTableRowClass = toRef(props, 'getTableRowClass');\n\n// for loading and no results\nconst placeholderBlockWidth = computed(() => sumBy(props.columns, 'width'));\n\n// Need a method for horizontal stickiness as we need to\n// check whether the table item belongs in the first column\nconst getHorizontalStickyClass = (index: number) => {\n  if (index !== 0) return '';\n  if (props.sticky === 'horizontal' || props.sticky === 'both') {\n    return 'horizontalSticky';\n  }\n  return '';\n};\n\nconst handleSort = (columnId: string | null, updateDirection = true) => {\n  const column = props.columns.find(column => column.id === columnId);\n  if (!column?.sortKey) return;\n  if (columnId !== currentSortColumn.value) currentSortDirection.value = null;\n\n  currentSortColumn.value = columnId;\n\n  if (updateDirection) {\n    setCurrenSortDirection();\n  }\n  if (columnId && currentSortDirection.value) {\n    emit('onColumnSort', columnId);\n  }\n\n  const sortedData = sortBy(\n    (props.data as any).value || props.data,\n    column.sortKey\n  );\n  if (currentSortDirection.value === 'asc') {\n    tableData.value = sortedData;\n    return;\n  }\n  if (currentSortDirection.value === 'desc') {\n    tableData.value = sortedData.reverse();\n    return;\n  }\n  tableData.value = props.data;\n};\n\nfunction setCurrenSortDirection(): void {\n  if (props.isOnlyDescSort) {\n    currentSortDirection.value = 'desc';\n    return;\n  }\n  if (currentSortDirection.value === null) {\n    currentSortDirection.value = 'desc';\n    return;\n  }\n  if (currentSortDirection.value === 'desc') {\n    currentSortDirection.value = 'asc';\n    return;\n  }\n  currentSortDirection.value = null;\n}\n\nfunction getAlignProperty(align: 'left' | 'right' | 'center' | undefined) {\n  switch (align) {\n    case 'left':\n      return 'justify-start';\n    case 'right':\n      return 'justify-end';\n    case 'center':\n      return 'justify-center';\n    default:\n      return 'justify-start';\n  }\n}\n\nfunction getRowKey(dataItem: DataProp, index: number) {\n  if (props.rowKey) return `tableRow-${props.rowKey(dataItem)}`;\n  return `tableRow-${dataItem.id ?? index}`;\n}\n\nonMounted(() => {\n  if (bodyRef.value) {\n    bodyRef.value.onscroll = () => {\n      if (bodyRef.value && stickyHeaderRef.value) {\n        const offsetRatio =\n          bodyRef.value.offsetWidth / stickyHeaderRef.value.offsetWidth / 10;\n        isColumnStuck.value = !!(\n          stickyHeaderRef.value.offsetLeft >\n          stickyHeaderRef.value.offsetWidth * offsetRatio\n        );\n      }\n    };\n    bodyRef.value.addEventListener('scroll', () => {\n      if (bodyRef.value && headerRef.value) {\n        headerRef.value.scrollLeft = bodyRef.value.scrollLeft;\n      }\n    });\n  }\n\n  handleSort(currentSortColumn.value, false);\n});\n\n/**\n * COMPUTED\n */\nconst unpinnedData = computed(() => {\n  if (!props.pin) return tableData.value;\n  return (tableData.value || []).filter(\n    data => !props.pin?.pinnedData.includes(data[props.pin.pinOn])\n  );\n});\n\nconst pinnedData = computed(() => {\n  if (!props.pin) return [];\n  return (tableData.value || []).filter(data =>\n    props.pin?.pinnedData.includes(data[props.pin.pinOn])\n  );\n});\n\nconst filteredColumns = computed(() =>\n  props.columns.filter(column => !column.hidden)\n);\n\nconst shouldRenderTotals = computed(() =>\n  props.columns.some(column => column.totalsCell !== undefined)\n);\n\nwatch([() => props.data, () => props.isLoading], ([newData]) => {\n  if (currentSortColumn.value && currentSortDirection.value !== null) {\n    handleSort(currentSortColumn.value, false);\n    return;\n  }\n  tableData.value = newData;\n});\n</script>\n\n<template>\n  <div\n    :class=\"[\n      'max-w-full whitespace-nowrap',\n      'max-lg:overflow-hidden',\n      { 'rounded-lg': !square },\n    ]\"\n  >\n    <div ref=\"headerRef\" class=\"max-lg:overflow-hidden\">\n      <table class=\"w-full whitespace-normal table-fixed\">\n        <!-- header width handled by colgroup  -->\n        <colgroup>\n          <col\n            v-for=\"column in filteredColumns\"\n            :key=\"column.id\"\n            :style=\"{ width: `${column?.width}px` }\"\n          />\n        </colgroup>\n        <!-- header is rendered as a row - seperated by columns -->\n        <thead class=\"z-10 bg-white dark:bg-gray-900\">\n          <th\n            v-for=\"(column, columnIndex) in filteredColumns\"\n            :key=\"`header-${column.id}`\"\n            :ref=\"columnIndex == 0 ? 'stickyHeaderRef' : undefined\"\n            :class=\"[\n              'p-6 bg-white dark:bg-gray-850 headingShadow border-b dark:border-gray-900',\n              column.className,\n              getHorizontalStickyClass(columnIndex),\n              isColumnStuck ? 'isSticky' : '',\n              column.sortKey &&\n              !(props.isOnlyDescSort && currentSortColumn === column.id)\n                ? 'cursor-pointer'\n                : '',\n              column.sortKey && currentSortColumn !== column.id\n                ? 'text-gray-800 hover:text-purple-600 focus:text-blue-500 dark:text-gray-100 dark:hover:text-yellow-500 dark:focus:text-yellow-500 transition-colors'\n                : '',\n              currentSortColumn === column.id && currentSortDirection\n                ? 'text-blue-600 hover:text-blue-500 focus:text-purple-600 dark:text-blue-400 dark:hover:text-blue-600 dark:focus:text-blue-600 transition-colors'\n                : '',\n              !square ? 'rounded-t-lg' : '',\n            ]\"\n            @click=\"handleSort(column.id)\"\n          >\n            <div :class=\"['flex', getAlignProperty(column.align)]\">\n              <slot\n                v-if=\"column.Header\"\n                v-bind=\"column\"\n                :name=\"column.Header\"\n              />\n              <div v-else>\n                <h5 class=\"text-base\">\n                  {{ column.name }}\n                </h5>\n              </div>\n              <BalIcon\n                v-if=\"\n                  currentSortColumn === column.id &&\n                  currentSortDirection === 'asc'\n                \"\n                name=\"arrow-up\"\n                size=\"sm\"\n                class=\"flex items-center ml-1\"\n              />\n              <BalIcon\n                v-if=\"\n                  currentSortColumn === column.id &&\n                  currentSortDirection === 'desc'\n                \"\n                name=\"arrow-down\"\n                size=\"sm\"\n                class=\"flex items-center ml-1\"\n              />\n            </div>\n          </th>\n        </thead>\n      </table>\n    </div>\n    <div ref=\"bodyRef\" class=\"max-lg:overflow-auto\">\n      <BalLoadingBlock\n        v-if=\"isLoading\"\n        :class=\"[skeletonClass, 'min-w-full']\"\n        square\n        :style=\"{ width: `${placeholderBlockWidth}px` }\"\n      />\n      <div\n        v-else-if=\"!isLoading && !tableData.length\"\n        class=\"flex justify-start items-center p-6 max-w-full h-24 bg-white dark:bg-gray-850 row-bg text-secondary\"\n      >\n        {{ noResultsLabel || $t('noResults') }}\n      </div>\n      <table v-else class=\"w-full whitespace-normal table-fixed\">\n        <colgroup>\n          <col\n            v-for=\"column in filteredColumns\"\n            :key=\"column.id\"\n            :style=\"{ width: `${column?.width}px` }\"\n          />\n        </colgroup>\n        <!-- begin measurement row -->\n        <tr>\n          <td\n            v-for=\"(column, columnIndex) in filteredColumns\"\n            :key=\"column.id\"\n            :class=\"[\n              column.align === 'right' ? 'text-left' : 'text-right',\n              getHorizontalStickyClass(columnIndex),\n              isColumnStuck ? 'isSticky' : '',\n              'bg-white dark:bg-gray-850 p-0 m-0 h-0',\n            ]\"\n          />\n        </tr>\n        <!-- end measurement row -->\n\n        <!-- begin pinned rows -->\n        <PinHeader v-if=\"pinnedData.length\" />\n        <BalTableRow\n          v-for=\"(dataItem, index) in pinnedData\"\n          :key=\"getRowKey(dataItem, index)\"\n          :class=\"getTableRowClass(dataItem, index)\"\n          :data=\"dataItem\"\n          :columns=\"filteredColumns\"\n          :onRowClick=\"onRowClick\"\n          :link=\"link\"\n          :href=\"href\"\n          :sticky=\"sticky\"\n          :isColumnStuck=\"isColumnStuck\"\n          pinned\n        >\n          <template v-for=\"(_, name) in $slots\" #[name]>\n            <slot :name=\"name\" v-bind=\"dataItem\" />\n          </template>\n        </BalTableRow>\n        <!-- end pinned rows -->\n\n        <!-- begin data rows -->\n        <template\n          v-for=\"(dataItem, index) in unpinnedData\"\n          :key=\"getRowKey(dataItem, index)\"\n        >\n          <BalTableRow\n            v-if=\"!renderedRowsIdx || index <= renderedRowsIdx\"\n            :class=\"\n              props.getTableRowClass\n                ? props.getTableRowClass(dataItem, index)\n                : undefined\n            \"\n            :data=\"dataItem\"\n            :columns=\"filteredColumns\"\n            :onRowClick=\"onRowClick\"\n            :link=\"link\"\n            :href=\"href\"\n            :sticky=\"sticky\"\n            :isColumnStuck=\"isColumnStuck\"\n          >\n            <slot :name=\"'named'\" v-bind=\"dataItem\"></slot>\n            <template v-for=\"(_, name) in $slots\" #[name]>\n              <slot :name=\"name\" v-bind=\"dataItem\" />\n            </template>\n          </BalTableRow>\n        </template>\n\n        <!-- end end data rows -->\n        <TotalsRow\n          v-if=\"!isLoading && tableData.length && shouldRenderTotals\"\n          :columns=\"filteredColumns\"\n          :onRowClick=\"onRowClick\"\n          :sticky=\"sticky\"\n          :isColumnStuck=\"isColumnStuck\"\n        >\n          <template v-for=\"(_, name) in $slots\" #[name]=\"slotData\">\n            <slot :name=\"name\" v-bind=\"(slotData as DataProp)\" />\n          </template>\n        </TotalsRow>\n      </table>\n    </div>\n  </div>\n  <div\n    v-if=\"isPaginated && !isLoading\"\n    class=\"bal-table-pagination-btn text-secondary\"\n    @click=\"!isLoadingMore && $emit('loadMore')\"\n  >\n    <template v-if=\"isLoadingMore\">\n      {{ $t('loading') }}\n    </template>\n    <template v-else>\n      {{ $t('loadMore') }}\n      <BalIcon name=\"chevron-down\" size=\"sm\" class=\"ml-2\" />\n    </template>\n  </div>\n</template>\n\n<style>\n.horizontalSticky {\n  @apply z-10 opacity-95 xs:opacity-90;\n\n  /* Set the sticky cell to inherit table row's background-color in order for the opacity property to have an effect */\n  background-color: inherit;\n  position: sticky;\n  left: 0;\n  width: 100%;\n}\n\n.horizontalSticky::after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 30px;\n  transform: translateX(100%);\n  transition: box-shadow 0.3s;\n  content: '';\n  pointer-events: none;\n}\n\n.isSticky::after {\n  box-shadow: inset 10px 0 8px -8px rgb(0 0 0 / 15%);\n}\n\n.row-bg {\n  @apply bg-white dark:bg-gray-850 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors ease-in duration-300;\n}\n\n.bal-table-pagination-btn {\n  @apply flex items-center justify-center h-16 transition-all;\n  @apply font-medium hover:text-purple-600 dark:hover:text-yellow-500;\n  @apply border-t dark:border-gray-900 rounded-b-lg;\n  @apply hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer;\n}\n</style>\n"],"names":["props","__props","handleRowClick","data","inNewTab","_a","getHorizontalStickyClass","index","handleColumnClick","column","event","pin","emit","__emit","stickyHeaderRef","ref","isColumnStuck","tableData","currentSortDirection","currentSortColumn","_b","headerRef","bodyRef","getTableRowClass","toRef","placeholderBlockWidth","computed","sumBy","handleSort","columnId","updateDirection","column2","setCurrenSortDirection","sortedData","sortBy","getAlignProperty","align","getRowKey","dataItem","onMounted","offsetRatio","unpinnedData","pinnedData","filteredColumns","shouldRenderTotals","watch","newData"],"mappings":"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"}