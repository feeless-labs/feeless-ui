{"version":3,"file":"BalAccordion.vue_vue_type_script_setup_true_lang-cc7bb03c.js","sources":["../../src/components/_global/BalAccordion/BalAccordion.vue"],"sourcesContent":["<script setup lang=\"ts\">\ntype Section = {\n  title: string;\n  id: string;\n  // custom renderer slot id for handle\n  handle?: string;\n  // prevent this accordion section from\n  // being expanded\n  isDisabled?: boolean;\n};\n\ntype Props = {\n  sections: Section[];\n  // changing variables which can be used to\n  // determine whether to re-render the height\n  // of an accordion section\n  dependencies?: unknown;\n  showSectionBorder?: boolean;\n  reCalcKey?: number;\n  isOpenedByDefault?: boolean;\n};\n\nconst props = withDefaults(defineProps<Props>(), {\n  showSectionBorder: true,\n  isOpenedByDefault: false,\n  reCalcKey: 0,\n});\n\nconst activeSection = ref('');\nconst activeSectionElement = ref<HTMLElement>();\nconst accordionHeightSetterElement = ref<HTMLElement>();\nconst wrapperElement = ref<HTMLElement>();\nconst handleBarElement = ref<HTMLElement>();\nconst handleBarElements = ref<(Element | ComponentPublicInstance)[]>([]);\n\nconst minimisedWrapperHeight = ref(0);\nconst isContentVisible = ref(false);\nconst height = ref();\nconst handleBarHeight = ref(0);\nconst totalHeight = ref(0);\n\nasync function toggleSection(section: string, collapse = true) {\n  const _section = props.sections.find(s => s.id === section);\n  if (_section?.isDisabled) return;\n\n  const collapseCurrentSection = activeSection.value === section && collapse;\n\n  if (collapseCurrentSection) {\n    activeSection.value = '';\n    isContentVisible.value = false;\n  } else {\n    activeSection.value = section;\n    isContentVisible.value = true;\n  }\n  await nextTick();\n\n  if (activeSectionElement.value && accordionHeightSetterElement.value) {\n    height.value = activeSectionElement.value.clientHeight;\n    isContentVisible.value = false;\n  }\n\n  isContentVisible.value = true;\n}\n\n// all of this happens without the user seeing any feedback\nonMounted(async () => {\n  // set to true so we can actually measure the content height\n  isContentVisible.value = true;\n\n  // set the height of the minimised accordion\n  minimisedWrapperHeight.value = wrapperElement.value?.offsetHeight || 0;\n\n  handleBarHeight.value = handleBarElement.value?.offsetHeight || 0;\n\n  // the total expanded height starts with tracking the minimised height first\n  totalHeight.value = wrapperElement.value?.offsetHeight || 0;\n\n  // calculating the height of the completely expanded accordion\n  // by summing the heights of each section onto the minimised\n  // height of the accordion\n  for (const section of props.sections) {\n    activeSection.value = section.id;\n    await nextTick();\n    totalHeight.value =\n      totalHeight.value + (activeSectionElement.value?.offsetHeight || 0);\n  }\n\n  // need to set this back to false so its like the accordion\n  // was never active\n  activeSection.value = '';\n  isContentVisible.value = false;\n});\n\nfunction setHandleBars(el: Element | ComponentPublicInstance | null) {\n  if (!el) return;\n  if (!handleBarElements.value?.includes(el)) {\n    handleBarElements.value.push(el);\n  }\n}\n\n/**\n * WATCHERS\n */\nwatch(\n  () => props.dependencies,\n  () => {\n    toggleSection(activeSection.value, false);\n  }\n);\n\nwatch(\n  () => props.reCalcKey,\n  newVal => {\n    if (newVal && activeSection.value) {\n      toggleSection(activeSection.value, false);\n    }\n  }\n);\n</script>\n\n<template>\n  <div ref=\"wrapperElement\">\n    <BalCard hFull noPad shadow=\"none\" class=\"overflow-visible rounded-xl\">\n      <div\n        v-for=\"(section, i) in sections\"\n        :key=\"section.id\"\n        :ref=\"setHandleBars\"\n        class=\"flex flex-col\"\n      >\n        <div\n          v-if=\"section.handle\"\n          ref=\"handleBarElement\"\n          @click=\"toggleSection(section.id)\"\n        >\n          <slot :name=\"section.handle\" />\n        </div>\n        <button\n          v-else\n          ref=\"handleBarElement\"\n          :class=\"[\n            'transition-all w-full flex justify-between p-3 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl',\n            {\n              'border-b dark:border-gray-900': i !== sections.length - 1,\n            },\n          ]\"\n          @click=\"toggleSection(section.id)\"\n        >\n          <h6>{{ section.title }}</h6>\n          <BalIcon\n            class=\"text-blue-400\"\n            :class=\"[\n              activeSection === section.id ? '-rotate-180' : 'rotate-0',\n              'transform transition-all',\n            ]\"\n            name=\"chevron-down\"\n          />\n        </button>\n        <div\n          v-if=\"activeSection === section.id || isOpenedByDefault\"\n          ref=\"accordionHeightSetterElement\"\n          class=\"relative\"\n        >\n          <!-- content -->\n          <div\n            v-if=\"isContentVisible || isOpenedByDefault\"\n            ref=\"activeSectionElement\"\n            :class=\"{\n              'border-b dark:border-gray-900 active-section rounded-b':\n                isContentVisible && showSectionBorder,\n            }\"\n          >\n            <slot :name=\"section.id\" />\n          </div>\n        </div>\n      </div>\n    </BalCard>\n  </div>\n</template>\n"],"names":["props","__props","activeSection","ref","activeSectionElement","accordionHeightSetterElement","wrapperElement","handleBarElement","handleBarElements","minimisedWrapperHeight","isContentVisible","height","handleBarHeight","totalHeight","toggleSection","section","collapse","_section","s","nextTick","onMounted","_a","_b","_c","_d","setHandleBars","el","watch","newVal"],"mappings":"sYAsBA,MAAAA,EAAAC,EAMAC,EAAAC,EAAA,EAAA,EACAC,EAAAD,IACAE,EAAAF,IACAG,EAAAH,IACAI,EAAAJ,IACAK,EAAAL,EAAA,CAAA,CAAA,EAEAM,EAAAN,EAAA,CAAA,EACAO,EAAAP,EAAA,EAAA,EACAQ,EAAAR,IACAS,EAAAT,EAAA,CAAA,EACAU,EAAAV,EAAA,CAAA,EAEA,eAAAW,EAAAC,EAAAC,EAAA,GAAA,CACE,MAAAC,EAAAjB,EAAA,SAAA,KAAAkB,GAAAA,EAAA,KAAAH,CAAA,EACA,GAAAE,GAAA,MAAAA,EAAA,WAA0B,OAE1Bf,EAAA,QAAAa,GAAAC,GAGEd,EAAA,MAAA,GACAQ,EAAA,MAAA,KAEAR,EAAA,MAAAa,EACAL,EAAA,MAAA,IAEF,MAAAS,EAAA,EAEAf,EAAA,OAAAC,EAAA,QACEM,EAAA,MAAAP,EAAA,MAAA,aACAM,EAAA,MAAA,IAGFA,EAAA,MAAA,EAAyB,CAI3BU,EAAA,SAAA,aAEEV,EAAA,MAAA,GAGAD,EAAA,QAAAY,EAAAf,EAAA,QAAA,YAAAe,EAAA,eAAA,EAEAT,EAAA,QAAAU,EAAAf,EAAA,QAAA,YAAAe,EAAA,eAAA,EAGAT,EAAA,QAAAU,EAAAjB,EAAA,QAAA,YAAAiB,EAAA,eAAA,EAKA,UAAAR,KAAAf,EAAA,SACEE,EAAA,MAAAa,EAAA,GACA,MAAAI,EAAA,EACAN,EAAA,MAAAA,EAAA,SAAAW,EAAApB,EAAA,QAAA,YAAAoB,EAAA,eAAA,GAMFtB,EAAA,MAAA,GACAQ,EAAA,MAAA,EAAyB,CAAA,EAG3B,SAAAe,EAAAC,EAAA,OACEA,KACAL,EAAAb,EAAA,QAAA,MAAAa,EAAA,SAAAK,IACElB,EAAA,MAAA,KAAAkB,CAAA,EACF,CAMF,OAAAC,EAAA,IAAA3B,EAAA,aACc,IAAA,CAEVc,EAAAZ,EAAA,MAAA,EAAA,CAAwC,CAC1C,EAGFyB,EAAA,IAAA3B,EAAA,UACc4B,GAAA,CAEVA,GAAA1B,EAAA,OACEY,EAAAZ,EAAA,MAAA,EAAA,CACF,CACF"}