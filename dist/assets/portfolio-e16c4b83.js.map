{"version":3,"file":"portfolio-e16c4b83.js","sources":["../../src/components/contextual/pages/vebal/cross-chain-boost/ProceedToSyncModal.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/PortfolioSyncTip.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/CheckpointAllGaugesModal.vue","../../src/components/contextual/pages/pools/StakedPoolsTable.vue","../../src/components/contextual/pages/pools/UnstakedPoolsTable.vue","../../src/components/contextual/pages/pools/VeBalPoolTable.vue","../../src/assets/images/icons/frame-loading.svg","../../src/components/heros/AppHero.vue","../../src/components/heros/HeroConnectWalletButton.vue","../../src/components/heros/PortfolioPageHero.vue","../../src/pages/portfolio.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport BalModal from '@/components/_global/BalModal/BalModal.vue';\nimport useNetwork from '@/composables/useNetwork';\n\ntype Props = {\n  isVisible: boolean;\n};\ndefineProps<Props>();\ndefineEmits(['close']);\n\nconst { networkId, getNetworkSlug } = useNetwork();\n</script>\n\n<template>\n  <BalModal ref=\"redirectModal\" :show=\"isVisible\" @close=\"$emit('close')\">\n    <template #header>\n      <h3>\n        {{ $t('modals.veBalRedirectModal.title') }}\n      </h3>\n    </template>\n    <div class=\"flex flex-col text-left\">\n      <p class=\"mb-5 whitespace-pre-line\">\n        The sync veBAL operation needs to be performed on Ethereum Mainnet,\n        since that is where your veBAL balance lives.\n      </p>\n\n      <p class=\"mb-5 whitespace-pre-line\">\n        Ethereum Mainnet to {{ configs[networkId].chainName }} will enable you\n        to get boosted APR’s for any pools where you stake in the new\n        boost-aware gauges.\n      </p>\n      <BalBtn\n        label=\"Go to Ethereum Mainnet\"\n        color=\"gradient\"\n        @click=\"\n          $router.push({\n            name: 'vebal',\n            params: { networkSlug: getNetworkSlug(Network.MAINNET) },\n          })\n        \"\n      />\n    </div>\n  </BalModal>\n</template>\n","<script setup lang=\"ts\">\nimport useNetwork from '@/composables/useNetwork';\nimport {\n  NetworkSyncState,\n  useCrossChainSync,\n} from '@/providers/cross-chain-sync.provider';\nimport useWeb3 from '@/services/web3/useWeb3';\n\ntype Props = {\n  shouldPokePoolsMap?: Record<string, string>;\n};\n\nconst props = defineProps<Props>();\n\ndefineEmits(['showProceedModal', 'showPokeAllGaugeModal']);\n\nconst {\n  networksSyncState,\n  tempSyncingNetworks,\n  l2VeBalBalances,\n  isLoading: isLoadingSyncState,\n} = useCrossChainSync();\n\nconst { networkId } = useNetwork();\nconst { account } = useWeb3();\n\nconst veBalSyncTip = computed(() => {\n  if (isLoadingSyncState.value) return null;\n  const state = networksSyncState.value[networkId.value];\n\n  const isUnsyncedOrSyncing =\n    state === NetworkSyncState.Unsynced &&\n    !!tempSyncingNetworks.value[account.value] &&\n    tempSyncingNetworks.value[account.value].networks.includes(networkId.value);\n\n  if (isUnsyncedOrSyncing) {\n    if (Number(l2VeBalBalances.value?.[networkId.value]) > 0) {\n      return {\n        title: 'Resync if you acquire new veBAL',\n        text: 'Newly acquired veBAL doesn’t auto-sync to L2s. Remember to resync on Ethereum Mainnet after acquiring more veBAL to continue boosting to your max.',\n      };\n    }\n\n    return {\n      title: 'Sync your veBAL to maximize your boost',\n      text: 'If you have veBAL, sync your veBAL balance from Ethereum Mainnet to max your boost while staking on Arbitrum. Resync after acquiring more veBAL to continue boosting to your max.',\n    };\n  }\n\n  if (Object.keys(props.shouldPokePoolsMap || {}).length > 0) {\n    return {\n      title: 'Poke to refresh gauges for boosted APRs',\n      text: 'After your veBAL is synced to an L2, the pool gauge remains unaware of your new balance until it is interacted with. ‘Poke all’ to gas-efficiently update all gauges. Otherwise, interact with each gauge individzually (e.g. by Claiming BAL).',\n      showPokeAllBtn: true,\n      hideBtn: true,\n    };\n  }\n\n  const isSynced = state === NetworkSyncState.Synced;\n\n  if (isSynced) {\n    return {\n      title: 'Trigger pool gauge updates to get your boosts',\n      text: 'Pool gauges don’t automatically recognize changes in veBAL until triggered. Updates are triggered when you interact with a gauge (e.g. by claiming BAL, stake/unstake or explicitly update the gauge on each individual pool page)',\n      hideBtn: true,\n    };\n  }\n});\n</script>\n\n<template>\n  <BalAlert\n    v-if=\"veBalSyncTip\"\n    :title=\"veBalSyncTip.title\"\n    type=\"tip\"\n    class=\"mb-5 w-100\"\n  >\n    <div class=\"flex items-center\">\n      <div class=\"flex-[2]\">{{ veBalSyncTip.text }}</div>\n      <div v-if=\"veBalSyncTip.showPokeAllBtn\" class=\"flex flex-1 justify-end\">\n        <BalBtn color=\"gradient\" @click=\"$emit('showPokeAllGaugeModal')\">\n          Poke all gauges\n        </BalBtn>\n      </div>\n      <div v-else-if=\"!veBalSyncTip.hideBtn\" class=\"flex flex-1 justify-end\">\n        <BalBtn color=\"gradient\" @click=\"$emit('showProceedModal')\">\n          Sync veBAL\n        </BalBtn>\n      </div>\n    </div>\n  </BalAlert>\n</template>","<script setup lang=\"ts\">\nimport useTransactions from '@/composables/useTransactions';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { useUserStaking } from '@/providers/local/user-staking.provider';\nimport useEthers from '@/composables/useEthers';\n\ninterface Props {\n  isVisible?: boolean;\n  shouldPokePoolsMap: Record<string, string>;\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  isVisible: false,\n});\n\nconst emit = defineEmits(['close', 'success']);\n\nconst { checkpointAllGauges } = useUserStaking();\nconst { addTransaction } = useTransactions();\nconst { isMismatchedNetwork } = useWeb3();\nconst { txListener } = useEthers();\n\nconst showCloseBtn = ref(false);\n\nasync function pokeAllGauges() {\n  try {\n    const tx = await checkpointAllGauges(\n      Object.values(props.shouldPokePoolsMap)\n    );\n\n    addTransaction({\n      id: tx.hash,\n      type: 'tx',\n      action: 'userGaugeCheckpoint',\n      summary: '',\n    });\n\n    await txListener(tx, {\n      onTxConfirmed: async () => {\n        emit('success');\n      },\n      onTxFailed: () => {\n        console.error('Tx failed');\n      },\n    });\n\n    return tx;\n  } catch (e) {\n    console.error(e);\n    return Promise.reject(e);\n  }\n}\n\nconst actions = [\n  {\n    label: 'Poke all gauges',\n    loadingLabel: 'Confirm poke in wallet',\n    confirmingLabel: 'Confirming poke',\n    action: async () => {\n      return pokeAllGauges();\n    },\n    stepTooltip: '',\n  },\n];\n</script>\n\n<template>\n  <BalModal\n    :show=\"isVisible\"\n    :disabled=\"isMismatchedNetwork\"\n    title=\"Poke all gauges to get boosted APRs\"\n    @close=\"emit('close')\"\n  >\n    <div class=\"flex flex-col justify-between\">\n      <div class=\"mb-12\">\n        <span class=\"mb-3\">\n          Even after syncing veBAL to an L2, pool gauges remains unaware of your\n          new balance until interacted with. This means, you are currently\n          missing out on your maximum possible boost.\n        </span>\n        <span>\n          ‘Poke gauge’ to gas-efficiently update the gauge with your new veBAL\n          balance. Otherwise, interact with a gauge to trigger the update. If\n          you already have accumulated some incentives, ‘Claim BAL’ to get your\n          incentives and trigger the update for future boosts.\n        </span>\n      </div>\n\n      <BalActionSteps\n        :actions=\"actions\"\n        primaryActionType=\"userGaugeCheckpoint\"\n        @success=\"showCloseBtn = true\"\n      />\n\n      <BalBtn\n        v-if=\"showCloseBtn\"\n        color=\"gray\"\n        outline\n        block\n        @click=\"$emit('close')\"\n      >\n        {{ $t('close') }}\n      </BalBtn>\n    </div>\n  </BalModal>\n</template>\n","<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n';\nimport PoolsTable from '@/components/tables/PoolsTable/PoolsTable.vue';\nimport { isPoolBoostsEnabled } from '@/composables/useNetwork';\nimport { configService } from '@/services/config/config.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { useUserStaking } from '@/providers/local/user-staking.provider';\nimport { Pool } from '@/services/pool/types';\nimport { useUserPools } from '@/providers/local/user-pools.provider';\nimport StakePreviewModal from '../pool/staking/StakePreviewModal.vue';\nimport ProceedToSyncModal from '@/components/contextual/pages/vebal/cross-chain-boost/ProceedToSyncModal.vue';\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\n\nimport PortfolioSyncTip from '../vebal/cross-chain-boost/PortfolioSyncTip.vue';\nimport { useCrossChainSync } from '@/providers/cross-chain-sync.provider';\n\nimport CheckpointGaugeModal from '../vebal/cross-chain-boost/CheckpointGaugeModal.vue';\nimport CheckpointAllGaugesModal from '../vebal/cross-chain-boost/CheckpointAllGaugesModal.vue';\nimport { PoolAction } from './types';\nimport { isVeBalSupported } from '@/composables/useVeBAL';\n/**\n * STATE\n */\nconst showUnstakeModal = ref(false);\nconst poolToUnstake = ref<Pool | undefined>();\n\nconst showRestakeModal = ref(false);\nconst poolToRestake = ref<Pool | undefined>();\n\nconst showProceedModal = ref(false);\nconst defaultPoolActions = [\n  PoolAction.Unstake,\n  PoolAction.Add,\n  PoolAction.Vote,\n];\n\nconst showPokeAllGaugesModal = ref(false);\n\nconst poolToCheckpoint = ref<Pool | undefined>();\nconst showCheckpointModal = ref(false);\n\n/**\n * PROVIDERS\n */\nprovidePoolStaking();\n\n/**\n * COMPOSABLES\n */\nconst {\n  stakedPools,\n  poolBoostsMap,\n  stakedShares,\n  isLoading,\n  hasNonPrefGaugesPoolsAddresses,\n  userGaugeShares,\n} = useUserStaking();\nconst { shouldPokeGauge } = useCrossChainSync();\n\nconst { refetchAllUserPools } = useUserPools();\nconst { isWalletReady, isWalletConnecting } = useWeb3();\nconst { t } = useI18n();\nconst networkName = configService.network.shortName;\n\n/**\n * COMPUTED\n */\nconst noPoolsLabel = computed(() => {\n  return isWalletReady.value || isWalletConnecting.value\n    ? t('noStakedInvestments', [networkName])\n    : t('connectYourWallet');\n});\n\nconst hiddenColumns = computed(() => {\n  const _hiddenColumns = ['poolVolume', 'migrate', 'lockEndDate', 'volume'];\n  if (!isPoolBoostsEnabled.value) _hiddenColumns.push('myBoost');\n\n  return _hiddenColumns;\n});\n\nconst poolsToRenderKey = computed(() => JSON.stringify(stakedPools.value));\n\n/**\n * METHODS\n */\nfunction handleUnstake(pool: Pool) {\n  showUnstakeModal.value = true;\n  poolToUnstake.value = pool;\n}\n\nfunction handleRestake(pool: Pool) {\n  showRestakeModal.value = true;\n  poolToRestake.value = pool;\n}\n\nfunction handleModalClose() {\n  refetchAllUserPools();\n  showUnstakeModal.value = false;\n  showRestakeModal.value = false;\n}\n\nfunction handleCheckpoint(pool: Pool) {\n  showCheckpointModal.value = true;\n  poolToCheckpoint.value = pool;\n}\n\nasync function handleUnstakeSuccess() {\n  await refetchAllUserPools();\n}\n\n// map of pool ids and pref gauges that should be poked\nconst shouldPokePoolsMap = ref<Record<string, string>>({});\n\nfunction removePoolFromPokeMap(poolAddress: string) {\n  Reflect.deleteProperty(shouldPokePoolsMap.value, poolAddress);\n}\n\nfunction resetShouldPokePoolsMap() {\n  shouldPokePoolsMap.value = {};\n}\n\nfunction onSuccessCheckpoint(poolAddress: string) {\n  showCheckpointModal.value = false;\n  poolToCheckpoint.value = undefined;\n  removePoolFromPokeMap(poolAddress);\n}\n\nwatch(\n  () => userGaugeShares.value,\n  async val => {\n    if (!val || isVeBalSupported.value) return;\n    console.log('userGaugeShares', val);\n    for (const gauge of val) {\n      try {\n        const id = gauge?.gauge.id;\n\n        if (!id) {\n          throw new Error('No gauge id');\n        }\n\n        const shouldPoke = await shouldPokeGauge(id);\n        if (shouldPoke) {\n          shouldPokePoolsMap.value[gauge.gauge.poolAddress] = id;\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  },\n  { immediate: true, deep: true }\n);\n</script>\n\n<template>\n  <div>\n    <BalStack vertical spacing=\"sm\">\n      <h5 class=\"px-4 xl:px-0\">\n        {{ $t('staking.stakedPools') }}\n      </h5>\n      <PortfolioSyncTip\n        :shouldPokePoolsMap=\"shouldPokePoolsMap\"\n        @show-proceed-modal=\"showProceedModal = true\"\n        @show-poke-all-gauge-modal=\"showPokeAllGaugesModal = true\"\n      />\n      <PoolsTable\n        :key=\"poolsToRenderKey\"\n        :data=\"stakedPools\"\n        :shares=\"stakedShares\"\n        :boosts=\"poolBoostsMap\"\n        poolsType=\"staked\"\n        :noPoolsLabel=\"noPoolsLabel\"\n        :hiddenColumns=\"hiddenColumns\"\n        sortColumn=\"myBalance\"\n        :isLoading=\"isWalletReady && isLoading\"\n        showPoolShares\n        showActions\n        showStakeActions\n        :showBoost=\"isPoolBoostsEnabled\"\n        :defaultPoolActions=\"defaultPoolActions\"\n        :shouldPokePoolsMap=\"shouldPokePoolsMap\"\n        :hasNonPrefGaugesPoolsAddresses=\"hasNonPrefGaugesPoolsAddresses\"\n        @trigger-unstake=\"handleUnstake\"\n        @trigger-restake=\"handleRestake\"\n        @trigger-vote=\"showProceedModal = true\"\n        @trigger-checkpoint=\"handleCheckpoint\"\n      />\n    </BalStack>\n\n    <!-- Unstake modal -->\n    <StakePreviewModal\n      v-if=\"poolToUnstake\"\n      :pool=\"poolToUnstake\"\n      :isVisible=\"showUnstakeModal\"\n      action=\"unstake\"\n      @close=\"handleModalClose\"\n      @success=\"handleUnstakeSuccess\"\n    />\n\n    <!-- Restake modal -->\n    <StakePreviewModal\n      v-if=\"poolToRestake\"\n      :pool=\"poolToRestake\"\n      :isVisible=\"showRestakeModal\"\n      action=\"restake\"\n      @close=\"handleModalClose\"\n      @success=\"handleUnstakeSuccess\"\n    />\n\n    <ProceedToSyncModal\n      :isVisible=\"showProceedModal\"\n      @close=\"showProceedModal = false\"\n    />\n\n    <CheckpointAllGaugesModal\n      :shouldPokePoolsMap=\"shouldPokePoolsMap\"\n      :isVisible=\"showPokeAllGaugesModal\"\n      @close=\"showPokeAllGaugesModal = false\"\n      @success=\"resetShouldPokePoolsMap\"\n    />\n\n    <CheckpointGaugeModal\n      v-if=\"poolToCheckpoint\"\n      :poolAddress=\"poolToCheckpoint.address\"\n      :isVisible=\"showCheckpointModal\"\n      @close=\"showCheckpointModal = false\"\n      @success=\"onSuccessCheckpoint\"\n    />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n';\nimport PoolsTable from '@/components/tables/PoolsTable/PoolsTable.vue';\nimport { configService } from '@/services/config/config.service';\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { useUserPools } from '@/providers/local/user-pools.provider';\nimport StakePreviewModal from '@/components/contextual/pages/pool/staking/StakePreviewModal.vue';\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\nimport { PoolAction } from './types';\n\n/**\n * STATE\n */\nconst showStakeModal = ref(false);\nconst stakePool = ref<Pool | undefined>();\nconst networkName = configService.network.shortName;\nconst hiddenColumns = ['poolVolume', 'migrate', 'lockEndDate', 'volume'];\n\n/**\n * PROVIDERS\n */\nprovidePoolStaking();\n\n/**\n * COMPOSABLES\n */\nconst { isWalletReady, isWalletConnecting } = useWeb3();\nconst { t } = useI18n();\nconst {\n  unstakedPools,\n  userPoolShares,\n  refetchAllUserPools,\n  isLoading: isLoadingPools,\n} = useUserPools();\nconst defaultPoolActions = [\n  PoolAction.Stake,\n  PoolAction.Add,\n  PoolAction.Remove,\n];\n\n/**\n * COMPUTED\n */\nconst noPoolsLabel = computed(() => {\n  return isWalletReady.value || isWalletConnecting.value\n    ? t('noUnstakedInvestments', [networkName])\n    : t('connectYourWallet');\n});\n\nconst poolsToRenderKey = computed(() => JSON.stringify(unstakedPools.value));\n\n/**\n * METHODS\n */\nfunction handleStake(pool: Pool) {\n  showStakeModal.value = true;\n  stakePool.value = pool;\n}\n\nfunction handleModalClose() {\n  refetchAllUserPools();\n  showStakeModal.value = false;\n}\n\nasync function handleStakeSuccess() {\n  await refetchAllUserPools();\n}\n\nonMounted(() => {\n  refetchAllUserPools();\n});\n</script>\n\n<template>\n  <div>\n    <BalStack vertical spacing=\"sm\">\n      <h5 class=\"px-4 xl:px-0\">\n        {{ $t('staking.unstakedPools') }}\n      </h5>\n      <PoolsTable\n        :key=\"poolsToRenderKey\"\n        :isLoading=\"isWalletReady && isLoadingPools\"\n        :data=\"unstakedPools\"\n        :shares=\"userPoolShares\"\n        :noPoolsLabel=\"noPoolsLabel\"\n        sortColumn=\"myBalance\"\n        :hiddenColumns=\"hiddenColumns\"\n        :defaultPoolActions=\"defaultPoolActions\"\n        showPoolShares\n        showActions\n        @trigger-stake=\"handleStake\"\n      />\n    </BalStack>\n    <StakePreviewModal\n      v-if=\"stakePool\"\n      :pool=\"stakePool\"\n      :isVisible=\"showStakeModal\"\n      action=\"stake\"\n      @close=\"handleModalClose\"\n      @success=\"handleStakeSuccess\"\n    />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\n\nimport PoolsTable from '@/components/tables/PoolsTable/PoolsTable.vue';\nimport { useLock } from '@/composables/useLock';\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\nimport { Pool } from '@/services/pool/types';\n\n/**\n * PROPS\n */\ntype Props = {\n  lockPool: Pool;\n  lock?: VeBalLockInfo;\n};\nconst props = defineProps<Props>();\n\n/** COMPOSABLES */\nconst { totalLockedShares } = useLock();\n\n/** COMPUTED */\nconst lockPools = computed<Pool[]>(() => {\n  if (props.lockPool) {\n    return [\n      {\n        ...props.lockPool,\n        lockedEndDate:\n          props.lock?.hasExistingLock && !props.lock?.isExpired\n            ? props.lock?.lockedEndDate\n            : undefined,\n      },\n    ];\n  }\n  return [];\n});\n\nconst poolShares = computed(\n  (): Record<string, string> => ({\n    [props.lockPool.id]: totalLockedShares.value,\n  })\n);\n\nconst poolsToRenderKey = computed(() => JSON.stringify(lockPools.value));\n\nconst hiddenColumns = ['poolVolume', 'migrate', 'actions', 'myBoost'];\n</script>\n\n<template>\n  <div>\n    <BalStack vertical spacing=\"sm\">\n      <h5 class=\"px-4 xl:px-0\">\n        {{ $t('veBalProtocolLiquidity') }}\n      </h5>\n      <PoolsTable\n        :key=\"poolsToRenderKey\"\n        :data=\"lockPools\"\n        :shares=\"poolShares\"\n        :hiddenColumns=\"hiddenColumns\"\n        sortColumn=\"myBalance\"\n        showPoolShares\n      />\n    </BalStack>\n  </div>\n</template>\n","export default \"__VITE_ASSET__13455e8f__\"","<template>\n  <div class=\"app-hero\">\n    <div class=\"mx-auto w-full max-w-lg\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<style>\n.app-hero {\n  @apply bg-cover bg-center flex items-center justify-center text-center px-4;\n\n  transition: all 0.3s ease-in-out;\n  background-image: url('/images/backgrounds/bg-header.svg');\n}\n</style>\n","<script lang=\"ts\" setup>\nimport useDarkMode from '@/composables/useDarkMode';\nimport useFathom from '@/composables/useFathom';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * COMPOSABLES\n */\nconst { startConnectWithInjectedProvider } = useWeb3();\nconst { trackGoal, Goals } = useFathom();\nconst { darkMode } = useDarkMode();\n\n/**\n * METHODS\n */\nfunction onClickConnect() {\n  startConnectWithInjectedProvider();\n  trackGoal(Goals.ClickHeroConnectWallet);\n}\n</script>\n\n<template>\n  <BalBtn :color=\"darkMode ? 'blue' : 'white'\" @click=\"onClickConnect\">\n    {{ $t('connectWallet') }}\n  </BalBtn>\n</template>\n","<script lang=\"ts\" setup>\nimport { computed } from 'vue';\n\nimport AppHero from '@/components/heros/AppHero.vue';\nimport { useLock } from '@/composables/useLock';\nimport useNetwork from '@/composables/useNetwork';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport HeroConnectWalletButton from './HeroConnectWalletButton.vue';\nimport { useUserPools } from '@/providers/local/user-pools.provider';\nimport { isVeBalSupported } from '@/composables/useVeBAL';\nimport ProceedToSyncModal from '../contextual/pages/vebal/cross-chain-boost/ProceedToSyncModal.vue';\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport {\n  useCrossChainSync,\n  veBalSyncSupportedNetworks,\n} from '@/providers/cross-chain-sync.provider';\nimport { NetworkSyncState } from '@/providers/cross-chain-sync.provider';\n\n/**\n * COMPOSABLES\n */\nconst showProceedModal = ref(false);\nconst { fNum } = useNumbers();\nconst { isWalletReady, isWalletConnecting } = useWeb3();\nconst { totalFiatValue, isLoading: isLoadingPools } = useUserPools();\nconst { totalLockedValue } = useLock();\nconst { networkId } = useNetwork();\nconst {\n  l2VeBalBalances,\n  isLoading: isLoadingSyncState,\n  networksSyncState,\n} = useCrossChainSync();\n/**\n * COMPUTED\n */\nconst classes = computed(() => ({\n  ['h-48']: !isWalletReady.value && !isWalletConnecting.value,\n  ['h-44']: isWalletReady.value || isWalletConnecting.value,\n}));\n\nconst totalInvestedLabel = computed((): string =>\n  fNum(totalFiatValue.value, FNumFormats.fiat)\n);\n\nconst totalVeBalLabel = computed((): string =>\n  fNum(totalLockedValue.value, FNumFormats.fiat)\n);\n\nconst isLoadingTotalValue = computed((): boolean => isLoadingPools.value);\n\nconst showVeBalBalanceTooltip = computed(() => {\n  if (!veBalSyncSupportedNetworks.includes(networkId.value)) {\n    return false;\n  }\n\n  if (networksSyncState.value[networkId.value] === NetworkSyncState.Synced) {\n    return false;\n  }\n\n  return true;\n});\n\nconst veBalBalanceTooltip = computed(() => {\n  return `Sync your veBAL balance from Ethereum Mainnet (L1) to ${\n    configs[networkId.value].chainName\n  } to get your max staking boost. Sync via the veBAL page on L1. Note: If you have just synced on L1, it may take up to an hour to display here.`;\n});\n</script>\n\n<template>\n  <AppHero :class=\"classes\">\n    <h1\n      class=\"mb-2 font-body text-base font-medium text-white opacity-90\"\n      v-text=\"$t('myBalancerBalance')\"\n    />\n\n    <template v-if=\"isWalletReady || isWalletConnecting\">\n      <BalLoadingBlock\n        v-if=\"isLoadingTotalValue\"\n        class=\"mx-auto w-40 h-10\"\n        white\n      />\n      <div v-else class=\"mb-1 text-3xl font-semibold text-white\">\n        {{ totalInvestedLabel }}\n      </div>\n      <div v-if=\"!isVeBalSupported\" class=\"inline-block relative mt-2\">\n        <BalLoadingBlock\n          v-if=\"isLoadingTotalValue || isLoadingSyncState\"\n          class=\"mx-auto w-40 h-8\"\n          white\n        />\n        <div\n          v-else\n          class=\"group flex items-center px-3 h-8 text-sm font-medium text-yellow-500 hover:text-white focus:text-white rounded-tr rounded-bl border border-yellow-500 transition-colors cursor-pointer vebal-banner\"\n          @click=\"showProceedModal = true\"\n        >\n          <span\n            v-if=\"\n              networkId !== Network.MAINNET &&\n              Number(l2VeBalBalances?.[networkId]) > 0\n            \"\n          >\n            {{ l2VeBalBalances?.[networkId] }}\n            {{ $t('veBAL.hero.tokens.veBAL') }}\n          </span>\n          <span v-else-if=\"totalLockedValue === '0'\"\n            >{{ totalLockedValue }} {{ $t('veBAL.hero.tokens.veBAL') }}</span\n          >\n          <span v-else>{{ $t('inclXInVeBal', [totalVeBalLabel]) }}</span>\n\n          <BalTooltip\n            v-if=\"showVeBalBalanceTooltip\"\n            :text=\"veBalBalanceTooltip\"\n          >\n            <template #activator>\n              <img\n                src=\"/src/assets/images/icons/frame-loading.svg\"\n                alt=\"\"\n                class=\"rounded-full\"\n              />\n            </template>\n          </BalTooltip>\n        </div>\n      </div>\n    </template>\n    <template v-else>\n      <div class=\"text-3xl font-semibold text-white\">\n        {{ fNum('0', FNumFormats.fiat) }}\n      </div>\n      <HeroConnectWalletButton class=\"mt-4\" />\n    </template>\n\n    <ProceedToSyncModal\n      :isVisible=\"showProceedModal\"\n      @close=\"showProceedModal = false\"\n    />\n  </AppHero>\n</template>\n\n<style>\n.vebal-banner::before {\n  @apply border border-yellow-500;\n\n  content: '';\n  width: 16px;\n  height: 6px;\n  left: 0;\n  top: -5px;\n  position: absolute;\n  border-top-left-radius: 8px;\n}\n\n.vebal-banner::after {\n  @apply border border-yellow-500;\n\n  content: '';\n  width: 16px;\n  height: 6px;\n  bottom: -5px;\n  right: 0;\n  position: absolute;\n  border-bottom-right-radius: 8px;\n}\n</style>\n","<script setup lang=\"ts\">\nimport StakedPoolsTable from '@/components/contextual/pages/pools/StakedPoolsTable.vue';\nimport UnstakedPoolsTable from '@/components/contextual/pages/pools/UnstakedPoolsTable.vue';\nimport VeBalPoolTable from '@/components/contextual/pages/pools/VeBalPoolTable.vue';\nimport PortfolioPageHero from '@/components/heros/PortfolioPageHero.vue';\nimport { useLock } from '@/composables/useLock';\nimport { providerUserPools } from '@/providers/local/user-pools.provider';\nimport { provideUserStaking } from '@/providers/local/user-staking.provider';\nimport UserInvestedInAffectedPoolAlert from '@/pages/recovery-exit/UserInvestedInAffectedPoolAlert.vue';\n\n/**\n * PROVIDERS\n */\nconst userStaking = provideUserStaking();\nproviderUserPools(userStaking);\n\n/**\n * COMPOSABLES\n */\nconst { lockPool, lock } = useLock();\n</script>\n\n<template>\n  <div>\n    <PortfolioPageHero />\n    <div class=\"xl:container xl:px-4 pt-10 md:pt-12 xl:mx-auto\">\n      <BalStack vertical>\n        <UserInvestedInAffectedPoolAlert />\n        <div class=\"px-4 xl:px-0\">\n          <BalStack horizontal justify=\"between\" align=\"center\">\n            <h3>{{ $t('myLiquidityInBalancerPools') }}</h3>\n          </BalStack>\n        </div>\n        <BalStack vertical spacing=\"2xl\">\n          <UnstakedPoolsTable />\n          <StakedPoolsTable />\n          <VeBalPoolTable\n            v-if=\"lockPool && Number(lock?.lockedAmount) > 0\"\n            :lock=\"lock\"\n            :lockPool=\"lockPool\"\n          />\n        </BalStack>\n      </BalStack>\n    </div>\n  </div>\n</template>\n"],"names":["networkId","getNetworkSlug","useNetwork","props","__props","networksSyncState","tempSyncingNetworks","l2VeBalBalances","isLoadingSyncState","useCrossChainSync","account","useWeb3","veBalSyncTip","computed","state","NetworkSyncState","_a","emit","__emit","checkpointAllGauges","useUserStaking","addTransaction","useTransactions","isMismatchedNetwork","txListener","useEthers","showCloseBtn","ref","pokeAllGauges","tx","e","actions","showUnstakeModal","poolToUnstake","showRestakeModal","poolToRestake","showProceedModal","defaultPoolActions","PoolAction","showPokeAllGaugesModal","poolToCheckpoint","showCheckpointModal","providePoolStaking","stakedPools","poolBoostsMap","stakedShares","isLoading","hasNonPrefGaugesPoolsAddresses","userGaugeShares","shouldPokeGauge","refetchAllUserPools","useUserPools","isWalletReady","isWalletConnecting","t","useI18n","networkName","configService","noPoolsLabel","hiddenColumns","_hiddenColumns","isPoolBoostsEnabled","poolsToRenderKey","handleUnstake","pool","handleRestake","handleModalClose","handleCheckpoint","handleUnstakeSuccess","shouldPokePoolsMap","removePoolFromPokeMap","poolAddress","resetShouldPokePoolsMap","onSuccessCheckpoint","watch","val","isVeBalSupported","gauge","id","showStakeModal","stakePool","unstakedPools","userPoolShares","isLoadingPools","handleStake","handleStakeSuccess","onMounted","totalLockedShares","useLock","lockPools","_b","_c","poolShares","_imports_0","_hoisted_1","_sfc_render","_ctx","_cache","_openBlock","_createElementBlock","startConnectWithInjectedProvider","trackGoal","Goals","useFathom","darkMode","useDarkMode","onClickConnect","fNum","useNumbers","totalFiatValue","totalLockedValue","classes","totalInvestedLabel","FNumFormats","totalVeBalLabel","isLoadingTotalValue","showVeBalBalanceTooltip","veBalSyncSupportedNetworks","veBalBalanceTooltip","configs","userStaking","provideUserStaking","providerUserPools","lockPool","lock"],"mappings":"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"}