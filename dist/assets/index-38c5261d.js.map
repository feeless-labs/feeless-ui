{"version":3,"mappings":"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","names":["variants","cva","emit","__emit","selectTokenModal","ref","veBalTokenInfo","useVeBal","upToMediumBreakpoint","useBreakpoints","addToken","token","_token","getAddress","NATIVE_ASSET_ADDRESS","WRAPPED_NATIVE_ASSET_ADDRESS","onClick","t","useI18n","featuredProtocols","EXTERNAL_LINKS","usePoolsQuery","filterOptions","options","shouldInjectTokens","injectTokens","tokenMeta","useTokens","networkId","useNetwork","poolsRepository","initializePoolsRepository","FallbackRepository","getPoolsFallbackRepository","buildRepositories","initializeDecoratedSubgraphRepository","options2","pools","balancerSubgraphService","getQueryArgs","poolDecorator","PoolDecorator","decoratedPools","repositories","subgraphRepository","tokens","poolIds","poolTypes","sortField","poolAttributes","hasPoolIdFilters","hasPoolTypeFilters","hasPoolAttributeFilters","tokensListFilterOperation","tokenListFormatted","address","orderBy","queryArgs","configService","POOLS","PoolAttributeFilter","weeksAgoInSecs","getFetchOptions","pageParam","fetchArgs","customSort","poolsSortField","b","aprA","_a","_b","volumeA","bnum","watch","poolsStoreService","queryKey","QUERY_KEYS","queryFn","isRef","fetchOptions","skip","e","savedPools","lastPage","useInfiniteQuery","usePools","filterTokens","computed","poolsQuery","paginatedPools","flatten","page","isLoading","isQueryLoading","hasNextPage","isFetchingNextPage","loadMorePools","newPools","pool","tokenTreeLeafs","props","__props","PoolTypeFilter","attributeOptions","_selectedPoolType","_selectedAttributes","reactive","activeFiltersNum","newSelectedPoolType","newVal","handlePoolTypeCheck","event","option","handleAttributeCheck","index","lrtPools","chainIdToNetworkFileMap","usePoolGroups","chainId","fileName","onBeforeMount","__variableDynamicImportRuntimeHelper","__vitePreload","featuredProtocolsSentinel","isFeaturedProtocolsVisible","initSortCol","useRoute","lsGet","LS_KEYS","poolTypeFilter","filterPoolIds","filterPoolTypes","filterPoolAttributes","router","useRouter","getToken","appNetworkConfig","isElementSupported","selectedTokens","addSelectedToken","removeSelectedToken","usePoolFilters","upToSmallBreakpoint","networkSlug","networkConfig","isPaginated","navigateToCreatePool","onColumnSort","columnId","lsSet","updatePoolFilters","feature","PoolType","removeAttributeFilter","attribute","newPoolTypeFilter"],"sources":["../../src/components/_global/BalTag/BalTag.vue","../../src/components/inputs/TokenSearchInput.vue","../../src/components/sections/FeaturedProtocols.vue","../../src/composables/queries/usePoolsQueryDemo.ts","../../src/composables/pools/usePoolsDemo.ts","../../src/components/inputs/PoolFeatureSelect.vue","../../src/composables/usePoolGroups.ts","../../src/pages/index.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { VariantProps, cva } from 'class-variance-authority';\nimport { cn } from '@/lib/utils/styles';\n\nconst variants = cva('flex flex-row items-center font-medium rounded-full', {\n  variants: {\n    color: {\n      blue: 'bg-blue-50 dark:bg-blue-900 border border-blue-200 dark:border-blue-600 text-blue-500 dark:text-blue-300',\n    },\n    size: {\n      md: 'shadow-sm text-sm py-1 px-2 space-x-1',\n    },\n  },\n  defaultVariants: {\n    color: 'blue',\n    size: 'md',\n  },\n});\n\ntype TagVariantProps = VariantProps<typeof variants>;\n\nwithDefaults(\n  defineProps<{\n    color?: TagVariantProps['color'];\n    size?: TagVariantProps['size'];\n    closeable?: boolean;\n    iconSize?: 'xs' | 'sm' | 'md' | 'lg';\n  }>(),\n  {\n    iconSize: 'xs',\n  }\n);\n\nconst emit = defineEmits(['closed']);\n</script>\n\n<template>\n  <BalHStack :class=\"cn(variants({ color, size }))\">\n    <slot />\n    <BalIcon\n      v-if=\"closeable\"\n      name=\"x\"\n      :size=\"iconSize\"\n      class=\"cursor-pointer\"\n      @click=\"emit('closed')\"\n    />\n  </BalHStack>\n</template>\n","<script setup lang=\"ts\">\nimport { getAddress } from '@ethersproject/address';\nimport { compact } from 'lodash';\nimport { ref } from 'vue';\nimport SelectTokenModal from '@/components/modals/SelectTokenModal/SelectTokenModal.vue';\nimport useVeBal from '@/composables/useVeBAL';\nimport {\n  NATIVE_ASSET_ADDRESS,\n  WRAPPED_NATIVE_ASSET_ADDRESS,\n} from '@/constants/tokens';\nimport useBreakpoints from '@/composables/useBreakpoints';\n\ntype Props = {\n  modelValue: string[];\n};\n\nwithDefaults(defineProps<Props>(), {\n  modelValue: () => [],\n});\n\nconst emit = defineEmits<{\n  (e: 'add', token: string): void;\n  (e: 'remove', token: string): void;\n}>();\n\n/**\n * STATE\n */\nconst selectTokenModal = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { veBalTokenInfo } = useVeBal();\nconst { upToMediumBreakpoint } = useBreakpoints();\n\n/**\n * METHODS\n */\nfunction addToken(token: string) {\n  let _token = token;\n  // special case for the native asset where we want it to filter as\n  // wrapped native asset regardless as the native asset can't be in pools\n  if (getAddress(token) === NATIVE_ASSET_ADDRESS) {\n    _token = WRAPPED_NATIVE_ASSET_ADDRESS;\n  }\n  emit('add', _token);\n}\n\nfunction onClick() {\n  selectTokenModal.value = true;\n}\n</script>\n<template>\n  <div>\n    <div class=\"flex flex-wrap gap-x-6 gap-y-3 items-stretch\">\n      <BalBtn\n        color=\"white\"\n        size=\"sm\"\n        :block=\"upToMediumBreakpoint\"\n        justifyContent=\"between\"\n        @click=\"onClick\"\n      >\n        <BalIcon name=\"search\" size=\"sm\" class=\"mr-2\" />\n        {{ $t('filterByToken') }}\n      </BalBtn>\n    </div>\n    <teleport to=\"#modal\">\n      <SelectTokenModal\n        v-if=\"selectTokenModal\"\n        :excludedTokens=\"compact([...modelValue, veBalTokenInfo?.address])\"\n        @close=\"selectTokenModal = false\"\n        @select=\"addToken\"\n      />\n    </teleport>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n';\n\nimport { EXTERNAL_LINKS } from '@/constants/links';\n\nconst { t } = useI18n();\n\nconst featuredProtocols = [\n  {\n    title: 'Xave',\n    description: t('featuredProtocols.Xave.description'),\n    linkText: t('featuredProtocols.Xave.linkText'),\n    imgSrc: '/images/banners/xave.jpg',\n    link: EXTERNAL_LINKS.Xave.Home,\n  },\n  {\n    title: 'Fjord Foundry',\n    description: t('featuredProtocols.Copper.description'),\n    linkText: t('featuredProtocols.Copper.linkText'),\n    imgSrc: '/images/banners/fjord.png',\n    link: EXTERNAL_LINKS.Copper.Home,\n  },\n  {\n    title: 'Gyroscope',\n    description: t('featuredProtocols.Gyroscope.description'),\n    linkText: t('featuredProtocols.Gyroscope.linkText'),\n    imgSrc: '/images/banners/gyroscope.jpg',\n    link: EXTERNAL_LINKS.Gyroscope.Home,\n  },\n\n  {\n    title: 'Beethoven X',\n    description: t('featuredProtocols.Beets.description'),\n    linkText: t('featuredProtocols.Beets.linkText'),\n    imgSrc: '/images/banners/beets.jpg',\n    link: EXTERNAL_LINKS.Beets.Home,\n  },\n];\n</script>\n\n<template>\n  <div v-once class=\"featured-protocols\">\n    <h3 class=\"mb-4\">\n      {{ $t('featuredProtocols.title') }}\n    </h3>\n    <div class=\"grid grid-cols-12 gap-4\">\n      <div\n        v-for=\"{\n          title,\n          imgSrc,\n          description,\n          linkText,\n          link,\n        } in featuredProtocols\"\n        :key=\"title\"\n        class=\"col-span-12 xs:col-span-6 lg:col-span-3\"\n      >\n        <BalCard\n          :title=\"title\"\n          :imgSrc=\"imgSrc\"\n          class=\"hover:shadow-xl transition-shadow\"\n          hFull\n          growContent\n        >\n          <p class=\"text-sm leading-5\">\n            {{ description }}\n          </p>\n          <template #footer>\n            <BalLink :href=\"link\" external>\n              <span class=\"text-sm font-medium\">{{ linkText }}</span>\n              <BalIcon\n                name=\"arrow-up-right\"\n                size=\"sm\"\n                class=\"relative top-0.5 ml-0.5\"\n              />\n            </BalLink>\n          </template>\n        </BalCard>\n      </div>\n    </div>\n  </div>\n</template>\n<style scoped>\n:deep(.card-container) {\n  justify-content: space-between;\n  height: 100%;\n}\n\n.featured-protocols :deep(.feature) {\n  height: 8rem;\n}\n\n.featured-protocols :deep(.content) {\n  @apply pt-1;\n}\n</style>\n","import { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\n\nimport { POOLS } from '@/constants/pools';\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { Pool } from '@/services/pool/types';\n\nimport useNetwork from '../useNetwork';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { configService } from '@/services/config/config.service';\nimport { GraphQLArgs, PoolsRepositoryFetchOptions } from '@feeless/sdk';\nimport { getPoolsFallbackRepository } from '@/dependencies/PoolsFallbackRepository';\nimport { PoolDecorator } from '@/services/pool/decorators/pool.decorator';\nimport { flatten } from 'lodash';\nimport { tokenTreeLeafs } from '../usePoolHelpers';\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\n\nimport { bnum } from '@/lib/utils';\nimport { PoolAttributeFilter, PoolFilterOptions } from '@/types/pools';\nimport { weeksAgoInSecs } from '../useTime';\n\ntype PoolsQueryResponse = {\n  pools: Pool[];\n  skip?: number;\n};\n\nexport default function usePoolsQuery(\n  filterOptions: PoolFilterOptions,\n  options: UseInfiniteQueryOptions<PoolsQueryResponse> = { enabled: true },\n  shouldInjectTokens = false\n) {\n  /**\n   * COMPOSABLES\n   */\n  const { injectTokens, tokens: tokenMeta } = useTokens();\n  const { networkId } = useNetwork();\n  let poolsRepository = initializePoolsRepository();\n\n  /**\n   * METHODS\n   */\n\n  function initializePoolsRepository() {\n    const FallbackRepository = getPoolsFallbackRepository();\n    const fallbackRepository = new FallbackRepository(buildRepositories(), {\n      timeout: 30 * 1000,\n    });\n    return fallbackRepository;\n  }\n\n  function initializeDecoratedSubgraphRepository() {\n    return {\n      fetch: async (options: PoolsRepositoryFetchOptions): Promise<Pool[]> => {\n        console.assert(\"start to request pools\");\n        const pools = await balancerSubgraphService.pools.get(\n          getQueryArgs(options)\n        );\n\n        console.assert(\"number of pools:\" + pools.length);\n        const poolDecorator = new PoolDecorator(pools);\n        let decoratedPools = await poolDecorator.decorate(tokenMeta.value);\n\n  \n        decoratedPools = await poolDecorator.reCalculateTotalLiquidities();\n\n        return decoratedPools;\n      },\n    };\n  }\n\n  function buildRepositories() {\n    const repositories: any[] = [];\n    const subgraphRepository = initializeDecoratedSubgraphRepository();\n    repositories.push(subgraphRepository);\n\n    return repositories;\n  }\n\n  function getQueryArgs(options: PoolsRepositoryFetchOptions): GraphQLArgs {\n    const { tokens, poolIds, poolTypes, sortField, poolAttributes } =\n      filterOptions.value;\n    const hasPoolIdFilters = !!poolIds?.length && poolIds?.length > 0;\n    const hasPoolTypeFilters = !!poolTypes?.length;\n    const hasPoolAttributeFilters = !!poolAttributes?.length;\n\n    const tokensListFilterOperation = filterOptions.value.useExactTokens\n      ? 'eq'\n      : 'contains';\n\n    const tokenListFormatted =\n      tokens?.map(address => address.toLowerCase()) || [];\n\n    const orderBy = 'totalLiquidity';\n\n    const queryArgs: GraphQLArgs = {\n      chainId: configService.network.chainId,\n      orderBy,\n      orderDirection: 'desc',\n      where: {\n        tokensList: { [tokensListFilterOperation]: tokenListFormatted },\n        poolType: { in: POOLS.IncludedPoolTypes },\n        totalShares: { gt: 0.00001 },\n        id: { not_in: POOLS.BlockList },\n      },\n    };\n\n    if (queryArgs.where && hasPoolTypeFilters && !!poolTypes?.length) {\n      queryArgs.where.poolType = {\n        in: poolTypes,\n      };\n    }\n\n    if (queryArgs.where && hasPoolIdFilters) {\n      queryArgs.where.id = { in: filterOptions.value.poolIds };\n    }\n    if (options.first) {\n      queryArgs.first = filterOptions.value.first || options.first;\n    }\n    if (options.skip) {\n      queryArgs.skip = options.skip;\n    }\n\n    if (\n      queryArgs.where &&\n      hasPoolAttributeFilters &&\n      poolAttributes.includes(PoolAttributeFilter.New)\n    ) {\n      queryArgs.where.createTime = { gt: weeksAgoInSecs(1) };\n    }\n\n    return queryArgs;\n  }\n\n  function getFetchOptions(pageParam = 0): PoolsRepositoryFetchOptions {\n    const fetchArgs: PoolsRepositoryFetchOptions = {};\n\n    fetchArgs.first = filterOptions.value.pageSize || POOLS.Pagination.PerPage;\n\n    if (pageParam && pageParam > 0) {\n      fetchArgs.skip = pageParam;\n    }\n\n    return fetchArgs;\n  }\n\n  function customSort(pools: Pool[]): Pool[] {\n    const poolsSortField = filterOptions.value.sortField || 'totalLiquidity';\n\n    if (poolsSortField === 'totalLiquidity') return pools;\n\n    if (poolsSortField === 'apr') {\n      return pools.sort((a, b) => {\n        const aprA = a?.apr?.max ?? 0;\n        const aprB = b?.apr?.max ?? 0;\n        return aprB - aprA;\n      });\n    } else if (poolsSortField === 'volume') {\n      return pools.sort((a, b) => {\n        const volumeA = bnum(a?.totalSwapVolume ?? 0);\n        const volumeB = bnum(b?.totalSwapVolume ?? 0);\n        return volumeB.minus(volumeA).toNumber();\n      });\n    }\n\n    return pools;\n  }\n\n  /**\n   *  When filterTokens changes, re-initialize the repositories as their queries\n   *  need to change to filter for those tokens\n   */\n  watch(\n    filterOptions,\n    () => {\n      poolsRepository = initializePoolsRepository();\n      poolsStoreService.setPools([]);\n    },\n    { deep: true }\n  );\n\n  /**\n   * QUERY KEY\n   */\n  const queryKey = QUERY_KEYS.Pools.All(networkId, filterOptions);\n\n  /**\n   * QUERY FUNCTION\n   */\n  const queryFn = async ({ pageParam = 0 }) => {\n    if (\n      !options.enabled ||\n      (isRef(options.enabled) && !options.enabled.value)\n    ) {\n      return {\n        pools: [],\n        skip: 0,\n      };\n    }\n    const fetchOptions = getFetchOptions(pageParam);\n    const skip = (fetchOptions.first || 0) + (fetchOptions.skip || 0);\n    try {\n      let pools: Pool[] = await poolsRepository.fetch(fetchOptions);\n      pools = customSort(pools);\n\n      poolsStoreService.addPools(pools);\n\n      return {\n        pools,\n        skip,\n      };\n    } catch (e) {\n      const savedPools = poolsStoreService.pools.value;\n      if (savedPools && savedPools.length > 0) {\n        return { pools: savedPools, skip };\n      }\n      throw e;\n    }\n  };\n\n  options.getNextPageParam = (lastPage: PoolsQueryResponse) =>\n    lastPage.skip || 0;\n\n  return useInfiniteQuery<PoolsQueryResponse>(queryKey, queryFn, options);\n}\n","import { flatten } from 'lodash';\nimport { computed, Ref, ref, watch } from 'vue';\nimport usePoolsQuery from '@/composables/queries/usePoolsQueryDemo';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { Pool, PoolType } from '@/services/pool/types';\nimport { tokenTreeLeafs } from '../usePoolHelpers';\nimport { PoolAttributeFilter, PoolFilterOptions } from '@/types/pools';\n\ntype Props = {\n  filterTokens?: Ref<string[]>;\n  sortField?: Ref<string>;\n  poolIds?: Ref<string[]>;\n  poolTypes?: Ref<PoolType[]>;\n  poolAttributes?: Ref<PoolAttributeFilter[]>;\n};\n\nexport default function usePools({\n  filterTokens = ref([]),\n  sortField = ref('totalLiquidity'),\n  poolIds = ref([]),\n  poolTypes = ref([]),\n  poolAttributes = ref([]),\n}: Props) {\n  const filterOptions: PoolFilterOptions = computed(() => ({\n    tokens: filterTokens.value,\n    sortField: sortField.value,\n    poolIds: poolIds.value,\n    poolTypes: poolTypes.value,\n    poolAttributes: poolAttributes.value,\n  }));\n\n  /**\n   * COMPOSABLES\n   */\n  const poolsQuery = usePoolsQuery(\n    filterOptions,\n    { enabled: true, refetchOnWindowFocus: false, keepPreviousData: true },\n    false\n  );\n\n  const { injectTokens } = useTokens();\n\n  /**\n   * COMPUTED\n   */\n  const pools = computed<Pool[]>(() => {\n    const paginatedPools = poolsQuery.data.value;\n\n    return paginatedPools\n      ? flatten(paginatedPools.pages.map(page => page.pools))\n      : [];\n  });\n\n  const isLoading = computed(() => isQueryLoading(poolsQuery));\n\n  const hasNextPage = computed(() => poolsQuery.hasNextPage?.value);\n  const isFetchingNextPage = computed(\n    () => poolsQuery.isFetchingNextPage?.value\n  );\n\n  /**\n   * METHODS\n   */\n  function loadMorePools() {\n    poolsQuery.fetchNextPage();\n  }\n\n  /**\n   * WATCHERS\n   */\n  watch(pools, newPools => {\n    const tokens = flatten(\n      newPools.map(pool => [\n        ...pool.tokensList,\n        ...tokenTreeLeafs(pool.tokens),\n        pool.address,\n      ])\n    );\n    //injectTokens(tokens);\n  });\n\n  return {\n    pools,\n    isLoading,\n    hasNextPage,\n    isFetchingNextPage,\n    // methods\n    loadMorePools,\n  };\n}\n","\n<script setup lang=\"ts\">\nimport { PoolTypeFilter, PoolAttributeFilter } from '@/types/pools';\n\ntype Props = {\n  selectedPoolType: PoolTypeFilter | undefined;\n  selectedAttributes: PoolAttributeFilter[];\n};\n\nconst props = defineProps<Props>();\n\nconst emit = defineEmits<{\n  (e: 'update:selectedPoolType', value: PoolTypeFilter | undefined): void;\n  (e: 'update:selectedAttributes', value: PoolAttributeFilter[]): void;\n}>();\n\nconst options = [\n  PoolTypeFilter.Weighted,\n  PoolTypeFilter.Stable,\n  PoolTypeFilter.CLP,\n  PoolTypeFilter.LBP,\n  PoolTypeFilter.LRT,\n];\n\nconst attributeOptions = [PoolAttributeFilter.New];\n\nconst _selectedPoolType = ref<PoolTypeFilter>();\nconst _selectedAttributes = reactive<PoolAttributeFilter[]>([]);\nconst activeFiltersNum = computed((): number => {\n  return _selectedAttributes.length + (_selectedPoolType.value ? 1 : 0);\n});\n\nwatch(\n  () => props.selectedPoolType,\n  newSelectedPoolType => {\n    _selectedPoolType.value = newSelectedPoolType;\n  }\n);\n\nwatch(_selectedPoolType, newVal => {\n  emit('update:selectedPoolType', newVal);\n});\n\nwatch(_selectedAttributes, newVal => {\n  emit('update:selectedAttributes', newVal);\n});\n\nfunction handlePoolTypeCheck(event, option) {\n  if (event.target.checked) {\n    _selectedPoolType.value = option;\n  } else {\n    _selectedPoolType.value = undefined;\n  }\n}\n\nfunction handleAttributeCheck(event, option) {\n  if (event.target.checked) {\n    _selectedAttributes.push(option);\n  } else {\n    const index = _selectedAttributes.indexOf(option);\n    _selectedAttributes.splice(index, 1);\n  }\n}\n</script>\n\n<template>\n  <BalPopover minWidth=\"40\" align=\"left\">\n    <template #activator>\n      <BalBtn color=\"white\" size=\"sm\">\n        <BalIcon name=\"filter\" size=\"sm\" class=\"mr-2\" />\n        More filters\n        <div v-if=\"activeFiltersNum > 0\" class=\"px-2\">\n          <div\n            class=\"flex justify-center items-center p-2 w-5 h-5 text-xs text-center text-white bg-blue-600 rounded-full\"\n          >\n            {{ activeFiltersNum }}\n          </div>\n        </div>\n      </BalBtn>\n    </template>\n    <BalVStack spacing=\"md\" width=\"40\">\n      <BalVStack spacing=\"sm\">\n        <BalText size=\"lg\" weight=\"bold\">Pool type</BalText>\n        <div\n          v-for=\"option in options\"\n          :key=\"option\"\n          class=\"text-base text-gray-600 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-850 cursor-pointer\"\n        >\n          <BalCheckbox\n            :modelValue=\"_selectedPoolType === option\"\n            :name=\"option\"\n            :label=\"option\"\n            noMargin\n            alignCheckbox=\"items-center\"\n            @input=\"event => handlePoolTypeCheck(event, option)\"\n          />\n        </div>\n      </BalVStack>\n\n      <BalVStack spacing=\"sm\">\n        <BalText size=\"lg\" weight=\"bold\" margin>Pool attributes</BalText>\n        <div\n          v-for=\"option in attributeOptions\"\n          :key=\"option\"\n          class=\"text-base text-gray-600 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-850 cursor-pointer\"\n        >\n          <BalCheckbox\n            :modelValue=\"_selectedAttributes.includes(option)\"\n            :name=\"option\"\n            :label=\"option\"\n            noMargin\n            alignCheckbox=\"items-center\"\n            @input=\"event => handleAttributeCheck(event, option)\"\n          />\n        </div>\n      </BalVStack>\n    </BalVStack>\n  </BalPopover>\n</template>\n","import { ref, onBeforeMount } from 'vue';\n\nconst lrtPools = ref<string[]>([]);\n\nconst chainIdToNetworkFileMap = {\n  1: 'mainnet',\n  1101: 'zkevm',\n};\n\nexport function usePoolGroups(chainId: string | number) {\n  const fileName = chainIdToNetworkFileMap[chainId] || 'mainnet';\n\n  onBeforeMount(async () => {\n    const module = await import(`@/assets/data/pools/${fileName}.json`);\n    const pools = module.default;\n\n    lrtPools.value = pools\n      .filter(pool => pool.categories.includes('lrt'))\n      .map(pool => pool.id);\n  });\n\n  return { lrtPools };\n}\n","<script setup lang=\"ts\">\nimport { useRouter } from 'vue-router';\n\n//import HomePageHero from '@/components/heros/HomePageHero.vue';\nimport TokenSearchInput from '@/components/inputs/TokenSearchInput.vue';\nimport FeaturedProtocols from '@/components/sections/FeaturedProtocols.vue';\nimport PoolsTable from '@/components/tables/PoolsTable/PoolsTable.vue';\nimport usePoolFilters from '@/composables/pools/usePoolFilters';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNetwork from '@/composables/useNetwork';\nimport usePools from '@/composables/pools/usePoolsDemo';\nimport { lsGet, lsSet } from '@/lib/utils';\nimport LS_KEYS from '@/constants/local-storage.keys';\nimport { useIntersectionObserver } from '@vueuse/core';\nimport { PoolType } from '@/services/pool/types';\nimport PoolFeatureSelect from '@/components/inputs/PoolFeatureSelect.vue';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { PoolAttributeFilter, PoolTypeFilter } from '@/types/pools';\nimport UserInvestedInAffectedPoolAlert from '@/pages/recovery-exit/UserInvestedInAffectedPoolAlert.vue';\nimport { usePoolGroups } from '@/composables/usePoolGroups';\n\nconst featuredProtocolsSentinel = ref<HTMLDivElement | null>(null);\nconst isFeaturedProtocolsVisible = ref(false);\n\n/*\nuseIntersectionObserver(featuredProtocolsSentinel, ([{ isIntersecting }]) => {\n  if (isIntersecting) {\n    isFeaturedProtocolsVisible.value = true;\n  }\n});\n*/\n/**\n * STATE\n */\nconst route = useRoute();\nconst urlSortParam = route.query?.sort as string | undefined;\nconst initSortCol =\n  urlSortParam || lsGet(LS_KEYS.App.PoolSorting) || 'totalLiquidity';\nconst sortField = ref('totalLiquidity');\nconst poolTypeFilter = ref<PoolTypeFilter>();\nconst filterPoolIds = ref<string[]>([]);\nconst filterPoolTypes = ref<PoolType[]>([]);\nconst filterPoolAttributes = ref<PoolAttributeFilter[]>([]);\n\n/**\n * COMPOSABLES\n */\nconst router = useRouter();\nconst { getToken } = useTokens();\nconst { appNetworkConfig } = useNetwork();\nconst isElementSupported = appNetworkConfig.supportsElementPools;\nconst { selectedTokens, addSelectedToken, removeSelectedToken } =\n  usePoolFilters();\n\nconst { pools, isLoading, isFetchingNextPage, loadMorePools } = usePools({\n  filterTokens: selectedTokens,\n  sortField,\n  poolIds: filterPoolIds,\n  poolTypes: filterPoolTypes,\n  poolAttributes: filterPoolAttributes,\n});\n\nconst { upToSmallBreakpoint } = useBreakpoints();\nconst { networkSlug, networkConfig } = useNetwork();\nconst { lrtPools } = usePoolGroups(networkConfig.chainId);\n\nconst isPaginated = computed(() => pools.value.length >= 10);\n\n/**\n * METHODS\n */\nfunction navigateToCreatePool() {\n  router.push({ name: 'create-pool', params: { networkSlug } });\n}\n\nfunction onColumnSort(columnId: string) {\n  sortField.value = columnId;\n  lsSet(LS_KEYS.App.PoolSorting, columnId);\n}\n\nfunction updatePoolFilters(feature: PoolTypeFilter | undefined) {\n  switch (feature) {\n    case PoolTypeFilter.Weighted:\n      filterPoolIds.value = [];\n      filterPoolTypes.value = [PoolType.Weighted];\n      break;\n    case PoolTypeFilter.Stable:\n      filterPoolIds.value = [];\n      filterPoolTypes.value = [\n        PoolType.Stable,\n        PoolType.StablePhantom,\n        PoolType.MetaStable,\n        PoolType.ComposableStable,\n      ];\n      break;\n    case PoolTypeFilter.CLP:\n      filterPoolIds.value = [];\n      filterPoolTypes.value = [PoolType.Gyro2, PoolType.Gyro3, PoolType.GyroE];\n      break;\n    case PoolTypeFilter.LBP:\n      filterPoolIds.value = [];\n      filterPoolTypes.value = [PoolType.LiquidityBootstrapping];\n      break;\n    case PoolTypeFilter.LRT:\n      filterPoolIds.value = lrtPools.value;\n      filterPoolTypes.value = [];\n      break;\n    default:\n      filterPoolIds.value = [];\n      filterPoolTypes.value = [];\n  }\n}\n\nfunction removeAttributeFilter(attribute: PoolAttributeFilter) {\n  const index = filterPoolAttributes.value.indexOf(attribute);\n  filterPoolAttributes.value.splice(index, 1);\n}\n\nwatch(poolTypeFilter, newPoolTypeFilter => {\n  updatePoolFilters(newPoolTypeFilter);\n});\n</script>\n\n<template>\n  <div>\n\n    <div class=\"xl:container xl:px-4 pt-10 md:pt-8 xl:mx-auto\">\n      <UserInvestedInAffectedPoolAlert />\n      <BalStack vertical>\n        <div class=\"px-4 xl:px-0\">\n          <div class=\"flex justify-between items-end mb-2\">\n            <h3>\n              {{ networkConfig.chainName }}\n              <span class=\"lowercase\">{{ $t('pools') }}</span>\n            </h3>\n            <BalBtn\n              v-if=\"upToSmallBreakpoint\"\n              color=\"blue\"\n              size=\"sm\"\n              outline\n              :class=\"{ 'mt-4': upToSmallBreakpoint }\"\n              @click=\"navigateToCreatePool\"\n            >\n              {{ $t('createAPool.title') }}\n            </BalBtn>\n          </div>\n\n          <div\n            class=\"flex flex-col md:flex-row justify-between items-end lg:items-center w-full\"\n          >\n            <BalVStack width=\"full\">\n              <BalHStack justify=\"between\" width=\"full\">\n                <BalHStack spacing=\"md\">\n                  <TokenSearchInput\n                    v-model=\"selectedTokens\"\n                    @add=\"addSelectedToken\"\n                    @remove=\"removeSelectedToken\"\n                  />\n                  <PoolFeatureSelect\n                    v-model:selectedPoolType=\"poolTypeFilter\"\n                    v-model:selectedAttributes=\"filterPoolAttributes\"\n                  />\n                </BalHStack>\n\n                <BalBtn\n                  v-if=\"!upToSmallBreakpoint\"\n                  color=\"blue\"\n                  size=\"sm\"\n                  outline\n                  :class=\"{ 'mt-4': upToSmallBreakpoint }\"\n                  :block=\"upToSmallBreakpoint\"\n                  @click=\"navigateToCreatePool\"\n                >\n                  {{ $t('createAPool.title') }}\n                </BalBtn>\n              </BalHStack>\n              <BalHStack spacing=\"sm\">\n                <TransitionGroup name=\"pop\">\n                  <BalTag\n                    v-for=\"token in selectedTokens\"\n                    :key=\"token\"\n                    :closeable=\"true\"\n                    class=\"mt-4\"\n                    @closed=\"removeSelectedToken(token)\"\n                  >\n                    <BalAsset :address=\"token\" :size=\"20\" class=\"flex-auto\" />\n                    <span class=\"ml-2\">{{ getToken(token)?.symbol }}</span>\n                  </BalTag>\n                </TransitionGroup>\n\n                <Transition name=\"pop\">\n                  <BalTag\n                    v-if=\"poolTypeFilter\"\n                    :closeable=\"true\"\n                    class=\"mt-4\"\n                    @closed=\"poolTypeFilter = undefined\"\n                  >\n                    <span>{{ poolTypeFilter }}</span>\n                  </BalTag>\n                </Transition>\n\n                <TransitionGroup name=\"pop\">\n                  <BalTag\n                    v-for=\"attribute in filterPoolAttributes\"\n                    :key=\"attribute\"\n                    :closeable=\"true\"\n                    class=\"mt-4\"\n                    @closed=\"removeAttributeFilter(attribute)\"\n                  >\n                    <span>{{ attribute }}</span>\n                  </BalTag>\n                </TransitionGroup>\n              </BalHStack>\n            </BalVStack>\n          </div>\n        </div>\n        <PoolsTable\n          :data=\"pools\"\n          :noPoolsLabel=\"$t('noPoolsFound')\"\n          :isLoading=\"isLoading\"\n          :selectedTokens=\"selectedTokens\"\n          class=\"mb-8\"\n          :sortColumn=\"initSortCol\"\n          :hiddenColumns=\"['migrate', 'actions', 'lockEndDate']\"\n          :isLoadingMore=\"isFetchingNextPage\"\n          :isPaginated=\"isPaginated\"\n          skeletonClass=\"pools-table-loading-height\"\n          @on-column-sort=\"onColumnSort\"\n          @load-more=\"loadMorePools\"\n        />\n        <div ref=\"featuredProtocolsSentinel\" />\n        <div\n          v-if=\"isElementSupported && isFeaturedProtocolsVisible\"\n          class=\"p-4 xl:p-0 mt-12\"\n        >\n          <FeaturedProtocols />\n        </div>\n      </BalStack>\n    </div>\n  </div>\n</template>\n\n<style>\n.pools-table-loading-height {\n  height: 40rem;\n}\n</style>\n"],"file":"assets/index-38c5261d.js"}